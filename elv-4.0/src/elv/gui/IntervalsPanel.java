/*
 * IntervalsPanel.java
 */
package elv.gui;

/**
 * Class for editing one type of intervals.
 * @author Elv
 */
public class IntervalsPanel extends javax.swing.JPanel implements elv.util.Saveable
{
  
  // Constants.
  /** The "From" column title. */
  private final static java.lang.String FROM_COLUMN= "From";
  /** The "To" column title. */
  private final static java.lang.String TO_COLUMN= "To";
  
  // Variables.
  /** The owner task. */
  private elv.task.Task task;
  /** The type of intervals. */
  private elv.util.parameters.Interval parameterType;
  /** The intervals. */
  private java.util.Vector<elv.util.parameters.Interval> intervals;
  /** The changed state of intervals. */
  private boolean isChanged = false;
  /** The state of the owner task. */
  private elv.util.State state;
  /** The state of changeability. */
  private boolean isEnabled = true;
  /** The table of intervals. */
  private IntervalsTable intervalsTable;
  
  /**
   * Constructor.
   * @param task the owner task.
   * @param parameterType the type of intervals.
   * @param cloneableTask the task with the cloneable intervals.
   */
  public IntervalsPanel(elv.task.Task task, elv.util.parameters.Interval parameterType, elv.task.Task cloneableTask)
  {
    this.task = task;
    this.parameterType = parameterType;
    try
    {
      state = (elv.util.State)elv.util.Property.get(elv.task.Task.STATE_NAME, task.getProperties()).getValue();
      isEnabled = (!(task.getContainer() instanceof elv.task.Archive) && 
        (state.equals(new elv.util.State(elv.util.State.UNDEFINED)) ||
        state.equals(new elv.util.State(elv.util.State.DEFINED)) ||
        state.equals(new elv.util.State(elv.util.State.SCHEDULED))));
      if(state.equals(new elv.util.State(elv.util.State.UNDEFINED)))
      {
        intervals = new java.util.Vector<elv.util.parameters.Interval>();
        if(cloneableTask != null)
        {
          elv.util.State cloneState = (elv.util.State)elv.util.Property.get(elv.task.Task.STATE_NAME, cloneableTask.getProperties()).getValue();
          if(!cloneState.equals(new elv.util.State(elv.util.State.UNDEFINED)))
          {
            if(cloneableTask.getContainer() instanceof elv.task.Archive)
            {
              java.lang.String name = cloneableTask.getName() + "/" + cloneableTask.PROPERTY_FOLDER + "/" + parameterType.getFile();
              intervals = elv.util.client.ClientStub.loadParameters(cloneableTask.getContainer().getFolderPath(), name, parameterType);
            }
            else
            {
              intervals = elv.util.client.ClientStub.loadParameters(cloneableTask.getPropertyFolderPath(), parameterType.getFile(), parameterType);
            }
          }
        }
      }
      else
      {
        if(task.getContainer() instanceof elv.task.Archive)
        {
          java.lang.String name = task.getName() + "/" + task.PROPERTY_FOLDER + "/" + parameterType.getFile();
          intervals = elv.util.client.ClientStub.loadParameters(task.getContainer().getFolderPath(), name, parameterType);
        }
        else
        {
          intervals = elv.util.client.ClientStub.loadParameters(task.getPropertyFolderPath(), parameterType.getFile(), parameterType);
        }
      }
      // Set state change support.
      task.getChangeSupport().addPropertyChangeListener(elv.util.State.TITLE, new java.beans.PropertyChangeListener()
      {
        public void propertyChange(java.beans.PropertyChangeEvent evt)
        {
          stateChange(evt);
        }
      });
      
      initComponents();
      initIntervalsTable();
      setEnabled(isEnabled);
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
    
  }
  
  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents()//GEN-BEGIN:initComponents
  {
    addPopupMenu = new javax.swing.JPopupMenu();
    iIntervalMenuItem = new javax.swing.JMenuItem();
    xxIntervalsMenuItem = new javax.swing.JMenuItem();
    cIntervalsMenuItem = new javax.swing.JMenuItem();
    intervalsScrollPane = new javax.swing.JScrollPane();
    intervalsButtonOrientationPanel = new javax.swing.JPanel();
    intervalsButtonPanel = new javax.swing.JPanel();
    addButton = new javax.swing.JButton();
    removeButton = new javax.swing.JButton();

    iIntervalMenuItem.setText(elv.util.Util.translate(elv.util.parameters.AgeInterval.I_INTERVAL));
    iIntervalMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        iIntervalMenuItemActionPerformed(evt);
      }
    });

    addPopupMenu.add(iIntervalMenuItem);

    xxIntervalsMenuItem.setText(elv.util.Util.translate(elv.util.parameters.AgeInterval.XX_INTERVALS));
    xxIntervalsMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        xxIntervalsMenuItemActionPerformed(evt);
      }
    });

    addPopupMenu.add(xxIntervalsMenuItem);

    cIntervalsMenuItem.setText(elv.util.Util.translate(elv.util.parameters.AgeInterval.C_INTERVALS));
    cIntervalsMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cIntervalsMenuItemActionPerformed(evt);
      }
    });

    addPopupMenu.add(cIntervalsMenuItem);

    setLayout(new java.awt.BorderLayout());

    add(intervalsScrollPane, java.awt.BorderLayout.CENTER);

    intervalsButtonOrientationPanel.setLayout(new java.awt.BorderLayout());

    intervalsButtonPanel.setLayout(new java.awt.GridLayout(0, 1));

    addButton.setText("+");
    addButton.setToolTipText(new elv.util.Action(elv.util.Action.ADD).toString());
    addButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        addButtonActionPerformed(evt);
      }
    });

    intervalsButtonPanel.add(addButton);

    removeButton.setText("-");
    removeButton.setToolTipText(new elv.util.Action(elv.util.Action.REMOVE).toString());
    removeButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        removeButtonActionPerformed(evt);
      }
    });

    intervalsButtonPanel.add(removeButton);

    intervalsButtonOrientationPanel.add(intervalsButtonPanel, java.awt.BorderLayout.NORTH);

    add(intervalsButtonOrientationPanel, java.awt.BorderLayout.EAST);

  }//GEN-END:initComponents

  private void cIntervalsMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cIntervalsMenuItemActionPerformed
  {//GEN-HEADEREND:event_cIntervalsMenuItemActionPerformed
    addAction(elv.util.parameters.AgeInterval.C_INTERVALS);
  }//GEN-LAST:event_cIntervalsMenuItemActionPerformed

  private void xxIntervalsMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_xxIntervalsMenuItemActionPerformed
  {//GEN-HEADEREND:event_xxIntervalsMenuItemActionPerformed
    addAction(elv.util.parameters.AgeInterval.XX_INTERVALS);
  }//GEN-LAST:event_xxIntervalsMenuItemActionPerformed

  private void iIntervalMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_iIntervalMenuItemActionPerformed
  {//GEN-HEADEREND:event_iIntervalMenuItemActionPerformed
    addAction("");
  }//GEN-LAST:event_iIntervalMenuItemActionPerformed
  
  /**
   * Method for Add button action.
   */
  private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
  {//GEN-HEADEREND:event_addButtonActionPerformed
    try
    {
      if(parameterType instanceof elv.util.parameters.AgeInterval)
      {
        if(addPopupMenu.isVisible())
        {
          addPopupMenu.setVisible(false);
        }
        else
        {
          addPopupMenu.show(intervalsButtonPanel, addButton.getX(), addButton.getY() + addButton.getHeight()); 
        }
      }
      else
      {
        addAction("");
        task.getChangeSupport().firePropertyChange(elv.util.parameters.YearInterval.TITLE, null, intervals);
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }//GEN-LAST:event_addButtonActionPerformed
  
  /**
   * Method for Remove button action.
   */
  private void removeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_removeButtonActionPerformed
  {//GEN-HEADEREND:event_removeButtonActionPerformed
    try
    {
      int[] selectedRows = intervalsTable.getSelectedRows();
      for(int i = selectedRows.length - 1; i >= 0; i--)
      {
        intervals.remove(((javax.swing.table.DefaultTableModel)intervalsTable.getModel()).getValueAt(selectedRows[i], 0));
        intervalsTable.setModel(new IntervalsTableModel());
  //      ((javax.swing.table.DefaultTableModel)intervalsTable.getModel()).removeRow(selectedRows[i]);
      }
      if(selectedRows.length > 0)
      {
        setChanged(true);
        elv.util.Util.getMainFrame().setChanged(true);
        setEnabled(isEnabled);
        if(parameterType instanceof elv.util.parameters.YearInterval)
        {
          task.getChangeSupport().firePropertyChange(elv.util.parameters.YearInterval.TITLE, null, intervals);
        }
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }//GEN-LAST:event_removeButtonActionPerformed
  
  /**
   * Method for Add button action.
   */
  private void addAction(java.lang.String type)                                          
  {                                              
    try
    {
      if(type.equals(elv.util.parameters.AgeInterval.XX_INTERVALS))
      {
        for(int i = 0; i < parameterType.getMaximum(); i += 5)
        {
          int from = i;
          int to = parameterType.getMaximum() - i - 5 >= 5 ? i + 4 : parameterType.getMaximum();
          elv.util.parameters.Interval interval = parameterType.parseInit(from, to);
          ((javax.swing.table.DefaultTableModel)intervalsTable.getModel()).addRow(new java.lang.Object[]{interval, interval});
          intervals.add(interval);
        }
      }
      else if(type.equals(elv.util.parameters.AgeInterval.C_INTERVALS))
      {
        for(int i = 0; i <= parameterType.getMaximum(); i++)
        {
          elv.util.parameters.Interval interval = parameterType.parseInit(i, i);
          ((javax.swing.table.DefaultTableModel)intervalsTable.getModel()).addRow(new java.lang.Object[]{interval, interval});
          intervals.add(interval);
        }
      }
      else
      {
        int toIndex = 0;
        for(int i = 0; i < intervalsTable.getColumnCount(); i++)
        {
          if(intervalsTable.getColumnName(i).equals(TO_COLUMN))
          {
            toIndex = i;
            break;
          }
        }
        int rowCount = intervalsTable.getRowCount();
        int from = (rowCount == 0 ? parameterType.getMinimum() : ((elv.util.parameters.Interval)intervalsTable.getModel().getValueAt(rowCount - 1, toIndex)).getToValue() + 1);
        int to = parameterType.getMaximum();
        elv.util.parameters.Interval interval = parameterType.parseInit(from, to);
        ((javax.swing.table.DefaultTableModel)intervalsTable.getModel()).addRow(new java.lang.Object[]{interval, interval});
        intervals.add(interval);
      }
      setChanged(true);
      elv.util.Util.getMainFrame().setChanged(true);
      setEnabled(isEnabled);
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }                                         
  
  /**
   * Method for initializing the IntervalsTable.
   */
  private void initIntervalsTable() throws java.lang.Exception
  {
    // Set minimum and maximum values for year-interval.
    if(parameterType instanceof elv.util.parameters.YearInterval)
    {
      elv.util.parameters.YearInterval[] possibleYearIntervals = elv.util.client.ClientStub.getPossibleYearIntervals();
      int minimum = elv.util.parameters.YearInterval.MINIMUM;
      int maximum = elv.util.parameters.YearInterval.MAXIMUM;
      switch(task.getType())
      {
        case elv.task.Task.POPULATION_PREPARATION:
          minimum = possibleYearIntervals[elv.util.Table.POPULATION].getFromValue();
          maximum = possibleYearIntervals[elv.util.Table.POPULATION].getToValue();
          break;
        case elv.task.Task.MORTALITY_SELECTION:
        case elv.task.Task.MORTALITY_PREPARATION:
          minimum = possibleYearIntervals[elv.util.Table.MORTALITY].getFromValue();
          maximum = possibleYearIntervals[elv.util.Table.MORTALITY].getToValue();
          break;
        case elv.task.Task.MORBIDITY_SELECTION:
        case elv.task.Task.MORBIDITY_PREPARATION:
          minimum = possibleYearIntervals[elv.util.Table.MORBIDITY].getFromValue();
          maximum = possibleYearIntervals[elv.util.Table.MORBIDITY].getToValue();
          break;
        case elv.task.Task.MORTALITY_STANDARDIZATION:
        case elv.task.Task.MORTALITY_SMOOTHING:
        case elv.task.Task.MORTALITY_CLUSTER_ANALYSIS:
        case elv.task.Task.MORTALITY_REGION_ANALYSIS:
        case elv.task.Task.MORTALITY_POINT_SOURCE_ANALYSIS:
          minimum = java.lang.Math.max(possibleYearIntervals[elv.util.Table.MORTALITY].getFromValue(), possibleYearIntervals[elv.util.Table.POPULATION].getFromValue());
          maximum = java.lang.Math.min(possibleYearIntervals[elv.util.Table.MORTALITY].getToValue(), possibleYearIntervals[elv.util.Table.POPULATION].getToValue());
          break;
        case elv.task.Task.MORBIDITY_STANDARDIZATION:
        case elv.task.Task.MORBIDITY_SMOOTHING:
        case elv.task.Task.MORBIDITY_CLUSTER_ANALYSIS:
        case elv.task.Task.MORBIDITY_REGION_ANALYSIS:
        case elv.task.Task.MORBIDITY_POINT_SOURCE_ANALYSIS:
          minimum = java.lang.Math.max(possibleYearIntervals[elv.util.Table.MORBIDITY].getFromValue(), possibleYearIntervals[elv.util.Table.POPULATION].getFromValue());
          maximum = java.lang.Math.min(possibleYearIntervals[elv.util.Table.MORBIDITY].getToValue(), possibleYearIntervals[elv.util.Table.POPULATION].getToValue());
          break;
      }
      ((elv.util.parameters.YearInterval)parameterType).setMinMax(minimum, maximum);
      elv.util.parameters.YearInterval.MINIMUM = minimum;
      elv.util.parameters.YearInterval.MAXIMUM = maximum;
    }
    intervalsTable = new IntervalsTable();
    intervalsScrollPane.setViewportView(intervalsTable);
  }
  
  /**
   * Overridden method from <CODE>javax.swing.JComponent</CODE>.
   * @param isEnabled the enabling direction.
   */
  public void setEnabled(boolean isEnabled)
  {
    this.isEnabled = isEnabled;
    int index = 0;
    for(index = 0; index < intervalsTable.getColumnCount(); index++)
    {
      if(intervalsTable.getColumnName(index).equals(TO_COLUMN))
      {
        break;
      }
    }
    xxIntervalsMenuItem.setEnabled(isEnabled && intervalsTable.getRowCount() == 0);
    cIntervalsMenuItem.setEnabled(isEnabled && intervalsTable.getRowCount() == 0);
    int toValue = (intervalsTable.getRowCount() == 0 ? parameterType.getMinimum() : ((elv.util.parameters.Interval)intervalsTable.getValueAt(intervalsTable.getRowCount() - 1, index)).getToValue());
    addButton.setEnabled(isEnabled && toValue != parameterType.getMaximum());
    removeButton.setEnabled(isEnabled && intervalsTable.getSelectedRows().length > 0);
  }
  
  /**
   * Implemented method from <CODE>elv.util.Saveable</CODE>.
   * @return the changeable owner object.
   */
  public elv.util.Changeable getOwner()
  {
    return task;
  }
  
  /**
   * Implemented method from <CODE>elv.util.Saveable</CODE>.
   * @return the type object.
   */
  public java.lang.Object getType()
  {
    return parameterType;
  }
  
  /**
   * Implemented method from <CODE>elv.util.Saveable</CODE>.
   */
  public void save()
  {
    if(isChanged())
    {
      try
      {
        elv.util.client.ClientStub.storeParameters(task.getPropertyFolderPath() + "/" + parameterType.getFile(), intervals);
        if(task != null)
        {
          elv.util.Property.get(elv.task.Task.MODIFIED_NAME, task.getProperties()).setValue(new java.util.Date());
          java.lang.String pathName = task.getPropertyFolderPath() + "/" + task.getPropertyFile();
          elv.util.client.ClientStub.storeProperties(pathName, task.getProperties());
          // Fire property change for reload the task properties.
          task.getChangeSupport().firePropertyChange(elv.task.Task.MODIFIED_NAME, null, state);
        }
        setChanged(false);
      }
      catch(java.lang.Exception exc)
      {
        elv.util.Error.showErrorMessage(this, exc);
      }
    }
  }
  
  /**
   * Implemented method from <CODE>elv.util.Saveable</CODE>.
   * @return true if there were changes.
   */
  public boolean isChanged()
  {
    return isChanged;
  }
  
  /**
   * Implemented method from <CODE>elv.util.Saveable</CODE>.
   * @param isChanged boolean to set the change state.
   */
  public void setChanged(boolean isChanged)
  {
    this.isChanged = isChanged;
  }
  
  /**
   * Method for state change.
   * @param evt a <CODE>java.beans.PropertyChangeEvent</>code object.
   */
  private void stateChange(java.beans.PropertyChangeEvent evt)
  {
    try
    {
      boolean previousIsEnabled = isEnabled;
      elv.util.State state = (elv.util.State)evt.getNewValue();
      isEnabled = (!(task.getContainer() instanceof elv.task.Archive) && 
        (state.equals(new elv.util.State(elv.util.State.UNDEFINED)) ||
        state.equals(new elv.util.State(elv.util.State.DEFINED)) ||
        state.equals(new elv.util.State(elv.util.State.SCHEDULED))));
      if(isEnabled != previousIsEnabled)
      {
        setEnabled(isEnabled);
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }
  
  /**
   * Inner class for reprezenting <CODE>elv.task.parameters.Intervals</CODE>.
   */
  private class IntervalsTable extends javax.swing.JTable
  {
    /**
     * Constructor.
     */
    public IntervalsTable()
    {
      super();
      setFillsViewportHeight(true);
      setRowHeight(elv.util.Util.ROW_HEIGHT);
      setModel(new IntervalsTableModel());
      setTableHeader(null);
    }
    
    /**
     * Overridden method from <CODE>javax.swing.JTable</CODE>.
     */
    public javax.swing.table.TableCellRenderer getCellRenderer(int row, int column)
    {
      return new IntervalsTableCellRenderer();
    }

    /**
     * Overridden method from <CODE>javax.swing.JTable</CODE>.
     */
    public javax.swing.table.TableCellEditor getCellEditor(int row, int column)
    {
      return new IntervalsTableCellEditor();
    }
  }
  
  /**
   * Inner class for table model.
   */
  private class IntervalsTableModel extends javax.swing.table.DefaultTableModel
  {
    
    /**
     * Constructor.
     */
    public IntervalsTableModel()
    {
      addColumn(FROM_COLUMN);
      addColumn(TO_COLUMN);
      for(elv.util.parameters.Interval iteratorInterval : intervals)
      {
        addRow(new java.lang.Object[]{iteratorInterval, iteratorInterval});
      }
    }

    /**
     * Overridden method from <CODE>javax.swing.table.DefaultTableModel</CODE>.
     */
    public boolean isCellEditable(int row, int column)
    {
       return isEnabled;
    }
  }
  
  /**
   * Inner class for cell rendering.
   */
  private class IntervalsTableCellRenderer extends javax.swing.table.DefaultTableCellRenderer
  {

    /**
     * Overridden method from <CODE>javax.swing.table.DefaultTableCellRenderer</CODE>.
     */
    public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, java.lang.Object cellObject, boolean isSelected, boolean hasFocus, int row, int column)
    {
      super.getTableCellRendererComponent(table, cellObject, isSelected, hasFocus, row, column);
      elv.util.parameters.Interval interval = (elv.util.parameters.Interval)cellObject;
      if(table.getColumnName(column).equals(FROM_COLUMN))
      {
        setText(java.lang.String.valueOf(interval.getFromValue()));
      }
      else
      {
        setText(java.lang.String.valueOf(interval.getToValue()));
      }
      return this;
    }
  }
  
  /**
   * Inner class for cell editing.
   */
  private class IntervalsTableCellEditor extends javax.swing.DefaultCellEditor
  {
    /**
     * Variable.
     */
    private elv.util.parameters.Interval interval;
    
    /**
     * Constructor.
     */
    public IntervalsTableCellEditor()
    {
      super(new javax.swing.JTextField());
      setClickCountToStart(1);
    }
    
    /**
     * Overridden method from <CODE>javax.swing.DefaultCellEditor</CODE>.
     */
    public java.lang.Object getCellEditorValue()
    {
      return interval;
    }
        
    /**
     * Overridden method from <CODE>javax.swing.DefaultCellEditor</CODE>.
     */
    public java.awt.Component getTableCellEditorComponent(javax.swing.JTable table, java.lang.Object cellObject, boolean isSelected, int row, int column)
    {
      interval = (elv.util.parameters.Interval)cellObject;
      setEnabled(isEnabled);
      final javax.swing.JComboBox editorComboBox = new javax.swing.JComboBox();
      int fromIndex = 0;
      int toIndex = 0;
      for(int i = 0; i < table.getColumnCount(); i++)
      {
        if(table.getColumnName(i).equals(FROM_COLUMN))
        {
          fromIndex = i;
        }
        if(table.getColumnName(i).equals(TO_COLUMN))
        {
          toIndex = i;
        }
      }
      int from = 0;
      int to = 0;
      int value = 0;
      if(table.getColumnName(column).equals(FROM_COLUMN))
      {
        from = (row == 0 ? parameterType.getMinimum() : ((elv.util.parameters.Interval)table.getModel().getValueAt(row - 1, toIndex)).getToValue() + 1);
        to = interval.getToValue();
        value = interval.getFromValue();
      }
      else
      {
        from = interval.getFromValue();
        to = parameterType.getMaximum();
        to = (row == table.getRowCount() - 1 ? parameterType.getMaximum() : ((elv.util.parameters.Interval)table.getModel().getValueAt(row + 1, fromIndex)).getFromValue() - 1);
        value = interval.getToValue();
      }
      for(int i = 0; i < to - from + 1; i++)
      {
        int addValue = from + i;
        editorComboBox.addItem(new java.lang.Integer(addValue));
        if(value == addValue)
        {
          editorComboBox.setSelectedIndex(i);
        }
      }
      if(table.getColumnName(column).equals(FROM_COLUMN))
      {
        editorComboBox.addActionListener(new java.awt.event.ActionListener()
        {
          public void actionPerformed(java.awt.event.ActionEvent evt)
          {
            int selectedValue = ((java.lang.Integer)editorComboBox.getSelectedItem()).intValue();
            if(interval.getFromValue() != selectedValue)
            {
              interval.setFromValue(selectedValue);
              setChanged();
            }
            setEnabled(isEnabled);
            fireEditingStopped();
          }
        });
      }
      else
      {
        editorComboBox.addActionListener(new java.awt.event.ActionListener()
        {
          public void actionPerformed(java.awt.event.ActionEvent evt)
          {
            int selectedValue = ((java.lang.Integer)editorComboBox.getSelectedItem()).intValue();
            if(interval.getToValue() != selectedValue)
            {
              interval.setToValue(selectedValue);
              setChanged();
            }
            setEnabled(isEnabled);
            fireEditingStopped();
          }
        });
      }
      return editorComboBox;
    }
    /**
     * Inner method for change setting.
     */
    private void setChanged()
    {
      try
      {
        IntervalsPanel.this.setChanged(true);
      }
      catch(java.lang.Exception exc)
      {
      }
      elv.util.Util.getMainFrame().setChanged(true);
    }

  }
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton addButton;
  private javax.swing.JPopupMenu addPopupMenu;
  private javax.swing.JMenuItem cIntervalsMenuItem;
  private javax.swing.JMenuItem iIntervalMenuItem;
  private javax.swing.JPanel intervalsButtonOrientationPanel;
  private javax.swing.JPanel intervalsButtonPanel;
  private javax.swing.JScrollPane intervalsScrollPane;
  private javax.swing.JButton removeButton;
  private javax.swing.JMenuItem xxIntervalsMenuItem;
  // End of variables declaration//GEN-END:variables
  
}
