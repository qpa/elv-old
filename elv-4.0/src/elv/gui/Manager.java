/*
 * Manager.java
 */
package elv.gui;

/**
 * Class for managing the ELV system.
 * @author Elv
 */
public class Manager extends javax.swing.JFrame
{
  
  // Constant.
  /** Constant for the change support. */
  protected final static java.lang.String MODIFIED = "Modified";
  
  // Variables.
  /** The change support. */
  private java.beans.PropertyChangeSupport changeSupport = new java.beans.PropertyChangeSupport(this);
  /** The browser panel. */
  BrowserPanel browserPanel;
  /** The navigator panel. */
  NavigatorPanel navigatorPanel;
  /** The clipboard object for copy and paste. */
  private ClipBoard clipBoard;
  /** The file object reprezenting the currently choosed directory.*/
  private static java.io.File currentDirectory = null;
  
  /**
   * Constructor.
   */
  public Manager()
  {
    super();
    try
    {
      // Set primary Look And Feel.
      javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
      // Set modification support.
      changeSupport.addPropertyChangeListener(elv.task.Task.MODIFIED_NAME, new java.beans.PropertyChangeListener()
      {
        public void propertyChange(java.beans.PropertyChangeEvent evt)
        {
//          modificationChange(evt);
        }
      });
      // Load existing users.
      java.util.Vector<java.util.Vector> appVectorOfChildren = elv.util.client.ClientStub.loadChildren(null);
      java.util.Vector<elv.util.User> users = appVectorOfChildren.get(1);
      // Login.
      elv.util.Util.setActualLocale(new java.util.Locale("hu")); // Set login language.
      LoginDialog loginDialog = new LoginDialog(elv.util.Util.translate(elv.util.Util.LOGIN), users);
      loginDialog.setVisible(true);
      elv.util.User actualUser = loginDialog.getUser();
      // Initialize the application properties.
      elv.util.Root root = (elv.util.Root)appVectorOfChildren.get(0).get(0);
      root.setClientProperties();
      elv.util.Util.setUserProperties(this, actualUser);
      // Set the Look And Feel.
      javax.swing.JComponent.setDefaultLocale(elv.util.Util.getActualLocale());
      try
      {
        elv.util.Property<java.lang.String> lafProperty = elv.util.Property.get(elv.util.User.LOOK_AND_FEEL_CLASS_NAME, actualUser.getProperties());
        java.lang.String lookAndFeelClass = lafProperty.getValue();
        javax.swing.UIManager.setLookAndFeel(lookAndFeelClass);
      }
      catch(java.lang.Exception exc)
      {
        try
        {
          javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        }
        catch(java.lang.Exception ex)
        {
          javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getCrossPlatformLookAndFeelClassName());
        } 
      }
      // Set application icon.
      setIconImage(root.getIcon().getImage());
      // Set aaplication location and size.
      java.awt.Point windowLocation = ((java.util.Vector<java.awt.Point>)elv.util.Property.get(elv.util.User.LOCATIONS_NAME, actualUser.getProperties()).getValue()).get(elv.util.User.WINDOW);
      setLocation(windowLocation);
      java.awt.Dimension windowSize = ((java.util.Vector<java.awt.Dimension>)elv.util.Property.get(elv.util.User.SIZES_NAME, actualUser.getProperties()).getValue()).get(elv.util.User.WINDOW);
      java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
      if (windowSize.height > screenSize.height)
      {
        windowSize.height = screenSize.height;
      }
      if (windowSize.width > screenSize.width)
      {
        windowSize.width = screenSize.width;
      }
      setSize(windowSize);
      
      initComponents();
      
      // Init panels.
      browserPanel = new BrowserPanel(this, root, appVectorOfChildren);
      leftSplitPane.setTopComponent(browserPanel);
      navigatorPanel = new NavigatorPanel(this, null);
      leftSplitPane.setBottomComponent(navigatorPanel);
      
      // Set help broker.
      java.lang.String helpSetName = "resources/help/Elv.hs";
      java.net.URL helpSetURL = javax.help.HelpSet.findHelpSet(getClass().getClassLoader(), helpSetName, elv.util.Util.getActualLocale());
      javax.help.HelpSet helpSet = new javax.help.HelpSet(null, helpSetURL);
      javax.help.HelpBroker helpBroker = helpSet.createHelpBroker();
      contentsMenuItem.addActionListener(new javax.help.CSH.DisplayHelpFromSource(helpBroker));
      
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
      java.lang.System.exit(1);
    }
  }
  
  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    browserPopupMenu = new javax.swing.JPopupMenu();
    cutPopupMenuItem = new javax.swing.JMenuItem();
    copyPopupMenuItem = new javax.swing.JMenuItem();
    pastePopupMenuItem = new javax.swing.JMenuItem();
    refreshPopupMenuItem = new javax.swing.JMenuItem();
    newPopupMenuItem = new javax.swing.JMenuItem();
    renamePopupMenuItem = new javax.swing.JMenuItem();
    deletePopupMenuItem = new javax.swing.JMenuItem();
    propertiesPopupMenuItem = new javax.swing.JMenuItem();
    progressesPopupMenuItem = new javax.swing.JMenuItem();
    schedulePopupMenuItem = new javax.swing.JMenuItem();
    stopPopupMenuItem = new javax.swing.JMenuItem();
    rewindPopupMenuItem = new javax.swing.JMenuItem();
    cleanPopupMenuItem = new javax.swing.JMenuItem();
    importPopupMenuItem = new javax.swing.JMenuItem();
    exportPopupMenuItem = new javax.swing.JMenuItem();
    errorPopupMenuItem = new javax.swing.JMenuItem();
    popupSeparator1 = new javax.swing.JSeparator();
    popupSeparator2 = new javax.swing.JSeparator();
    popupSeparator3 = new javax.swing.JSeparator();
    popupSeparator4 = new javax.swing.JSeparator();
    popupSeparator5 = new javax.swing.JSeparator();
    popupSeparator6 = new javax.swing.JSeparator();
    toolBar = new javax.swing.JToolBar();
    fileToolBar = new javax.swing.JToolBar();
    newButton = new javax.swing.JButton();
    saveButton = new javax.swing.JButton();
    saveAllButton = new javax.swing.JButton();
    editToolBar = new javax.swing.JToolBar();
    cutButton = new javax.swing.JButton();
    copyButton = new javax.swing.JButton();
    pasteButton = new javax.swing.JButton();
    deleteButton = new javax.swing.JButton();
    toolsToolBar = new javax.swing.JToolBar();
    scheduleButton = new javax.swing.JButton();
    stopButton = new javax.swing.JButton();
    rewindButton = new javax.swing.JButton();
    cleanButton = new javax.swing.JButton();
    mainPanel = new javax.swing.JPanel();
    mainSplitPane = new javax.swing.JSplitPane();
    leftSplitPane = new javax.swing.JSplitPane();
    rightTabbedPane = new javax.swing.JTabbedPane();
    attributesPanel = new javax.swing.JPanel();
    resultsPanel = new javax.swing.JPanel();
    menuBar = new javax.swing.JMenuBar();
    fileMenu = new javax.swing.JMenu();
    newMenuItem = new javax.swing.JMenuItem();
    saveMenuItem = new javax.swing.JMenuItem();
    saveAllMenuItem = new javax.swing.JMenuItem();
    saveDocumentsMenu = new javax.swing.JMenu();
    topFileMenuSeparator = new javax.swing.JSeparator();
    importMenuItem = new javax.swing.JMenuItem();
    exportMenuItem = new javax.swing.JMenuItem();
    bottomFileMenuSeparator = new javax.swing.JSeparator();
    exitMenuItem = new javax.swing.JMenuItem();
    editMenu = new javax.swing.JMenu();
    cutMenuItem = new javax.swing.JMenuItem();
    copyMenuItem = new javax.swing.JMenuItem();
    pasteMenuItem = new javax.swing.JMenuItem();
    editMenuSeparator = new javax.swing.JSeparator();
    renameMenuItem = new javax.swing.JMenuItem();
    deleteMenuItem = new javax.swing.JMenuItem();
    toolsMenu = new javax.swing.JMenu();
    scheduleMenuItem = new javax.swing.JMenuItem();
    stopMenuItem = new javax.swing.JMenuItem();
    rewindMenuItem = new javax.swing.JMenuItem();
    cleanMenuItem = new javax.swing.JMenuItem();
    topToolsMenuSeparator = new javax.swing.JSeparator();
    executionsMenuItem = new javax.swing.JMenuItem();
    tablesMenuItem = new javax.swing.JMenuItem();
    errorMenuItem = new javax.swing.JMenuItem();
    bottomToolsMenuSeparator = new javax.swing.JSeparator();
    refreshMenuItem = new javax.swing.JMenuItem();
    helpMenu = new javax.swing.JMenu();
    contentsMenuItem = new javax.swing.JMenuItem();
    helpMenuSeparator = new javax.swing.JSeparator();
    aboutMenuItem = new javax.swing.JMenuItem();

    cutPopupMenuItem.setIcon(new elv.util.Action(elv.util.Action.CUT).getIcon());
    cutPopupMenuItem.setText(new elv.util.Action(elv.util.Action.CUT).toString());
    cutPopupMenuItem.setEnabled(false);
    cutPopupMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cutPopupMenuItemActionPerformed(evt);
      }
    });
    browserPopupMenu.add(cutPopupMenuItem);

    copyPopupMenuItem.setIcon(new elv.util.Action(elv.util.Action.COPY).getIcon());
    copyPopupMenuItem.setText(new elv.util.Action(elv.util.Action.COPY).toString());
    copyPopupMenuItem.setEnabled(false);
    copyPopupMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        copyPopupMenuItemActionPerformed(evt);
      }
    });
    browserPopupMenu.add(copyPopupMenuItem);

    pastePopupMenuItem.setIcon(new elv.util.Action(elv.util.Action.PASTE).getIcon());
    pastePopupMenuItem.setText(new elv.util.Action(elv.util.Action.PASTE).toString());
    pastePopupMenuItem.setEnabled(false);
    pastePopupMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        pastePopupMenuItemActionPerformed(evt);
      }
    });
    browserPopupMenu.add(pastePopupMenuItem);

    refreshPopupMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
    refreshPopupMenuItem.setIcon(new elv.util.Action(elv.util.Action.REFRESH).getIcon());
    refreshPopupMenuItem.setText(new elv.util.Action(elv.util.Action.REFRESH).toString());
    refreshPopupMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        refreshPopupMenuItemActionPerformed(evt);
      }
    });
    browserPopupMenu.add(refreshPopupMenuItem);

    newPopupMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
    newPopupMenuItem.setIcon(new elv.util.Action(elv.util.Action.NEW).getIcon());
    newPopupMenuItem.setText(new elv.util.Action(elv.util.Action.NEW).toString());
    newPopupMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        newPopupMenuItemActionPerformed(evt);
      }
    });
    browserPopupMenu.add(newPopupMenuItem);

    renamePopupMenuItem.setIcon(new elv.util.Action(elv.util.Action.RENAME).getIcon());
    renamePopupMenuItem.setText(new elv.util.Action(elv.util.Action.RENAME).toString());
    renamePopupMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        renamePopupMenuItemActionPerformed(evt);
      }
    });
    browserPopupMenu.add(renamePopupMenuItem);

    deletePopupMenuItem.setIcon(new elv.util.Action(elv.util.Action.DELETE).getIcon());
    deletePopupMenuItem.setText(new elv.util.Action(elv.util.Action.DELETE).toString());
    deletePopupMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        deletePopupMenuItemActionPerformed(evt);
      }
    });
    browserPopupMenu.add(deletePopupMenuItem);

    propertiesPopupMenuItem.setIcon(new elv.util.Action(elv.util.Action.PROPERTIES).getIcon());
    propertiesPopupMenuItem.setText(new elv.util.Action(elv.util.Action.PROPERTIES).toString());
    propertiesPopupMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        propertiesPopupMenuItemActionPerformed(evt);
      }
    });
    browserPopupMenu.add(propertiesPopupMenuItem);

    progressesPopupMenuItem.setIcon(new elv.util.Action(elv.util.Action.PROGRESSES).getIcon());
    progressesPopupMenuItem.setText(new elv.util.Action(elv.util.Action.PROGRESSES).toString());
    progressesPopupMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        progressesPopupMenuItemActionPerformed(evt);
      }
    });
    browserPopupMenu.add(progressesPopupMenuItem);

    schedulePopupMenuItem.setIcon(new elv.util.Action(elv.util.Action.SCHEDULE).getIcon());
    schedulePopupMenuItem.setText(new elv.util.Action(elv.util.Action.SCHEDULE).toString());
    schedulePopupMenuItem.setEnabled(false);
    schedulePopupMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        schedulePopupMenuItemActionPerformed(evt);
      }
    });
    browserPopupMenu.add(schedulePopupMenuItem);

    stopPopupMenuItem.setIcon(new elv.util.Action(elv.util.Action.STOP).getIcon());
    stopPopupMenuItem.setText(new elv.util.Action(elv.util.Action.STOP).toString());
    stopPopupMenuItem.setEnabled(false);
    stopPopupMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        stopPopupMenuItemActionPerformed(evt);
      }
    });
    browserPopupMenu.add(stopPopupMenuItem);

    rewindPopupMenuItem.setIcon(new elv.util.Action(elv.util.Action.REWIND).getIcon());
    rewindPopupMenuItem.setText(new elv.util.Action(elv.util.Action.REWIND).toString());
    rewindPopupMenuItem.setEnabled(false);
    rewindPopupMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        rewindPopupMenuItemActionPerformed(evt);
      }
    });
    browserPopupMenu.add(rewindPopupMenuItem);

    cleanPopupMenuItem.setIcon(new elv.util.Action(elv.util.Action.CLEAN).getIcon());
    cleanPopupMenuItem.setText(new elv.util.Action(elv.util.Action.CLEAN).toString());
    cleanPopupMenuItem.setEnabled(false);
    cleanPopupMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cleanPopupMenuItemActionPerformed(evt);
      }
    });
    browserPopupMenu.add(cleanPopupMenuItem);

    importPopupMenuItem.setIcon(new elv.util.Action(elv.util.Action.IMPORT).getIcon());
    importPopupMenuItem.setText(new elv.util.Action(elv.util.Action.IMPORT).toString());
    importPopupMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        importPopupMenuItemActionPerformed(evt);
      }
    });
    browserPopupMenu.add(importPopupMenuItem);

    exportPopupMenuItem.setIcon(new elv.util.Action(elv.util.Action.EXPORT).getIcon());
    exportPopupMenuItem.setText(new elv.util.Action(elv.util.Action.EXPORT).toString());
    exportPopupMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        exportPopupMenuItemActionPerformed(evt);
      }
    });
    browserPopupMenu.add(exportPopupMenuItem);

    errorPopupMenuItem.setIcon(new elv.util.Action(elv.util.Action.ERROR).getIcon());
    errorPopupMenuItem.setText(new elv.util.State(elv.util.State.ERROR).toString());
    errorPopupMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        errorPopupMenuItemActionPerformed(evt);
      }
    });
    browserPopupMenu.add(errorPopupMenuItem);
    browserPopupMenu.add(popupSeparator1);
    browserPopupMenu.add(popupSeparator2);
    browserPopupMenu.add(popupSeparator3);
    browserPopupMenu.add(popupSeparator4);
    browserPopupMenu.add(popupSeparator5);
    browserPopupMenu.add(popupSeparator6);

    setTitle(elv.util.Util.translate(elv.util.Util.TITLE));
    addWindowListener(new java.awt.event.WindowAdapter()
    {
      public void windowClosing(java.awt.event.WindowEvent evt)
      {
        exitForm(evt);
      }
    });

    toolBar.setFloatable(false);

    newButton.setIcon(new elv.util.Action(elv.util.Action.NEW).getIcon());
    newButton.setToolTipText(new elv.util.Action(elv.util.Action.NEW).toString());
    newButton.setBorderPainted(false);
    newButton.setEnabled(false);
    newButton.setFocusable(false);
    newButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    newButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
    newButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    newButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        newButtonActionPerformed(evt);
      }
    });
    fileToolBar.add(newButton);

    saveButton.setIcon(new elv.util.Action(elv.util.Action.SAVE).getIcon());
    saveButton.setToolTipText(new elv.util.Action(elv.util.Action.SAVE).toString());
    saveButton.setBorderPainted(false);
    saveButton.setEnabled(false);
    saveButton.setFocusable(false);
    saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    saveButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
    saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    saveButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        saveButtonActionPerformed(evt);
      }
    });
    fileToolBar.add(saveButton);

    saveAllButton.setIcon(new elv.util.Action(elv.util.Action.SAVE_ALL).getIcon());
    saveAllButton.setToolTipText(new elv.util.Action(elv.util.Action.SAVE_ALL).toString());
    saveAllButton.setBorderPainted(false);
    saveAllButton.setEnabled(false);
    saveAllButton.setFocusable(false);
    saveAllButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    saveAllButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
    saveAllButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    saveAllButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        saveAllButtonActionPerformed(evt);
      }
    });
    fileToolBar.add(saveAllButton);

    toolBar.add(fileToolBar);

    cutButton.setIcon(new elv.util.Action(elv.util.Action.CUT).getIcon());
    cutButton.setToolTipText(new elv.util.Action(elv.util.Action.CUT).toString());
    cutButton.setBorderPainted(false);
    cutButton.setEnabled(false);
    cutButton.setFocusable(false);
    cutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    cutButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
    cutButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    cutButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cutButtonActionPerformed(evt);
      }
    });
    editToolBar.add(cutButton);

    copyButton.setIcon(new elv.util.Action(elv.util.Action.COPY).getIcon());
    copyButton.setToolTipText(new elv.util.Action(elv.util.Action.COPY).toString());
    copyButton.setBorderPainted(false);
    copyButton.setEnabled(false);
    copyButton.setFocusable(false);
    copyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    copyButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
    copyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    copyButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        copyButtonActionPerformed(evt);
      }
    });
    editToolBar.add(copyButton);

    pasteButton.setIcon(new elv.util.Action(elv.util.Action.PASTE).getIcon());
    pasteButton.setToolTipText(new elv.util.Action(elv.util.Action.PASTE).toString());
    pasteButton.setBorderPainted(false);
    pasteButton.setEnabled(false);
    pasteButton.setFocusable(false);
    pasteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    pasteButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
    pasteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    pasteButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        pasteButtonActionPerformed(evt);
      }
    });
    editToolBar.add(pasteButton);

    deleteButton.setIcon(new elv.util.Action(elv.util.Action.DELETE).getIcon());
    deleteButton.setToolTipText(new elv.util.Action(elv.util.Action.DELETE).toString());
    deleteButton.setBorderPainted(false);
    deleteButton.setEnabled(false);
    deleteButton.setFocusable(false);
    deleteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    deleteButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
    deleteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    deleteButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        deleteButtonActionPerformed(evt);
      }
    });
    editToolBar.add(deleteButton);

    toolBar.add(editToolBar);

    scheduleButton.setIcon(new elv.util.Action(elv.util.Action.SCHEDULE).getIcon());
    scheduleButton.setToolTipText(new elv.util.Action(elv.util.Action.SCHEDULE).toString());
    scheduleButton.setBorderPainted(false);
    scheduleButton.setEnabled(false);
    scheduleButton.setFocusable(false);
    scheduleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    scheduleButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
    scheduleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    scheduleButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        scheduleButtonActionPerformed(evt);
      }
    });
    toolsToolBar.add(scheduleButton);

    stopButton.setIcon(new elv.util.Action(elv.util.Action.STOP).getIcon());
    stopButton.setToolTipText(new elv.util.Action(elv.util.Action.STOP).toString());
    stopButton.setBorderPainted(false);
    stopButton.setEnabled(false);
    stopButton.setFocusable(false);
    stopButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    stopButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
    stopButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    stopButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        stopButtonActionPerformed(evt);
      }
    });
    toolsToolBar.add(stopButton);

    rewindButton.setIcon(new elv.util.Action(elv.util.Action.REWIND).getIcon());
    rewindButton.setToolTipText(new elv.util.Action(elv.util.Action.REWIND).toString());
    rewindButton.setBorderPainted(false);
    rewindButton.setEnabled(false);
    rewindButton.setFocusable(false);
    rewindButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    rewindButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
    rewindButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    rewindButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        rewindButtonActionPerformed(evt);
      }
    });
    toolsToolBar.add(rewindButton);

    cleanButton.setIcon(new elv.util.Action(elv.util.Action.CLEAN).getIcon());
    cleanButton.setToolTipText(new elv.util.Action(elv.util.Action.CLEAN).toString());
    cleanButton.setBorderPainted(false);
    cleanButton.setEnabled(false);
    cleanButton.setFocusable(false);
    cleanButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    cleanButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
    cleanButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    cleanButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cleanButtonActionPerformed(evt);
      }
    });
    toolsToolBar.add(cleanButton);

    toolBar.add(toolsToolBar);

    getContentPane().add(toolBar, java.awt.BorderLayout.NORTH);

    mainPanel.setLayout(new java.awt.BorderLayout());

    mainSplitPane.setBorder(null);

    leftSplitPane.setBorder(null);
    leftSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
    leftSplitPane.setResizeWeight(0.8);
    mainSplitPane.setLeftComponent(leftSplitPane);

    rightTabbedPane.addTab("tab1", attributesPanel);
    rightTabbedPane.addTab("tab2", resultsPanel);

    mainSplitPane.setRightComponent(rightTabbedPane);

    mainPanel.add(mainSplitPane, java.awt.BorderLayout.CENTER);

    getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

    fileMenu.setText(new elv.util.Action(elv.util.Action.FILE).toString());

    newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
    newMenuItem.setIcon(new elv.util.Action(elv.util.Action.NEW).getIcon());
    newMenuItem.setText(new elv.util.Action(elv.util.Action.NEW).toString());
    newMenuItem.setEnabled(false);
    newMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        newMenuItemActionPerformed(evt);
      }
    });
    fileMenu.add(newMenuItem);

    saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
    saveMenuItem.setIcon(new elv.util.Action(elv.util.Action.SAVE).getIcon());
    saveMenuItem.setText(new elv.util.Action(elv.util.Action.SAVE).toString());
    saveMenuItem.setEnabled(false);
    saveMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        saveMenuItemActionPerformed(evt);
      }
    });
    fileMenu.add(saveMenuItem);

    saveAllMenuItem.setIcon(new elv.util.Action(elv.util.Action.SAVE_ALL).getIcon());
    saveAllMenuItem.setText(new elv.util.Action(elv.util.Action.SAVE_ALL).toString());
    saveAllMenuItem.setEnabled(false);
    saveAllMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        saveAllMenuItemActionPerformed(evt);
      }
    });
    fileMenu.add(saveAllMenuItem);

    saveDocumentsMenu.setIcon(new elv.util.Action(elv.util.Action.SAVE_DOCUMENTS).getIcon());
    saveDocumentsMenu.setText(new elv.util.Action(elv.util.Action.SAVE_DOCUMENTS).toString());
    saveDocumentsMenu.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        saveDocumentsMenuActionPerformed(evt);
      }
    });
    fileMenu.add(saveDocumentsMenu);
    fileMenu.add(topFileMenuSeparator);

    importMenuItem.setIcon(new elv.util.Action(elv.util.Action.IMPORT).getIcon());
    importMenuItem.setText(new elv.util.Action(elv.util.Action.IMPORT).toString());
    importMenuItem.setEnabled(false);
    importMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        importMenuItemActionPerformed(evt);
      }
    });
    fileMenu.add(importMenuItem);

    exportMenuItem.setIcon(new elv.util.Action(elv.util.Action.EXPORT).getIcon());
    exportMenuItem.setText(new elv.util.Action(elv.util.Action.EXPORT).toString());
    exportMenuItem.setEnabled(false);
    exportMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        exportMenuItemActionPerformed(evt);
      }
    });
    fileMenu.add(exportMenuItem);
    fileMenu.add(bottomFileMenuSeparator);

    exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
    exitMenuItem.setIcon(new elv.util.Action(elv.util.Action.EXIT).getIcon());
    exitMenuItem.setText(new elv.util.Action(elv.util.Action.EXIT).toString());
    exitMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        exitMenuItemActionPerformed(evt);
      }
    });
    fileMenu.add(exitMenuItem);

    menuBar.add(fileMenu);

    editMenu.setText(new elv.util.Action(elv.util.Action.EDIT).toString());

    cutMenuItem.setIcon(new elv.util.Action(elv.util.Action.CUT).getIcon());
    cutMenuItem.setText(new elv.util.Action(elv.util.Action.CUT).toString());
    cutMenuItem.setEnabled(false);
    cutMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cutMenuItemActionPerformed(evt);
      }
    });
    editMenu.add(cutMenuItem);

    copyMenuItem.setIcon(new elv.util.Action(elv.util.Action.COPY).getIcon());
    copyMenuItem.setText(new elv.util.Action(elv.util.Action.COPY).toString());
    copyMenuItem.setEnabled(false);
    copyMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        copyMenuItemActionPerformed(evt);
      }
    });
    editMenu.add(copyMenuItem);

    pasteMenuItem.setIcon(new elv.util.Action(elv.util.Action.PASTE).getIcon());
    pasteMenuItem.setText(new elv.util.Action(elv.util.Action.PASTE).toString());
    pasteMenuItem.setEnabled(false);
    pasteMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        pasteMenuItemActionPerformed(evt);
      }
    });
    editMenu.add(pasteMenuItem);
    editMenu.add(editMenuSeparator);

    renameMenuItem.setIcon(new elv.util.Action(elv.util.Action.RENAME).getIcon());
    renameMenuItem.setText(new elv.util.Action(elv.util.Action.RENAME).toString());
    renameMenuItem.setEnabled(false);
    renameMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        renameMenuItemActionPerformed(evt);
      }
    });
    editMenu.add(renameMenuItem);

    deleteMenuItem.setIcon(new elv.util.Action(elv.util.Action.DELETE).getIcon());
    deleteMenuItem.setText(new elv.util.Action(elv.util.Action.DELETE).toString());
    deleteMenuItem.setEnabled(false);
    deleteMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        deleteMenuItemActionPerformed(evt);
      }
    });
    editMenu.add(deleteMenuItem);

    menuBar.add(editMenu);

    toolsMenu.setText(new elv.util.Action(elv.util.Action.TOOLS).toString());

    scheduleMenuItem.setIcon(new elv.util.Action(elv.util.Action.SCHEDULE).getIcon());
    scheduleMenuItem.setText(new elv.util.Action(elv.util.Action.SCHEDULE).toString());
    scheduleMenuItem.setEnabled(false);
    scheduleMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        scheduleMenuItemActionPerformed(evt);
      }
    });
    toolsMenu.add(scheduleMenuItem);

    stopMenuItem.setText(new elv.util.Action(elv.util.Action.STOP).toString());
    stopMenuItem.setIcon(new elv.util.Action(elv.util.Action.STOP).getIcon());
    stopMenuItem.setEnabled(false);
    stopMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        stopMenuItemActionPerformed(evt);
      }
    });
    toolsMenu.add(stopMenuItem);

    rewindMenuItem.setIcon(new elv.util.Action(elv.util.Action.REWIND).getIcon());
    rewindMenuItem.setText(new elv.util.Action(elv.util.Action.REWIND).toString());
    rewindMenuItem.setEnabled(false);
    rewindMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        rewindMenuItemActionPerformed(evt);
      }
    });
    toolsMenu.add(rewindMenuItem);

    cleanMenuItem.setIcon(new elv.util.Action(elv.util.Action.CLEAN).getIcon());
    cleanMenuItem.setText(new elv.util.Action(elv.util.Action.CLEAN).toString());
    cleanMenuItem.setEnabled(false);
    cleanMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cleanMenuItemActionPerformed(evt);
      }
    });
    toolsMenu.add(cleanMenuItem);
    toolsMenu.add(topToolsMenuSeparator);

    executionsMenuItem.setIcon(new elv.util.Action(elv.util.Action.EXECUTIONS).getIcon());
    executionsMenuItem.setText(new elv.util.Action(elv.util.Action.EXECUTIONS).toString());
    executionsMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        executionsMenuItemActionPerformed(evt);
      }
    });
    toolsMenu.add(executionsMenuItem);

    tablesMenuItem.setIcon(new elv.util.Action(elv.util.Action.TABLES).getIcon());
    tablesMenuItem.setText(new elv.util.Action(elv.util.Action.TABLES).toString());
    tablesMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        tablesMenuItemActionPerformed(evt);
      }
    });
    toolsMenu.add(tablesMenuItem);

    errorMenuItem.setIcon(new elv.util.Action(elv.util.Action.ERROR).getIcon());
    errorMenuItem.setText(new elv.util.State(elv.util.State.ERROR).toString());
    errorMenuItem.setEnabled(false);
    errorMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        errorMenuItemActionPerformed(evt);
      }
    });
    toolsMenu.add(errorMenuItem);
    toolsMenu.add(bottomToolsMenuSeparator);

    refreshMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
    refreshMenuItem.setIcon(new elv.util.Action(elv.util.Action.REFRESH).getIcon());
    refreshMenuItem.setText(new elv.util.Action(elv.util.Action.REFRESH).toString());
    refreshMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        refreshMenuItemActionPerformed(evt);
      }
    });
    toolsMenu.add(refreshMenuItem);

    menuBar.add(toolsMenu);

    helpMenu.setText(new elv.util.Action(elv.util.Action.HELP).toString());

    contentsMenuItem.setIcon(new elv.util.Action(elv.util.Action.CONTENTS).getIcon());
    contentsMenuItem.setText(new elv.util.Action(elv.util.Action.CONTENTS).toString());
    helpMenu.add(contentsMenuItem);
    helpMenu.add(helpMenuSeparator);

    aboutMenuItem.setIcon(new elv.util.Action(elv.util.Action.ABOUT).getIcon());
    aboutMenuItem.setText(new elv.util.Action(elv.util.Action.ABOUT).toString());
    aboutMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        aboutMenuItemActionPerformed(evt);
      }
    });
    helpMenu.add(aboutMenuItem);

    menuBar.add(helpMenu);

    setJMenuBar(menuBar);

    setBounds(0, 0, 514, 413);
  }// </editor-fold>//GEN-END:initComponents

private void errorPopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_errorPopupMenuItemActionPerformed
  errorAction();
}//GEN-LAST:event_errorPopupMenuItemActionPerformed

private void exportPopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPopupMenuItemActionPerformed
  exportAction();
}//GEN-LAST:event_exportPopupMenuItemActionPerformed

private void importPopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importPopupMenuItemActionPerformed
  importAction();
}//GEN-LAST:event_importPopupMenuItemActionPerformed

private void cleanPopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanPopupMenuItemActionPerformed
  cleanAction();
}//GEN-LAST:event_cleanPopupMenuItemActionPerformed

private void rewindPopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rewindPopupMenuItemActionPerformed
  rewindAction();
}//GEN-LAST:event_rewindPopupMenuItemActionPerformed

private void stopPopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopPopupMenuItemActionPerformed
  stopAction();
}//GEN-LAST:event_stopPopupMenuItemActionPerformed

private void schedulePopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedulePopupMenuItemActionPerformed
  scheduleAction();
}//GEN-LAST:event_schedulePopupMenuItemActionPerformed

private void progressesPopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_progressesPopupMenuItemActionPerformed
  progressesAction();
}//GEN-LAST:event_progressesPopupMenuItemActionPerformed

private void propertiesPopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propertiesPopupMenuItemActionPerformed
  propertiesAction();
}//GEN-LAST:event_propertiesPopupMenuItemActionPerformed

private void deletePopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePopupMenuItemActionPerformed
  deleteAction();
}//GEN-LAST:event_deletePopupMenuItemActionPerformed

private void renamePopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renamePopupMenuItemActionPerformed
  renameAction();
}//GEN-LAST:event_renamePopupMenuItemActionPerformed

private void newPopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPopupMenuItemActionPerformed
  newAction();
}//GEN-LAST:event_newPopupMenuItemActionPerformed

private void refreshPopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshPopupMenuItemActionPerformed
  browserPanel.refresh();
}//GEN-LAST:event_refreshPopupMenuItemActionPerformed

private void pastePopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pastePopupMenuItemActionPerformed
  pasteAction();
}//GEN-LAST:event_pastePopupMenuItemActionPerformed

private void copyPopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyPopupMenuItemActionPerformed
  copyAction();
}//GEN-LAST:event_copyPopupMenuItemActionPerformed

private void cutPopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutPopupMenuItemActionPerformed
  cutAction();
}//GEN-LAST:event_cutPopupMenuItemActionPerformed

  private void exportMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exportMenuItemActionPerformed
  {//GEN-HEADEREND:event_exportMenuItemActionPerformed
    exportAction();
  }//GEN-LAST:event_exportMenuItemActionPerformed

  private void importMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_importMenuItemActionPerformed
  {//GEN-HEADEREND:event_importMenuItemActionPerformed
    importAction();
  }//GEN-LAST:event_importMenuItemActionPerformed
                  
  private void rewindMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rewindMenuItemActionPerformed
  {//GEN-HEADEREND:event_rewindMenuItemActionPerformed
    rewindAction();
  }//GEN-LAST:event_rewindMenuItemActionPerformed
    
  private void rewindButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rewindButtonActionPerformed
  {//GEN-HEADEREND:event_rewindButtonActionPerformed
    rewindAction();
  }//GEN-LAST:event_rewindButtonActionPerformed
  
  private void saveDocumentsMenuActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveDocumentsMenuActionPerformed
  {//GEN-HEADEREND:event_saveDocumentsMenuActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_saveDocumentsMenuActionPerformed
  
  private void tablesMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tablesMenuItemActionPerformed
  {//GEN-HEADEREND:event_tablesMenuItemActionPerformed
    tablesAction();
  }//GEN-LAST:event_tablesMenuItemActionPerformed
  
  private void executionsMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_executionsMenuItemActionPerformed
  {//GEN-HEADEREND:event_executionsMenuItemActionPerformed
    executionsAction();
  }//GEN-LAST:event_executionsMenuItemActionPerformed
  
  private void pasteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_pasteButtonActionPerformed
  {//GEN-HEADEREND:event_pasteButtonActionPerformed
    pasteAction();
  }//GEN-LAST:event_pasteButtonActionPerformed
  
  private void copyButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_copyButtonActionPerformed
  {//GEN-HEADEREND:event_copyButtonActionPerformed
    copyAction();
  }//GEN-LAST:event_copyButtonActionPerformed
  
  private void cutButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cutButtonActionPerformed
  {//GEN-HEADEREND:event_cutButtonActionPerformed
    cutAction();
  }//GEN-LAST:event_cutButtonActionPerformed
  
  private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutMenuItemActionPerformed
  {//GEN-HEADEREND:event_aboutMenuItemActionPerformed
    aboutAction();
  }//GEN-LAST:event_aboutMenuItemActionPerformed
  
  private void errorMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_errorMenuItemActionPerformed
  {//GEN-HEADEREND:event_errorMenuItemActionPerformed
    errorAction();
  }//GEN-LAST:event_errorMenuItemActionPerformed
        
  private void scheduleButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_scheduleButtonActionPerformed
  {//GEN-HEADEREND:event_scheduleButtonActionPerformed
    scheduleAction();
  }//GEN-LAST:event_scheduleButtonActionPerformed
  
  private void scheduleMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_scheduleMenuItemActionPerformed
  {//GEN-HEADEREND:event_scheduleMenuItemActionPerformed
    scheduleAction();
  }//GEN-LAST:event_scheduleMenuItemActionPerformed
    
  private void pasteMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_pasteMenuItemActionPerformed
  {//GEN-HEADEREND:event_pasteMenuItemActionPerformed
    pasteAction();
  }//GEN-LAST:event_pasteMenuItemActionPerformed
  
  private void copyMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_copyMenuItemActionPerformed
  {//GEN-HEADEREND:event_copyMenuItemActionPerformed
    copyAction();
  }//GEN-LAST:event_copyMenuItemActionPerformed
  
  private void cutMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cutMenuItemActionPerformed
  {//GEN-HEADEREND:event_cutMenuItemActionPerformed
    cutAction();
  }//GEN-LAST:event_cutMenuItemActionPerformed
            
  private void cleanMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cleanMenuItemActionPerformed
  {//GEN-HEADEREND:event_cleanMenuItemActionPerformed
    cleanAction();
  }//GEN-LAST:event_cleanMenuItemActionPerformed
  
  private void stopMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_stopMenuItemActionPerformed
  {//GEN-HEADEREND:event_stopMenuItemActionPerformed
    stopAction();
  }//GEN-LAST:event_stopMenuItemActionPerformed
  
  private void newButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newButtonActionPerformed
  {//GEN-HEADEREND:event_newButtonActionPerformed
    newAction();
  }//GEN-LAST:event_newButtonActionPerformed
  
  private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newMenuItemActionPerformed
  {//GEN-HEADEREND:event_newMenuItemActionPerformed
    newAction();
  }//GEN-LAST:event_newMenuItemActionPerformed
  
  private void cleanButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cleanButtonActionPerformed
  {//GEN-HEADEREND:event_cleanButtonActionPerformed
    cleanAction();
  }//GEN-LAST:event_cleanButtonActionPerformed
              
  private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteMenuItemActionPerformed
  {//GEN-HEADEREND:event_deleteMenuItemActionPerformed
    deleteAction();
  }//GEN-LAST:event_deleteMenuItemActionPerformed
  
  private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
  {//GEN-HEADEREND:event_deleteButtonActionPerformed
    deleteAction();
  }//GEN-LAST:event_deleteButtonActionPerformed
    
  private void renameMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_renameMenuItemActionPerformed
  {//GEN-HEADEREND:event_renameMenuItemActionPerformed
    renameAction();
  }//GEN-LAST:event_renameMenuItemActionPerformed
  
  private void refreshMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_refreshMenuItemActionPerformed
  {//GEN-HEADEREND:event_refreshMenuItemActionPerformed
    browserPanel.refresh();
  }//GEN-LAST:event_refreshMenuItemActionPerformed
  
  private void stopButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_stopButtonActionPerformed
  {//GEN-HEADEREND:event_stopButtonActionPerformed
    stopAction();
  }//GEN-LAST:event_stopButtonActionPerformed
      
  private void saveAllButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveAllButtonActionPerformed
  {//GEN-HEADEREND:event_saveAllButtonActionPerformed
    saveAllAction();
  }//GEN-LAST:event_saveAllButtonActionPerformed
  
  private void saveAllMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveAllMenuItemActionPerformed
  {//GEN-HEADEREND:event_saveAllMenuItemActionPerformed
    saveAllAction();
  }//GEN-LAST:event_saveAllMenuItemActionPerformed
  
  private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveMenuItemActionPerformed
  {//GEN-HEADEREND:event_saveMenuItemActionPerformed
    saveAction();
  }//GEN-LAST:event_saveMenuItemActionPerformed
  
  private void saveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveButtonActionPerformed
  {//GEN-HEADEREND:event_saveButtonActionPerformed
    saveAction();
  }//GEN-LAST:event_saveButtonActionPerformed
      
  private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitMenuItemActionPerformed
  {//GEN-HEADEREND:event_exitMenuItemActionPerformed
    exitAction();
  }//GEN-LAST:event_exitMenuItemActionPerformed
  
  /**
   * Method for form exit.
   */
  private void exitForm(java.awt.event.WindowEvent evt)//GEN-FIRST:event_exitForm
  {//GEN-HEADEREND:event_exitForm
    exitAction();
  }//GEN-LAST:event_exitForm
  
  /**
   * Method for application start.
   * @param args a string-array of arguments.
   */
  public static void main(String args[])
  {
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        new Manager().setVisible(true);
      }
    });
  }
  
  /**
   * Method for getting the property change support.
   * @return the change support object.
   */
  public java.beans.PropertyChangeSupport getChangeSupport()
  {
    return changeSupport;
  }
  
  /**
   * Method for getting the browser popup menu.
   * @return the poup menu for the browser.
   */
  public javax.swing.JPopupMenu getBrowserPopupMenu()
  {
    return browserPopupMenu;
  }
  
  /**
   * Method for enabling/disabling the actions for menu items and toolbar buttons.
   */
  public synchronized void setActions()
  {
    try
    {
      newButton.setEnabled(false);
      newMenuItem.setEnabled(false);
      newPopupMenuItem.setEnabled(false);
      
      saveDocumentsMenu.setEnabled(false);
      
      importMenuItem.setEnabled(false);
      importPopupMenuItem.setEnabled(false);
      
      exportMenuItem.setEnabled(false);
      exportPopupMenuItem.setEnabled(false);
      
      cutButton.setEnabled(false);
      cutMenuItem.setEnabled(false);
      cutPopupMenuItem.setEnabled(false);
      
      copyButton.setEnabled(false);
      copyMenuItem.setEnabled(false);
      copyPopupMenuItem.setEnabled(false);
      
      pasteButton.setEnabled(false);
      pasteMenuItem.setEnabled(false);
      pastePopupMenuItem.setEnabled(false);
      
      renameMenuItem.setEnabled(false);
      renamePopupMenuItem.setEnabled(false);
      
      deleteButton.setEnabled(false);
      deleteMenuItem.setEnabled(false);
      deletePopupMenuItem.setEnabled(false);
      
//TODO:      propertiesMenuItem.setEnabled(false);
      propertiesPopupMenuItem.setEnabled(false);
      
//TODO:      progressesMenuItem.setEnabled(false);
      progressesPopupMenuItem.setEnabled(false);
      
      scheduleButton.setEnabled(false);
      scheduleMenuItem.setEnabled(false);
      schedulePopupMenuItem.setEnabled(false);
      
      stopButton.setEnabled(false);
      stopMenuItem.setEnabled(false);
      stopPopupMenuItem.setEnabled(false);
      
      cleanButton.setEnabled(false);
      cleanMenuItem.setEnabled(false);
      cleanPopupMenuItem.setEnabled(false);
      
      rewindButton.setEnabled(false);
      rewindMenuItem.setEnabled(false);
      rewindPopupMenuItem.setEnabled(false);
      
      errorMenuItem.setEnabled(false);
      errorPopupMenuItem.setEnabled(false);
      
      elv.util.Node treeNode = (elv.util.Node)browserPanel.getTree().getLastSelectedPathComponent();
      java.lang.Object nodeObject = treeNode.getUserObject();
      if(nodeObject instanceof elv.util.Root)
      {
//TODO:        propertiesMenuItem.setEnabled(true);
        propertiesPopupMenuItem.setEnabled(true);
        
        browserPopupMenu.removeAll();
        browserPopupMenu.add(refreshPopupMenuItem);
        browserPopupMenu.add(popupSeparator1);
        browserPopupMenu.add(pastePopupMenuItem);
        browserPopupMenu.add(popupSeparator2);
        browserPopupMenu.add(newPopupMenuItem);
        browserPopupMenu.add(popupSeparator3);
        browserPopupMenu.add(propertiesPopupMenuItem);
        
        if(elv.util.Util.getActualUser().getType() == elv.util.User.ADMINISTRATOR)
        {
          newButton.setEnabled(true);
          newMenuItem.setEnabled(true);
          newPopupMenuItem.setEnabled(true);
          
          if(clipBoard != null && clipBoard.getObject() instanceof elv.util.User)
          {
            pasteButton.setEnabled(true);
            pasteMenuItem.setEnabled(true);
            pastePopupMenuItem.setEnabled(true);
          }
        }
      }
      else if(nodeObject instanceof elv.util.User)
      {
//TODO:        propertiesMenuItem.setEnabled(true);
        propertiesPopupMenuItem.setEnabled(true);
        
        browserPopupMenu.removeAll();
        browserPopupMenu.add(refreshPopupMenuItem);
        browserPopupMenu.add(popupSeparator1);
        browserPopupMenu.add(cutPopupMenuItem);
        browserPopupMenu.add(copyPopupMenuItem);
        browserPopupMenu.add(pastePopupMenuItem);
        browserPopupMenu.add(popupSeparator2);
        browserPopupMenu.add(newPopupMenuItem);
        browserPopupMenu.add(importPopupMenuItem);
        browserPopupMenu.add(popupSeparator3);
        browserPopupMenu.add(renamePopupMenuItem);
        browserPopupMenu.add(deletePopupMenuItem);
        browserPopupMenu.add(popupSeparator4);
        browserPopupMenu.add(propertiesPopupMenuItem);
        
        newButton.setEnabled(true);
        newMenuItem.setEnabled(true);
        newPopupMenuItem.setEnabled(true);

        importMenuItem.setEnabled(true);
        importPopupMenuItem.setEnabled(true);

        if(clipBoard != null && clipBoard.getObject() instanceof elv.task.Container)
        {
          pasteButton.setEnabled(true);
          pasteMenuItem.setEnabled(true);
          pastePopupMenuItem.setEnabled(true);
        }
        if(elv.util.Util.getActualUser().getType() == elv.util.User.ADMINISTRATOR)
        {
          cutButton.setEnabled(true);
          cutMenuItem.setEnabled(true);
          cutPopupMenuItem.setEnabled(true);
          
          copyButton.setEnabled(true);
          copyMenuItem.setEnabled(true);
          copyPopupMenuItem.setEnabled(true);
          
          renameMenuItem.setEnabled(true);
          renamePopupMenuItem.setEnabled(true);
          
          deleteButton.setEnabled(true);
          deleteMenuItem.setEnabled(true);
          deletePopupMenuItem.setEnabled(true);
        }
      }
      else if(nodeObject instanceof elv.task.Container)
      {
        cutButton.setEnabled(true);
        cutMenuItem.setEnabled(true);
        cutPopupMenuItem.setEnabled(true);
        
        copyButton.setEnabled(true);
        copyMenuItem.setEnabled(true);
        copyPopupMenuItem.setEnabled(true);
        
        renameMenuItem.setEnabled(true);
        renamePopupMenuItem.setEnabled(true);
        
        deleteButton.setEnabled(true);
        deleteMenuItem.setEnabled(true);
        deletePopupMenuItem.setEnabled(true);
        
//TODO:        propertiesMenuItem.setEnabled(true);
        propertiesPopupMenuItem.setEnabled(true);
        
        browserPopupMenu.removeAll();
        browserPopupMenu.add(refreshPopupMenuItem);
        browserPopupMenu.add(popupSeparator1);
        browserPopupMenu.add(cutPopupMenuItem);
        browserPopupMenu.add(copyPopupMenuItem);
        browserPopupMenu.add(pastePopupMenuItem);
        browserPopupMenu.add(popupSeparator2);
        browserPopupMenu.add(newPopupMenuItem);
        browserPopupMenu.add(exportPopupMenuItem);
        browserPopupMenu.add(popupSeparator3);
        browserPopupMenu.add(renamePopupMenuItem);
        browserPopupMenu.add(deletePopupMenuItem);
        browserPopupMenu.add(popupSeparator4);
        browserPopupMenu.add(propertiesPopupMenuItem);
        if(nodeObject instanceof elv.task.Archive)
        {
          exportMenuItem.setEnabled(true);
          exportPopupMenuItem.setEnabled(true);
        }
        else // Ordinary container.
        {
          newButton.setEnabled(true);
          newMenuItem.setEnabled(true);
          newPopupMenuItem.setEnabled(true);
        }
        if(clipBoard != null && clipBoard.getObject() instanceof elv.task.Task)
        {
          pasteButton.setEnabled(true);
          pasteMenuItem.setEnabled(true);
          pastePopupMenuItem.setEnabled(true);
        }
      }
      else if(nodeObject instanceof elv.task.Task)
      {
        boolean isContainer = true;
        if(((elv.task.Task)nodeObject).getContainer() instanceof elv.task.Archive)
        {
          isContainer = false;
        }
        cutButton.setEnabled(true);
        cutMenuItem.setEnabled(true);
        cutPopupMenuItem.setEnabled(true);
        
        copyButton.setEnabled(true);
        copyMenuItem.setEnabled(true);
        copyPopupMenuItem.setEnabled(true);
        
        renameMenuItem.setEnabled(isContainer);
        renamePopupMenuItem.setEnabled(isContainer);
        
        deleteButton.setEnabled(true);
        deleteMenuItem.setEnabled(true);
        deletePopupMenuItem.setEnabled(true);
        
        
//TODO:        propertiesMenuItem.setEnabled(true);
        propertiesPopupMenuItem.setEnabled(true);
        
//        // Set parameters submenu.
//        boolean[] removables = new boolean[parametersMenu.getItemCount()];
//        for(int i = 0; i < removables.length; i++)
//        {
//          removables[i] = true;
//        }
//        for(final elv.util.parameters.Parameter iteratorParameterType : ((elv.task.Task)nodeObject).getParameterTypes())
//        {
//          boolean found = false;
//          for(int i = 0; i < parametersMenu.getItemCount(); i++)
//          {
//            javax.swing.JMenuItem iteratorMenuItem = parametersMenu.getItem(i);
//            if(iteratorMenuItem.getText().equals(iteratorParameterType.getTitle()))
//            {
//              removables[i] = false;
//              found = true;
//              break;
//            }
//          }
//          if(!found)
//          {
//            javax.swing.JMenuItem parameterMenuItem = new javax.swing.JMenuItem();
//            parameterMenuItem.setIcon(iteratorParameterType.getIcon());
//            parameterMenuItem.setText(iteratorParameterType.getTitle());
//            parameterMenuItem.addActionListener(new java.awt.event.ActionListener()
//            {
//              public void actionPerformed(java.awt.event.ActionEvent evt)
//              {
//                parametersAction(iteratorParameterType);
//              }
//            });
//            parametersMenu.add(parameterMenuItem);
//            
//            javax.swing.JMenuItem parameterPopupMenuItem = new javax.swing.JMenuItem();
//            parameterPopupMenuItem.setIcon(iteratorParameterType.getIcon());
//            parameterPopupMenuItem.setText(iteratorParameterType.getTitle());
//            parameterPopupMenuItem.addActionListener(new java.awt.event.ActionListener()
//            {
//              public void actionPerformed(java.awt.event.ActionEvent evt)
//              {
//                parametersAction(iteratorParameterType);
//              }
//            });
//            parametersPopupMenu.add(parameterPopupMenuItem);
//          }
//        }
//        for(int i = removables.length - 1; i >= 0 ; i--)
//        {
//          if(removables[i])
//          {
//            parametersMenu.remove(i);
//            parametersPopupMenu.remove(i);
//          }
//        }
//        
//        // Set executables submenu.
//        removables = new boolean[executablesMenu.getItemCount()];
//        for(int i = 0; i < removables.length; i++)
//        {
//          removables[i] = true;
//        }
//        for(final elv.task.executables.Executable iteratorExecutable : ((elv.task.Task)nodeObject).getExecutables())
//        {
//          boolean found = false;
//          for(int i = 0; i < executablesMenu.getItemCount(); i++)
//          {
//            javax.swing.JMenuItem iteratorMenuItem = executablesMenu.getItem(i);
//            if(iteratorMenuItem.getText().equals(iteratorExecutable.toString()))
//            {
//              removables[i] = false;
//              found = true;
//              break;
//            }
//          }
//          if(!found)
//          {
//            javax.swing.JMenuItem executableMenuItem = new javax.swing.JMenuItem();
//            executableMenuItem.setIcon(iteratorExecutable.getIcon());
//            executableMenuItem.setText(iteratorExecutable.toString());
//            executableMenuItem.addActionListener(new java.awt.event.ActionListener()
//            {
//              public void actionPerformed(java.awt.event.ActionEvent evt)
//              {
//                attributesAction(iteratorExecutable);
//              }
//            });
//            executablesMenu.add(executableMenuItem);
//            
//            javax.swing.JMenuItem executablePopupMenuItem = new javax.swing.JMenuItem();
//            executablePopupMenuItem.setIcon(iteratorExecutable.getIcon());
//            executablePopupMenuItem.setText(iteratorExecutable.toString());
//            executablePopupMenuItem.addActionListener(new java.awt.event.ActionListener()
//            {
//              public void actionPerformed(java.awt.event.ActionEvent evt)
//              {
//                attributesAction(iteratorExecutable);
//              }
//            });
//            executablesPopupMenu.add(executablePopupMenuItem);
//          }
//        }
//        for(int i = removables.length - 1; i >= 0 ; i--)
//        {
//          if(removables[i])
//          {
//            executablesMenu.remove(i);
//            executablesPopupMenu.remove(i);
//          }
//        }
        
        browserPopupMenu.removeAll();
        browserPopupMenu.add(refreshPopupMenuItem);
        browserPopupMenu.add(popupSeparator1);
        browserPopupMenu.add(cutPopupMenuItem);
        browserPopupMenu.add(copyPopupMenuItem);
        browserPopupMenu.add(popupSeparator2);
        browserPopupMenu.add(renamePopupMenuItem);
        browserPopupMenu.add(deletePopupMenuItem);
        browserPopupMenu.add(popupSeparator3);
        browserPopupMenu.add(schedulePopupMenuItem);
        browserPopupMenu.add(stopPopupMenuItem);
        browserPopupMenu.add(rewindPopupMenuItem);
        browserPopupMenu.add(cleanPopupMenuItem);
        browserPopupMenu.add(popupSeparator4);
        browserPopupMenu.add(progressesPopupMenuItem);
        browserPopupMenu.add(popupSeparator5);
        browserPopupMenu.add(popupSeparator6);
        browserPopupMenu.add(propertiesPopupMenuItem);
        
        elv.util.State state = (elv.util.State)elv.util.Property.get(elv.task.Task.STATE_NAME, ((elv.task.Task)nodeObject).getProperties()).getValue();
        if (state.equals(new elv.util.State(elv.util.State.DEFINED)))
        {
          scheduleButton.setEnabled(isContainer);
          scheduleMenuItem.setEnabled(isContainer);
          schedulePopupMenuItem.setEnabled(isContainer);
        }
        else if (state.equals(new elv.util.State(elv.util.State.SCHEDULED)))
        {
          scheduleButton.setEnabled(isContainer);
          scheduleMenuItem.setEnabled(isContainer);
          schedulePopupMenuItem.setEnabled(isContainer);
        }
        else if (state.equals(new elv.util.State(elv.util.State.EXECUTED)))
        {
          stopButton.setEnabled(isContainer);
          stopMenuItem.setEnabled(isContainer);
          stopPopupMenuItem.setEnabled(isContainer);
          
//TODO:          progressesMenuItem.setEnabled(true);
          progressesPopupMenuItem.setEnabled(true);
        }
        else if (state.equals(new elv.util.State(elv.util.State.STOPPED)))
        {
          if(((elv.task.Task)nodeObject).getType() != elv.task.Task.MORTALITY_SELECTION &&
            ((elv.task.Task)nodeObject).getType() != elv.task.Task.MORBIDITY_SELECTION)
          {
            // SELECTIONs cannot be continued.
            scheduleButton.setEnabled(isContainer);
            scheduleMenuItem.setEnabled(isContainer);
            schedulePopupMenuItem.setEnabled(isContainer);
          }
          
          cleanButton.setEnabled(isContainer);
          cleanMenuItem.setEnabled(isContainer);
          cleanPopupMenuItem.setEnabled(isContainer);
          
          rewindButton.setEnabled(isContainer);
          rewindMenuItem.setEnabled(isContainer);
          rewindPopupMenuItem.setEnabled(isContainer);
          
//TODO:          progressesMenuItem.setEnabled(true);
          progressesPopupMenuItem.setEnabled(true);
        }
        else if (state.equals(new elv.util.State(elv.util.State.DONE)))
        {
          cleanButton.setEnabled(isContainer);
          cleanMenuItem.setEnabled(isContainer);
          cleanPopupMenuItem.setEnabled(isContainer);
          
          rewindButton.setEnabled(isContainer);
          rewindMenuItem.setEnabled(isContainer);
          rewindPopupMenuItem.setEnabled(isContainer);
          
          saveDocumentsMenu.setEnabled(true);
//          // Set document submenues.
//          removables = new boolean[documentsMenu.getItemCount()];
//          for(int i = 0; i < removables.length; i++)
//          {
//            removables[i] = true;
//          }
//          elv.util.Action documentAction = new elv.util.Action(elv.util.Action.PLAIN);
//          java.util.Vector<elv.task.executables.Executable> executables = ((elv.task.Task)nodeObject).getExecutables();
//          elv.task.executables.Executable lastExecutable = executables.get(executables.size() - 1);
//          for(int i = 0; i < lastExecutable.getExecutionFiles().size(); i++)
//          {
//            final java.lang.String executionFile = lastExecutable.getExecutionFiles().get(i);
//            final java.lang.String executionFileTitle = lastExecutable.getExecutionFileTitles().get(i);
//            javax.swing.ImageIcon executionFileIcon= lastExecutable.getExecutionFileIcons().get(i);
//            boolean found = false;
//            for(int j = 0; j < documentsMenu.getItemCount(); j++)
//            {
//              javax.swing.JMenuItem iteratorMenuItem = documentsMenu.getItem(j);
//              if(iteratorMenuItem.getText().equals(executionFileTitle))
//              {
//                removables[j] = false;
//                found = true;
//                break;
//              }
//            }
//            if(!found)
//            {
//              javax.swing.JMenuItem documentMenuItem = new javax.swing.JMenuItem();
//              documentMenuItem.setIcon(executionFileIcon);
//              documentMenuItem.setText(executionFileTitle);
//              documentMenuItem.addActionListener(new java.awt.event.ActionListener()
//              {
//                public void actionPerformed(java.awt.event.ActionEvent evt)
//                {
//                  saveDocumentAction(executionFile);
//                }
//              });
//              saveDocumentsMenu.add(documentMenuItem);
//              
//              documentMenuItem = new javax.swing.JMenuItem();
//              documentMenuItem.setIcon(executionFileIcon);
//              documentMenuItem.setText(executionFileTitle);
//              documentMenuItem.addActionListener(new java.awt.event.ActionListener()
//              {
//                public void actionPerformed(java.awt.event.ActionEvent evt)
//                {
//                  documentAction(executionFile, executionFileTitle);
//                }
//              });
//              documentsMenu.add(documentMenuItem);
//              
//              javax.swing.JMenuItem documentPopupMenuItem = new javax.swing.JMenuItem();
//              documentPopupMenuItem.setIcon(executionFileIcon);
//              documentPopupMenuItem.setText(executionFileTitle);
//              documentPopupMenuItem.addActionListener(new java.awt.event.ActionListener()
//              {
//                public void actionPerformed(java.awt.event.ActionEvent evt)
//                {
//                  documentAction(executionFile, executionFileTitle);
//                }
//              });
//              documentsPopupMenu.add(documentPopupMenuItem);
//            }
//          }
//          for(int i = removables.length - 1; i >= 0 ; i--)
//          {
//            if(removables[i])
//            {
//              saveDocumentsMenu.remove(i);
//              documentsMenu.remove(i);
//              documentsPopupMenu.remove(i);
//            }
//          }
        }
        else if (state.equals(new elv.util.State(elv.util.State.ERROR)))
        {
          scheduleButton.setEnabled(isContainer);
          scheduleMenuItem.setEnabled(isContainer);
          schedulePopupMenuItem.setEnabled(isContainer);
          
          cleanButton.setEnabled(isContainer);
          cleanMenuItem.setEnabled(isContainer);
          cleanPopupMenuItem.setEnabled(isContainer);
          
          rewindButton.setEnabled(isContainer);
          rewindMenuItem.setEnabled(isContainer);
          rewindPopupMenuItem.setEnabled(isContainer);
          
//TODO:          progressesMenuItem.setEnabled(true);
          progressesPopupMenuItem.setEnabled(true);
        }
      }
      if(treeNode.getState().equals(new elv.util.State(elv.util.State.ERROR)))
      {
        errorMenuItem.setEnabled(true);
        browserPopupMenu.add(errorPopupMenuItem);
        errorPopupMenuItem.setEnabled(true);
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  /**
   * Method for about action.
   */
  private synchronized void aboutAction()
  {
    try
    {
      new AboutDialog(elv.util.Util.translate(new elv.util.Action(elv.util.Action.ABOUT).getName())).setVisible(true);
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  /**
   * Method for save action.
   */
  public synchronized void saveAction()
  {
    try
    {
//      javax.swing.JTabbedPane tabbedPane =  (javax.swing.JTabbedPane)explorerDesktopPane.getSelectedFrame().getContentPane().getComponent(0);
//      ((elv.util.Saveable)tabbedPane.getSelectedComponent()).save();
//      setChanged(false);
//      ((BrowserTreeModel)elvTree.getModel()).refresh();
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  /**
   * Method for set the changed signs.
   */
//  protected void modificationChange(java.beans.PropertyChangeEvent evt)
  protected void setChanged(boolean isChanged)
  {
    try
    {
//      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
//      ExplorerInternalFrame explorerInternalFrame = (ExplorerInternalFrame)explorerDesktopPane.getSelectedFrame();
//      if(explorerInternalFrame != null)
//      {
//        explorerInternalFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
//        javax.swing.JTabbedPane explorerTabbedPane =  (javax.swing.JTabbedPane)explorerInternalFrame.getContentPane().getComponent(0);
//        ((ExplorerInternalFrame.TabTitle)explorerTabbedPane.getTabComponentAt(explorerTabbedPane.getSelectedIndex())).setChanged(isChanged);
//        saveMenuItem.setEnabled(isChanged);
//        saveButton.setEnabled(isChanged);
//        if(isChanged)
//        {
//          saveAllMenuItem.setEnabled(true);
//          saveAllButton.setEnabled(true);
//        }
//        boolean allAreSaved = true;
//        javax.swing.JInternalFrame[] internalFrames = explorerDesktopPane.getAllFrames();
//        for(int i = 0; i < internalFrames.length; i++)
//        {
//          javax.swing.JTabbedPane tabbedPane =  (javax.swing.JTabbedPane)internalFrames[i].getContentPane().getComponent(0);
//          for(int j = 0; j < tabbedPane.getTabCount(); j++)
//          {
//            if(((elv.util.Saveable)tabbedPane.getComponentAt(j)).isChanged()) // Unsaved properties.
//            {
//              allAreSaved = false;
//              break;
//            }
//          }
//        }
//        if(allAreSaved)
//        {
//          saveAllMenuItem.setEnabled(false);
//          saveAllButton.setEnabled(false);
//        }
//      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  /**
   * Method for save all action.
   */
  protected synchronized void saveAllAction()
  {
    try
    {
//      javax.swing.JInternalFrame[] internalFrames = explorerDesktopPane.getAllFrames();
//      for(int i = 0; i < internalFrames.length; i++)
//      {
//        javax.swing.JTabbedPane tabbedPane =  (javax.swing.JTabbedPane)internalFrames[i].getContentPane().getComponent(0);
//        for(int j = 0; j < tabbedPane.getTabCount(); j++)
//        {
//          if(((elv.util.Saveable)tabbedPane.getComponentAt(j)).isChanged())
//          {
//            ((elv.util.Saveable)tabbedPane.getComponentAt(j)).save();
//            ((ExplorerInternalFrame.TabTitle)tabbedPane.getTabComponentAt(j)).setChanged(false);
//          }
//        }
//        internalFrames[i].setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
//      }
//      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
//      saveMenuItem.setEnabled(false);
//      saveButton.setEnabled(false);
//      saveAllMenuItem.setEnabled(false);
//      saveAllButton.setEnabled(false);
//      ((BrowserTreeModel)elvTree.getModel()).refresh();
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  /**
   * Method for application exit action.
   */
  private synchronized void exitAction()
  {
    try
    {
//      boolean haveToAsk = true;
//      int returnOption = 0;
//      javax.swing.JInternalFrame[] internalFrames = explorerDesktopPane.getAllFrames();
//      
      java.util.Vector<java.awt.Point> locations = (java.util.Vector<java.awt.Point>)elv.util.Property.get(elv.util.User.LOCATIONS_NAME, elv.util.Util.getActualUser().getProperties()).getValue();
      java.util.Vector<java.awt.Dimension> sizes = (java.util.Vector<java.awt.Dimension>)elv.util.Property.get(elv.util.User.SIZES_NAME, elv.util.Util.getActualUser().getProperties()).getValue();
//      
//      for(int i = 0; i < internalFrames.length; i++)
//      {
//        javax.swing.JTabbedPane tabbedPane =  (javax.swing.JTabbedPane)internalFrames[i].getContentPane().getComponent(0);
//        for(int j = 0; j < tabbedPane.getTabCount(); j++)
//        {
//          if(((elv.util.Saveable)tabbedPane.getComponentAt(j)).isChanged()) // Unsaved properties
//          {
//            if(haveToAsk)
//            {
//              elv.util.Action action = new elv.util.Action(elv.util.Action.SAVE_ALL);
//              returnOption = elv.util.Option.yesNoCancel(action.getQuestion(), action.toString());
//              haveToAsk = false;
//              if(returnOption == javax.swing.JOptionPane.YES_OPTION)
//              {
//                setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
//              }
//              else if(returnOption == javax.swing.JOptionPane.NO_OPTION)
//              {
//                setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
//                break;
//              }
//              else if(returnOption == javax.swing.JOptionPane.CANCEL_OPTION)
//              {
//                setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
//                return;
//              }
//            }
//            if(returnOption == javax.swing.JOptionPane.YES_OPTION)
//            {
//              ((elv.util.Saveable)tabbedPane.getComponentAt(j)).save();
//            }
//          }
//        }
//        int type = ((ExplorerInternalFrame)internalFrames[i]).getType();
//        locations.set(type, internalFrames[i].getLocation());
//        sizes.set(type, internalFrames[i].getSize());
//      }
      locations.set(elv.util.User.WINDOW, getLocation());
      sizes.set(elv.util.User.WINDOW, getSize());
      java.lang.String pathName = elv.util.Util.getActualUser().getFolderPath() + "/" + elv.util.Util.getActualUser().getPropertyFile();
      elv.util.client.ClientStub.storeProperties(pathName, elv.util.Util.getActualUser().getProperties());
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
    java.lang.System.exit(0);
  }
  
  /**
   * Method for browser action.
   * @param browsedObject the browsed object.
   */
  public synchronized void browserAction(java.lang.Object browsedObject)
  {
    try
    {
      elv.util.Node treeNode = (elv.util.Node)browserPanel.getTree().getLastSelectedPathComponent();
      if(treeNode != null)
      {
        if(treeNode.getUserObject() instanceof elv.util.Propertable)
        {
//          elv.util.Propertable ownerObject = (elv.util.Propertable)treeNode.getUserObject();
//          propertiesFrame.addTab(treeNode.toString(), treeNode.getIcon(), new PropertiesPanel(ownerObject), treeNode.getToolTipText());
//          propertiesFrame.setVisible(true);
        }
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  /**
   * Method for navigator action.
   * @param navigatedTask the navigated task.
   * @param navigatedObject the navigated object.
   */
  public synchronized void navigatorAction(elv.task.Task navigatedTask, java.lang.Object navigatedObject)
  {
    try
    {
      if(navigatedTask != null)
      {
        if(navigatedObject == null)
        {
          
        }
        else if(navigatedObject instanceof elv.util.parameters.Interval)
        {
          intervalsFrame.addTab(treeNode + elv.util.Util.TITLE_SEPARATOR + parameterType.getTitle(), treeNode.getIcon(), new IntervalsPanel(task, (elv.util.parameters.Interval)parameterType, null), treeNode.getToolTipText());
          intervalsFrame.setVisible(true);
        }
        else if(navigatedObject instanceof elv.util.parameters.Diagnosis)
        {
          diagnosisesFrame.addTab(treeNode + elv.util.Util.TITLE_SEPARATOR + parameterType.getTitle(), treeNode.getIcon(), new DiagnosisesPanel(task, (elv.util.parameters.Diagnosis)parameterType, null), treeNode.getToolTipText());
          diagnosisesFrame.setVisible(true);
        }
        else if(navigatedObject instanceof elv.util.parameters.Settlement)
        {
          settlementsFrame.addTab(treeNode + elv.util.Util.TITLE_SEPARATOR + parameterType.getTitle(), treeNode.getIcon(), new SettlementsPanel(task, (elv.util.parameters.Settlement)parameterType, null), treeNode.getToolTipText());
          settlementsFrame.setVisible(true);
        }
        else if(navigatedObject instanceof elv.task.executables.Executable)
        {
          // Find real executable.
          for(elv.task.executables.Executable iteratorExecutable : task.getExecutables())
          {
            if(iteratorExecutable.toString().equals(executable.toString()))
            {
              executable = iteratorExecutable;
            }
          }
          java.lang.String title = task + elv.util.Util.TITLE_SEPARATOR + executable;
          attributesPane.addTab(title, executable.getIcon(), new AttributesPanel(executable, task, null), treeNode.getToolTipText());
          attributesPane.setVisible(true);
        }
        else if(navigatedObject instanceof elv.task.executables.ExecutionFile)
        {
          documentsFrame.addTab(treeNode + elv.util.Util.TITLE_SEPARATOR + documentTitle, treeNode.getIcon(), new DocumentPanel(task, documentName), treeNode.getToolTipText());
          documentsFrame.setVisible(true);
        }
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  /**
   * Method for new action.
   */
  protected synchronized void newAction()
  {
    try
    {
      elv.util.Node node = (elv.util.Node)browserPanel.getTree().getLastSelectedPathComponent();
      if(node != null)
      {
        java.lang.String title = elv.util.Util.translate(new elv.util.Action(elv.util.Action.NEW).getName()) + " " + (node.isRoot() ? elv.util.Util.translate(elv.util.User.ROOT_NAME) : elv.util.Util.translate(elv.task.Task.ROOT_NAME));
        new WizardDialog(title, (elv.util.Parentable)node.getUserObject()).setVisible(true);
        browserPanel.refresh(node);
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  /**
   * Method for saving a result file to the local system.
   * @param fileName the name of the file to save.
   */
  public synchronized void saveDocumentAction(java.lang.String fileName)
  {
    try
    {
      elv.util.Node treeNode = (elv.util.Node)browserPanel.getTree().getLastSelectedPathComponent();
      if(treeNode != null)
      {
        if(treeNode.getUserObject() instanceof elv.task.Task)
        {
          DocumentPanel.saveDocument(Manager.this, (elv.task.Task)treeNode.getUserObject(), fileName);
        }
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  /**
   * Method for import action.
   */
  public synchronized void importAction()
  {
    try
    {
      elv.util.Node treeNode = (elv.util.Node)browserPanel.getTree().getLastSelectedPathComponent();
      if(treeNode != null)
      {
        if(treeNode.getUserObject() instanceof elv.util.User)
        {
          elv.util.User user = (elv.util.User)treeNode.getUserObject();
          javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser(currentDirectory);
          javax.swing.filechooser.FileFilter extensionFilter = new javax.swing.filechooser.FileFilter()
          {
            /**
             * Overridden method from <CODE>javax.swing.filechooser.FileFilter</CODE>.
             */
            public boolean accept(java.io.File file)
            {
              boolean isAcceptable = true;
              if(file != null && !file.isDirectory())
              {
                java.lang.String extension = elv.util.Util.getFileExtension(file.getName());
                if(!elv.task.Archive.EXTENSION.equals(extension))
                {
                  isAcceptable = false;
                }
              }
              return isAcceptable;
            }
            
            /**
             * Overridden method from <CODE>javax.swing.filechooser.FileFilter</CODE>.
             */
            public java.lang.String getDescription()
            {
              return "*." + elv.task.Archive.EXTENSION;
            }
          };
          fileChooser.addChoosableFileFilter(extensionFilter);
          fileChooser.setDialogTitle(elv.util.Util.translate(new elv.util.Action(elv.util.Action.IMPORT).getName()));
          if(fileChooser.showDialog(Manager.this, elv.util.Util.translate(new elv.util.Action(elv.util.Action.IMPORT).getName())) == javax.swing.JFileChooser.APPROVE_OPTION)
          {
            // Memorize the current directory for next usages.
            currentDirectory = fileChooser.getCurrentDirectory();
            java.lang.String localFilePath = fileChooser.getSelectedFile().getAbsolutePath();
            java.lang.String remoteFilePath = user.getFolderPath() + "/" + fileChooser.getSelectedFile().getName();
            elv.util.client.ClientStub.put(localFilePath, remoteFilePath, false);
          }
        }
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  /**
   * Method for export action.
   */
  public synchronized void exportAction()
  {
    try
    {
      elv.util.Node treeNode = (elv.util.Node)browserPanel.getTree().getLastSelectedPathComponent();
      if(treeNode != null)
      {
        if(treeNode.getUserObject() instanceof elv.task.Archive)
        {
          elv.task.Archive archive = (elv.task.Archive)treeNode.getUserObject();
          javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser(currentDirectory);
          java.lang.String fileBaseName = elv.util.Util.getFileBase(archive.getName());
          fileChooser.setSelectedFile(new java.io.File(currentDirectory, fileBaseName));
          javax.swing.filechooser.FileFilter extensionFilter = new javax.swing.filechooser.FileFilter()
          {
            /**
             * Overridden method from <CODE>javax.swing.filechooser.FileFilter</CODE>.
             */
            public boolean accept(java.io.File file)
            {
              boolean isAcceptable = true;
              if(file != null && !file.isDirectory())
              {
                java.lang.String extension = elv.util.Util.getFileExtension(file.getName());
                if(!elv.task.Archive.EXTENSION.equals(extension))
                {
                  isAcceptable = false;
                }
              }
              return isAcceptable;
            }
            
            /**
             * Overridden method from <CODE>javax.swing.filechooser.FileFilter</CODE>.
             */
            public java.lang.String getDescription()
            {
              return "*." + elv.task.Archive.EXTENSION;
            }
          };
          fileChooser.addChoosableFileFilter(extensionFilter);
          fileChooser.setDialogTitle(elv.util.Util.translate(new elv.util.Action(elv.util.Action.EXPORT).getName()));
          if(fileChooser.showDialog(Manager.this, elv.util.Util.translate(new elv.util.Action(elv.util.Action.EXPORT).getName())) == javax.swing.JFileChooser.APPROVE_OPTION)
          {
            // Memorize the current directory for next usages.
            currentDirectory = fileChooser.getCurrentDirectory();
            // Construct URL.
            java.lang.String file = elv.util.server.Servlet.FILE + elv.util.server.Servlet.EQUALS + java.net.URLEncoder.encode(archive.getFolderPath(), elv.util.server.Servlet.URL_ENCODING);
            java.lang.String type = elv.util.server.Servlet.TYPE + elv.util.server.Servlet.EQUALS + elv.util.server.Servlet.BIN;
            java.lang.String query = file + elv.util.server.Servlet.AND + type;
            java.net.URL archiveURL = new java.net.URL(elv.util.client.ClientStub.getServletURL() + elv.util.server.Servlet.QUERY + query);
            // Secure the extension ending.
            java.lang.String saveableDocumentName = fileChooser.getSelectedFile().getAbsolutePath().split(java.util.regex.Pattern.quote("." + elv.task.Archive.EXTENSION))[0] + "." + elv.task.Archive.EXTENSION;
            
            java.io.InputStream inputStream = archiveURL.openStream();
            java.io.FileOutputStream outputStream = new java.io.FileOutputStream(saveableDocumentName);
            int count;
            byte[] buffer = new byte[elv.util.Util.BUFFER_SIZE];
            while((count = inputStream.read(buffer, 0,  elv.util.Util.BUFFER_SIZE)) != -1)
            {
              outputStream.write(buffer, 0,  count);
            }
            inputStream.close();
            outputStream.close();
          }
        }
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  /**
   * Method for cut action.
   */
  public synchronized void cutAction()
  {
    try
    {
      elv.util.Node treeNode = (elv.util.Node)browserPanel.getTree().getLastSelectedPathComponent();
      if(treeNode != null)
      {
        clipBoard = new ClipBoard(ClipBoard.CUT_ACTION, treeNode.getUserObject());
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  /**
   * Method for copy action.
   */
  public synchronized void copyAction()
  {
    try
    {
      elv.util.Node treeNode = (elv.util.Node)browserPanel.getTree().getLastSelectedPathComponent();
      if(treeNode != null)
      {
        clipBoard = new ClipBoard(ClipBoard.COPY_ACTION, treeNode.getUserObject());
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  /**
   * Method for paste action.
   */
  public synchronized void pasteAction()
  {
    try
    {
      elv.util.Node node = (elv.util.Node)browserPanel.getTree().getLastSelectedPathComponent();
      if(node != null)
      {
        java.lang.Object nodeObject = node.getUserObject();
        if(nodeObject instanceof elv.util.Root)
        {
          elv.util.Root root = (elv.util.Root)nodeObject;
          elv.util.User clipUser = (elv.util.User)clipBoard.getObject();
          elv.util.User newUser = new elv.util.User(root, clipUser.getName(), clipUser.getType());
          if(clipBoard.getAction() == ClipBoard.CUT_ACTION)
          {
            elv.util.client.ClientStub.move(clipUser, newUser);
          }
          else
          {
            elv.util.client.ClientStub.copy(clipUser, newUser);
          }
        }
        else if(nodeObject instanceof elv.util.User)
        {
          elv.util.User user = (elv.util.User)nodeObject;
          elv.task.Container clipContainer = (elv.task.Container)clipBoard.getObject();
          elv.task.Container newContainer = new elv.task.Container(user, clipContainer.getName());
          if(clipBoard.getAction() == ClipBoard.CUT_ACTION)
          {
            elv.util.client.ClientStub.move(clipContainer, newContainer);
          }
          else
          {
            elv.util.client.ClientStub.copy(clipContainer, newContainer);
          }
        }
        else if(nodeObject instanceof elv.task.Container)
        {
          elv.task.Container container = (elv.task.Container)nodeObject;
          elv.task.Task clipTask = (elv.task.Task)clipBoard.getObject();
          elv.task.Task newTask = new elv.task.Task(container, clipTask.getName(), clipTask.getType());
          if(clipBoard.getAction() == ClipBoard.CUT_ACTION)
          {
            elv.util.client.ClientStub.move(clipTask, newTask);
          }
          else
          {
            elv.util.client.ClientStub.copy(clipTask, newTask);
          }
        }
        browserPanel.refresh(node);
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  /**
   * Method for rename action.
   */
  public synchronized void renameAction()
  {
    try
    {
      elv.util.Node treeNode = (elv.util.Node)browserPanel.getTree().getLastSelectedPathComponent();
      if(treeNode != null)
      {
        if(treeNode.getUserObject() instanceof elv.util.User || treeNode.getUserObject() instanceof elv.task.Container || treeNode.getUserObject() instanceof elv.task.Task)
        {
          browserPanel.getTree().startEditingAtPath(browserPanel.getTree().getSelectionPath());
        }
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  /**
   * Method for delete action.
   */
  public synchronized void deleteAction()
  {
    try
    {
      elv.util.Node node = (elv.util.Node)browserPanel.getTree().getLastSelectedPathComponent();
      if(node != null)
      {
        elv.util.Action action = new elv.util.Action(elv.util.Action.DELETE);
        if(elv.util.Option.okCancel(action.getQuestion(), action.toString()) == javax.swing.JOptionPane.OK_OPTION)
        {
          if(node.getUserObject() instanceof elv.util.User)
          {
            elv.util.client.ClientStub.delete((elv.util.User)node.getUserObject());
          }
          else if(node.getUserObject() instanceof elv.task.Task)
          {
            elv.util.client.ClientStub.stop((elv.task.Task)node.getUserObject());
            elv.util.client.ClientStub.delete((elv.task.Task)node.getUserObject());
          }
          else if(node.getUserObject() instanceof elv.task.Container)
          {
            for(int i = 0; i < node.getChildCount(); i++)
            {
              elv.util.Node taskTreeNode = (elv.util.Node)node.getChildAt(i);
              if(taskTreeNode.getUserObject() instanceof elv.task.Task)
              {
                elv.util.client.ClientStub.stop((elv.task.Task)taskTreeNode.getUserObject());
              }
            }
            elv.util.client.ClientStub.delete((elv.task.Container)node.getUserObject());
          }
          browserPanel.refresh((elv.util.Node)node.getParent());
        }
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  /**
   * Method for progresses viewing.
   */
  private synchronized void progressesAction()
  {
    try
    {
      elv.util.Node treeNode = (elv.util.Node)browserPanel.getTree().getLastSelectedPathComponent();
      if(treeNode != null)
      {
        if(treeNode.getUserObject() instanceof elv.task.Task)
        {
          elv.task.Task task = (elv.task.Task)treeNode.getUserObject();
          progressesFrame.addTab(treeNode.toString(), treeNode.getIcon(), new ProgressesPanel(task), treeNode.getToolTipText());
          progressesFrame.setVisible(true);
        }
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  /**
   * Method for scheduling the execution of a task.
   */
  private synchronized void scheduleAction()
  {
    try
    {
      elv.util.Node treeNode = (elv.util.Node)browserPanel.getTree().getLastSelectedPathComponent();
      if(treeNode != null)
      {
        if(treeNode.getUserObject() instanceof elv.task.Task)
        {
          elv.util.Action action = new elv.util.Action(elv.util.Action.SCHEDULE);
          elv.task.Task task = (elv.task.Task)treeNode.getUserObject();
          
//          // Save unsaved properties and parameters.
//          boolean isChanged = true;
//          elv.util.Saveable selectedSaveable = null;
//          javax.swing.JInternalFrame selectedInternalFrame = explorerDesktopPane.getSelectedFrame();
//          if(selectedInternalFrame != null)
//          {
//            javax.swing.JTabbedPane selectedTabbedPane =  (javax.swing.JTabbedPane)selectedInternalFrame.getContentPane().getComponent(0);
//            selectedSaveable = (elv.util.Saveable)selectedTabbedPane.getSelectedComponent();
//            isChanged = selectedSaveable.isChanged();
//          }
//          javax.swing.JInternalFrame[] internalFrames = explorerDesktopPane.getAllFrames();
//          for(int i = 0; i < internalFrames.length; i++)
//          {
//            javax.swing.JTabbedPane tabbedPane =  (javax.swing.JTabbedPane)internalFrames[i].getContentPane().getComponent(0);
//            for(int j = 0; j < tabbedPane.getTabCount(); j++)
//            {
//              elv.util.Saveable saveable = (elv.util.Saveable)tabbedPane.getComponentAt(j);
//              if(task.equals(saveable.getOwner()))
//              {
//                ((elv.util.Saveable)tabbedPane.getComponentAt(j)).save();
//                ((ExplorerInternalFrame.TabTitle)tabbedPane.getTabComponentAt(j)).setChanged(false);
//                internalFrames[i].setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
//                if(saveable.equals(selectedSaveable))
//                {
//                  isChanged = false;
//                }
//              }
//            }
//          }
//          setChanged(isChanged);
          
          // Schedule task.
          java.util.Date scheduledTime = (java.util.Date)elv.util.Property.get(elv.task.Task.SCHEDULED_NAME, task.getProperties()).getValue();
          java.util.Date serverTime = elv.util.client.ClientStub.getDate();
          java.util.Date startTime = (scheduledTime == null || scheduledTime.before(serverTime) ? new java.util.Date(serverTime.getTime() + 1000) : scheduledTime);
          javax.swing.JSpinner editorSpinner = new javax.swing.JSpinner();
          editorSpinner.setFont(new java.awt.Font("DialogInput", 0, 12));
          javax.swing.SpinnerDateModel spinnerDateModel = new javax.swing.SpinnerDateModel(startTime, serverTime, null, java.util.Calendar.SECOND);
          editorSpinner.setModel(spinnerDateModel);
          
          java.lang.String pattern = ((java.text.SimpleDateFormat)java.text.DateFormat.getDateTimeInstance(java.text.DateFormat.MEDIUM, java.text.DateFormat.MEDIUM, elv.util.Util.getActualLocale())).toPattern();
          javax.swing.JSpinner.DateEditor dateEditor = new javax.swing.JSpinner.DateEditor(editorSpinner, pattern);
          dateEditor.getFormat().setDateFormatSymbols(new java.text.DateFormatSymbols(elv.util.Util.getActualLocale()));
          editorSpinner.setEditor(dateEditor);
          dateEditor.getTextField().revalidate();
          dateEditor.getTextField().repaint();
          
          int returnOption = elv.util.Option.yesNoCancel(editorSpinner, elv.util.Util.translate(elv.task.Task.SCHEDULED_NAME));
          if(returnOption == javax.swing.JOptionPane.YES_OPTION)
          {
            elv.util.Property.get(elv.task.Task.SCHEDULED_NAME, task.getProperties()).setValue(spinnerDateModel.getDate());
            elv.util.State state = new elv.util.State(elv.util.State.SCHEDULED);
            elv.util.Property.get(elv.task.Task.STATE_NAME, task.getProperties()).setValue(state);
            java.lang.String pathName = task.getPropertyFolderPath() + "/" + task.getPropertyFile();
            elv.util.client.ClientStub.storeProperties(pathName, task.getProperties());
            treeNode.setState(state);
            ((javax.swing.tree.DefaultTreeModel)browserPanel.getTree().getModel()).nodeChanged(treeNode);
            task.getChangeSupport().firePropertyChange(elv.util.State.TITLE, null, state);
          }
          else if(returnOption == javax.swing.JOptionPane.NO_OPTION)
          {
            elv.util.Property.get(elv.task.Task.SCHEDULED_NAME, task.getProperties()).setValue(null);
            elv.util.State state = new elv.util.State(elv.util.State.DEFINED);
            elv.util.Property.get(elv.task.Task.STATE_NAME, task.getProperties()).setValue(new elv.util.State(elv.util.State.DEFINED));
            java.lang.String pathName = task.getPropertyFolderPath() + "/" + task.getPropertyFile();
            elv.util.client.ClientStub.storeProperties(pathName, task.getProperties());
            treeNode.setState(state);
            ((javax.swing.tree.DefaultTreeModel)browserPanel.getTree().getModel()).nodeChanged(treeNode);
            task.getChangeSupport().firePropertyChange(elv.util.State.TITLE, null, state);
          }
        }
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  /**
   * Method for stopping the execution of a task.
   */
  private synchronized void stopAction()
  {
    try
    {
      elv.util.Node node = (elv.util.Node)browserPanel.getTree().getLastSelectedPathComponent();
      if(node != null)
      {
        if(node.getUserObject() instanceof elv.task.Task)
        {
          elv.util.Action action = new elv.util.Action(elv.util.Action.STOP);
          if(elv.util.Option.okCancel(action.getQuestion(), action.toString()) == javax.swing.JOptionPane.OK_OPTION)
          {
            elv.util.client.ClientStub.stop((elv.task.Task)node.getUserObject());
            browserPanel.refresh((elv.util.Node)node.getParent());
          }
        }
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  /**
   * Method for cleaning the execution of a task.
   */
  private synchronized void cleanAction()
  {
    try
    {
      elv.util.Node node = (elv.util.Node)browserPanel.getTree().getLastSelectedPathComponent();
      if(node != null)
      {
        if(node.getUserObject() instanceof elv.task.Task)
        {
          elv.util.Action action = new elv.util.Action(elv.util.Action.CLEAN);
          if(elv.util.Option.okCancel(action.getQuestion(), action.toString()) == javax.swing.JOptionPane.OK_OPTION)
          {
            elv.task.Task task = (elv.task.Task)node.getUserObject();
            elv.util.client.ClientStub.clean(task);
            task.getChangeSupport().firePropertyChange(new elv.util.Action(elv.util.Action.CLEAN).getName(), task, null);
            browserPanel.refresh((elv.util.Node)node.getParent());
          }
        }
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  /**
   * Method for rewinding the execution of a task.
   */
  private synchronized void rewindAction()
  {
    try
    {
      elv.util.Node node = (elv.util.Node)browserPanel.getTree().getLastSelectedPathComponent();
      if(node != null)
      {
        if(node.getUserObject() instanceof elv.task.Task)
        {
          elv.util.Action action = new elv.util.Action(elv.util.Action.REWIND);
          if(elv.util.Option.okCancel(action.getQuestion(), action.toString()) == javax.swing.JOptionPane.OK_OPTION)
          {
            elv.task.Task task = (elv.task.Task)node.getUserObject();
            elv.util.client.ClientStub.rewind(task);
            task.getChangeSupport().firePropertyChange(action.getName(), task, null);
            browserPanel.refresh((elv.util.Node)node.getParent());
          }
        }
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  /**
   * Method for error viewing.
   */
  private synchronized void errorAction()
  {
    try
    {
      elv.util.Node treeNode = (elv.util.Node)browserPanel.getTree().getLastSelectedPathComponent();
      if(treeNode != null)
      {
        elv.util.State errorState = new elv.util.State(elv.util.State.ERROR);
        if(treeNode.getState().equals(errorState))
        {
          javax.swing.JTextArea errorTextArea = new javax.swing.JTextArea();
          errorTextArea.setFont(new java.awt.Font("DialogInput", java.awt.Font.PLAIN, 11));
          errorTextArea.setEditable(false);
          javax.swing.JScrollPane errorScrollPane = new javax.swing.JScrollPane();
          errorScrollPane.setPreferredSize(new java.awt.Dimension(400,200));
          errorScrollPane.setViewportView(errorTextArea);
          if(treeNode.getUserObject() instanceof elv.task.Task)
          {
            errorTextArea.setText(elv.util.client.ClientStub.getExecutionError((elv.task.Task)treeNode.getUserObject()));
          }
          elv.util.Option.ok(errorScrollPane, errorState.toString());
        }
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  /**
   * Method for executions viewing.
   */
  private synchronized void executionsAction()
  {
    try
    {
      final javax.swing.JList executionsList = new javax.swing.JList(new javax.swing.DefaultListModel()
      {
        /**
         * Overridden constructor.
         */
        {
          java.util.Stack<elv.task.Task> executedTasks = elv.util.client.ClientStub.getExecutedTasks();
          for(elv.task.Task iteratorTask : executedTasks)
          {
            addElement(iteratorTask);
          }
        }
      });
      executionsList.setCellRenderer(new javax.swing.DefaultListCellRenderer()
      {
        /**
         * Overridden method from <CODE>javax.swing.DefaultListCellRenderer</CODE>.
         */
        public java.awt.Component getListCellRendererComponent(javax.swing.JList list,	java.lang.Object value, int index, boolean isSelected, boolean cellHasFocus)
        {
          super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
          try
          {
            elv.task.Task task = (elv.task.Task)value;
            elv.util.State state = (elv.util.State)elv.util.Property.get(elv.task.Task.STATE_NAME, task.getProperties()).getValue();
            setIcon(state.getIcon());
            setText(task.getTitle());
          }
          catch(java.lang.Exception exc)
          {
            elv.util.Error.showErrorMessage(Manager.this, exc);
          }
          return this;
        }
      });
      ViewExpansion.register(executionsList);
      addPropertyChangeListener(elv.util.State.TITLE, new java.beans.PropertyChangeListener()
      {
        public void propertyChange(java.beans.PropertyChangeEvent evt)
        {
          javax.swing.DefaultListModel executionsListModel = (javax.swing.DefaultListModel)executionsList.getModel();
          boolean[] removables = new boolean[executionsListModel.getSize()];
          for(int i = 0; i < removables.length; i++)
          {
            removables[i] = true;
          }
          for(elv.task.Task iteratorTask : (java.util.Vector<elv.task.Task>)evt.getNewValue())
          {
            boolean found = false;
            for(int i = 0; i < executionsListModel.getSize(); i++)
            {
              elv.task.Task task = (elv.task.Task)executionsListModel.getElementAt(i);
              if(task.equals(iteratorTask))
              {
                removables[i] = false;
                found = true;
                break;
              }
            }
            if(!found)
            {
              executionsListModel.addElement(iteratorTask);
            }
          }
          for(int i = 0; i < removables.length; i++)
          {
            if(removables[i])
            {
              executionsListModel.remove(i);
            }
          }
          
        }
      });
      javax.swing.JScrollPane executionsScrollPane = new javax.swing.JScrollPane();
      executionsScrollPane.setViewportView(executionsList);
      executionsScrollPane.setPreferredSize(new java.awt.Dimension(300, 400));
      elv.util.Option.ok(executionsScrollPane, elv.util.Util.translate(new elv.util.Action(elv.util.Action.EXECUTIONS).getName()));
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  /**
   * Method for tables viewing.
   */
  private synchronized void tablesAction()
  {
    try
    {
      final java.util.Vector<elv.util.Table> tables = elv.util.client.ClientStub.getTables();
      final javax.swing.JList tablesList = new javax.swing.JList(new javax.swing.DefaultListModel()
      {
        /**
         * Overridden constructor.
         */
        {
          for(elv.util.Table iteratorTable : tables)
          {
            addElement(iteratorTable);
          }
        }
      });
      tablesList.setCellRenderer(new javax.swing.DefaultListCellRenderer()
      {
        /**
         * Overridden method from <CODE>javax.swing.DefaultListCellRenderer</CODE>.
         */
        public java.awt.Component getListCellRendererComponent(javax.swing.JList list,	java.lang.Object value, int index, boolean isSelected, boolean cellHasFocus)
        {
          super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
          try
          {
            elv.util.Table table = (elv.util.Table)value;
            setIcon(table.getIcon());
            setText(table.toString());
          }
          catch(java.lang.Exception exc)
          {
            elv.util.Error.showErrorMessage(Manager.this, exc);
          }
          return this;
        }
      });
      ViewExpansion.register(tablesList);
      javax.swing.JScrollPane tablesScrollPane = new javax.swing.JScrollPane();
      tablesScrollPane.setViewportView(tablesList);
      tablesScrollPane.setPreferredSize(new java.awt.Dimension(300, 400));
      elv.util.Option.ok(tablesScrollPane, elv.util.Util.translate(new elv.util.Action(elv.util.Action.TABLES).getName()));
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  
  /**
   * Method for refresh frequency changing.
   */
  private void refreshDelayAction(int frequency)
  {
    try
    {
      elv.util.Property.get(elv.util.User.REFRESH_DELAY_NAME, elv.util.Util.getActualUser().getProperties()).setValue(frequency);
      java.lang.String pathName = elv.util.Util.getActualUser().getFolderPath() + "/" + elv.util.Util.getActualUser().getPropertyFile();
      elv.util.client.ClientStub.storeProperties(pathName, elv.util.Util.getActualUser().getProperties());
      timer.stop();
      if(frequency > 0)
      {
        timer = new javax.swing.Timer(frequency, this);
        timer.start();
      }
    }
    catch(java.lang.Exception exc)
    {
      timer.stop();
      javax.swing.tree.DefaultTreeModel elvTreeModel = (javax.swing.tree.DefaultTreeModel)browserPanel.getTree().getModel();
      elv.util.Node rootNode = (elv.util.Node)elvTreeModel.getRoot();
      rootNode.setState(new elv.util.State(elv.util.State.ERROR));
      elvTreeModel.nodeChanged(rootNode);
      elv.util.Error.showErrorMessage(Manager.this, exc);
    }
  }
  
  /**
   * Inner class for cut, copy and paste handling.
   */
  private class ClipBoard
  {
    
    /**
     * Variables.
     */
    public final static int CUT_ACTION = 0;
    public final static int COPY_ACTION = 1;
    
    private int action;
    private java.lang.Object object;
    
    /**
     * Constructor.
     */
    public ClipBoard(int action, java.lang.Object object)
    {
      this.action = action;
      this.object = object;
    }
    
    /**
     * Inner method for getting the <CODE>action</CODE> variable.
     */
    public int getAction()
    {
      return action;
    }
    
    /**
     * Inner method for getting the <CODE>object</CODE> variable.
     */
    public java.lang.Object getObject()
    {
      return object;
    }
    
  }
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  public javax.swing.JMenuItem aboutMenuItem;
  public javax.swing.JPanel attributesPanel;
  public javax.swing.JSeparator bottomFileMenuSeparator;
  public javax.swing.JSeparator bottomToolsMenuSeparator;
  public javax.swing.JPopupMenu browserPopupMenu;
  public javax.swing.JButton cleanButton;
  public javax.swing.JMenuItem cleanMenuItem;
  public javax.swing.JMenuItem cleanPopupMenuItem;
  public javax.swing.JMenuItem contentsMenuItem;
  public javax.swing.JButton copyButton;
  public javax.swing.JMenuItem copyMenuItem;
  public javax.swing.JMenuItem copyPopupMenuItem;
  public javax.swing.JButton cutButton;
  public javax.swing.JMenuItem cutMenuItem;
  public javax.swing.JMenuItem cutPopupMenuItem;
  public javax.swing.JButton deleteButton;
  public javax.swing.JMenuItem deleteMenuItem;
  public javax.swing.JMenuItem deletePopupMenuItem;
  public javax.swing.JMenu editMenu;
  public javax.swing.JSeparator editMenuSeparator;
  public javax.swing.JToolBar editToolBar;
  public javax.swing.JMenuItem errorMenuItem;
  public javax.swing.JMenuItem errorPopupMenuItem;
  public javax.swing.JMenuItem executionsMenuItem;
  public javax.swing.JMenuItem exitMenuItem;
  public javax.swing.JMenuItem exportMenuItem;
  public javax.swing.JMenuItem exportPopupMenuItem;
  public javax.swing.JMenu fileMenu;
  public javax.swing.JToolBar fileToolBar;
  public javax.swing.JMenu helpMenu;
  public javax.swing.JSeparator helpMenuSeparator;
  public javax.swing.JMenuItem importMenuItem;
  public javax.swing.JMenuItem importPopupMenuItem;
  public javax.swing.JSplitPane leftSplitPane;
  public javax.swing.JPanel mainPanel;
  public javax.swing.JSplitPane mainSplitPane;
  public javax.swing.JMenuBar menuBar;
  public javax.swing.JButton newButton;
  public javax.swing.JMenuItem newMenuItem;
  public javax.swing.JMenuItem newPopupMenuItem;
  public javax.swing.JButton pasteButton;
  public javax.swing.JMenuItem pasteMenuItem;
  public javax.swing.JMenuItem pastePopupMenuItem;
  public javax.swing.JSeparator popupSeparator1;
  public javax.swing.JSeparator popupSeparator2;
  public javax.swing.JSeparator popupSeparator3;
  public javax.swing.JSeparator popupSeparator4;
  public javax.swing.JSeparator popupSeparator5;
  public javax.swing.JSeparator popupSeparator6;
  public javax.swing.JMenuItem progressesPopupMenuItem;
  public javax.swing.JMenuItem propertiesPopupMenuItem;
  public javax.swing.JMenuItem refreshMenuItem;
  public javax.swing.JMenuItem refreshPopupMenuItem;
  public javax.swing.JMenuItem renameMenuItem;
  public javax.swing.JMenuItem renamePopupMenuItem;
  public javax.swing.JPanel resultsPanel;
  public javax.swing.JButton rewindButton;
  public javax.swing.JMenuItem rewindMenuItem;
  public javax.swing.JMenuItem rewindPopupMenuItem;
  public javax.swing.JTabbedPane rightTabbedPane;
  public javax.swing.JButton saveAllButton;
  public javax.swing.JMenuItem saveAllMenuItem;
  protected javax.swing.JButton saveButton;
  public javax.swing.JMenu saveDocumentsMenu;
  protected javax.swing.JMenuItem saveMenuItem;
  public javax.swing.JButton scheduleButton;
  public javax.swing.JMenuItem scheduleMenuItem;
  public javax.swing.JMenuItem schedulePopupMenuItem;
  public javax.swing.JButton stopButton;
  public javax.swing.JMenuItem stopMenuItem;
  public javax.swing.JMenuItem stopPopupMenuItem;
  public javax.swing.JMenuItem tablesMenuItem;
  public javax.swing.JToolBar toolBar;
  public javax.swing.JMenu toolsMenu;
  public javax.swing.JToolBar toolsToolBar;
  public javax.swing.JSeparator topFileMenuSeparator;
  public javax.swing.JSeparator topToolsMenuSeparator;
  // End of variables declaration//GEN-END:variables
  
}
