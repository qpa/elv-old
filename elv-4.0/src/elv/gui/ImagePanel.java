/*
 * ImagePanel.java
 */

package elv.gui;

/**
 * Class for image viewing.
 * @author Elv
 */
public class ImagePanel extends javax.swing.JPanel
{
  
  /**
   * Constants.
   */
  private final java.lang.String[] ZOOM_VALUES = {"5%", "10%", "25%", "50%", "75%", "100%", "125%", "150%", "200%",
    "Zoom.Page", "Zoom.Size", "Zoom.Width"};
  // Indices in the above array.
  private final int PAGE = 9;
  private final int SIZE = 10;
  private final int WIDTH = 11;
  
  /**
   * Variables.
   */
  private javax.swing.ImageIcon imageIcon;
  private float zoomValue = 1; // 1 = 100%.
  private java.lang.String[] zoomValues;
  
  /**
   * Constructor.
   * @param imageURL the URL of the image.
   */
  public ImagePanel(java.net.URL imageURL)
  {
    try
    {
      imageIcon = new javax.swing.ImageIcon(imageURL);
      zoomValues = ZOOM_VALUES;
      zoomValues[PAGE] = elv.util.Util.translate(zoomValues[PAGE]);
      zoomValues[SIZE] = elv.util.Util.translate(zoomValues[SIZE]);
      zoomValues[WIDTH] = elv.util.Util.translate(zoomValues[WIDTH]);
      initComponents();
      imageScrollPane.getVerticalScrollBar().setUnitIncrement(20);
      imageScrollPane.getHorizontalScrollBar().setUnitIncrement(20);
      bottomToolBar.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 1));
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }
  
  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
  private void initComponents()//GEN-BEGIN:initComponents
  {
    imageScrollPane = new javax.swing.JScrollPane();
    imageLabel = new javax.swing.JLabel();
    bottomToolBar = new javax.swing.JToolBar();
    zoomComboBox = new javax.swing.JComboBox();

    setLayout(new java.awt.BorderLayout());

    imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    imageLabel.setIcon(imageIcon);
    imageScrollPane.setViewportView(imageLabel);

    add(imageScrollPane, java.awt.BorderLayout.CENTER);

    bottomToolBar.setFloatable(false);
    zoomComboBox.setEditable(true);
    zoomComboBox.setMaximumRowCount(ZOOM_VALUES.length);
    zoomComboBox.setModel(new javax.swing.DefaultComboBoxModel(zoomValues));
    zoomComboBox.setSelectedItem((int)(zoomValue * 100) + "%");
    zoomComboBox.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        zoomComboBoxActionPerformed(evt);
      }
    });

    bottomToolBar.add(zoomComboBox);

    add(bottomToolBar, java.awt.BorderLayout.SOUTH);

  }//GEN-END:initComponents

  private void zoomComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_zoomComboBoxActionPerformed
  {//GEN-HEADEREND:event_zoomComboBoxActionPerformed
    try
    {
      float newZoomValue = 1;
      int newWidth = -1;
      int newHeight = -1;
      java.lang.String zoomString = ((java.lang.String)((javax.swing.JComboBox)evt.getSource()).getSelectedItem()).split(java.util.regex.Pattern.quote("%"))[0].trim();
      if(zoomString.equals(zoomValues[PAGE]))
      {
        int width = imageScrollPane.getViewport().getWidth();
        int height = imageScrollPane.getViewport().getHeight();
        int imageWidth = imageIcon.getIconWidth();
        int imageHeight = imageIcon.getIconHeight();
        float widthPercentage = (float)width / imageWidth;
        float heightPercentage = (float)height / imageHeight;
        if(widthPercentage < heightPercentage)
        {
          newZoomValue = widthPercentage;
          newWidth = width;
          newHeight = -1;
        }
        else
        {
          newZoomValue = heightPercentage;
          newWidth = -1;
          newHeight = height;
        }
      }
      else if(zoomString.equals(zoomValues[SIZE]))
      {
        newZoomValue = 1;
        newWidth = -1;
        newHeight = -1;
      }
      else if(zoomString.equals(zoomValues[WIDTH]))
      {
        newWidth = imageScrollPane.getViewport().getWidth();
        newHeight = -1;
        newZoomValue = (float)newWidth / imageIcon.getIconWidth();
      }
      else
      {
        newZoomValue = java.lang.Float.parseFloat(zoomString) / 100;
        if(newZoomValue <= 0 || newZoomValue > 10)
        {
          return;
        }
        newWidth = (int)((float)imageIcon.getIconWidth() * newZoomValue);
        newHeight = (int)((float)imageIcon.getIconHeight() * newZoomValue);
      }
      zoomValue = newZoomValue;
      
      // Scale the image;
      java.awt.image.BufferedImage image = (java.awt.image.BufferedImage)imageIcon.getImage();
      int type = (image.getTransparency() == java.awt.Transparency.OPAQUE) ?
          java.awt.image.BufferedImage.TYPE_INT_RGB : java.awt.image.BufferedImage.TYPE_INT_ARGB;
      java.awt.image.BufferedImage scaledImage = (java.awt.image.BufferedImage)image;
      int w = image.getWidth();
      int h = image.getHeight();
      do
      {
        if(w > newWidth)
        {
          w /= 2;
          if (w < newWidth)
          {
            w = newWidth;
          }
        }
        if(h > newHeight)
        {
          h /= 2;
          if(h < newHeight)
          {
            h = newHeight;
          }
        }
        java.awt.image.BufferedImage tmpImage = new java.awt.image.BufferedImage(w, h, type);
        java.awt.Graphics2D g2 = tmpImage.createGraphics();
        g2.setRenderingHint(java.awt.RenderingHints.KEY_INTERPOLATION, java.awt.RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2.drawImage(scaledImage, 0, 0, w, h, null);
        g2.dispose();
        scaledImage = tmpImage;
      } while (w != newWidth || h != newHeight);
      imageLabel.setIcon(new javax.swing.ImageIcon(scaledImage));
      imageLabel.invalidate();
      imageScrollPane.revalidate();
      repaint();
    }
    catch(java.lang.NumberFormatException exc)
    {
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
    finally
    {
      ((javax.swing.JComboBox)evt.getSource()).setSelectedItem((int)(zoomValue * 100) + "%");
    }
  }//GEN-LAST:event_zoomComboBoxActionPerformed
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JToolBar bottomToolBar;
  private javax.swing.JLabel imageLabel;
  private javax.swing.JScrollPane imageScrollPane;
  private javax.swing.JComboBox zoomComboBox;
  // End of variables declaration//GEN-END:variables
  
}
