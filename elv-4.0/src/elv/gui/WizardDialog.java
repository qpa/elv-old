/*
 * WizardDialog.java
 */
package elv.gui;

/**
 * Wizard for creating tasks, containers or users.
 * The created objects could be brand new or clone objects.
 * @author Elv
 */
public class WizardDialog extends javax.swing.JDialog
{
  
  // Variables.
  /** The object which will have a child. */
  private elv.util.Parentable parentable;
  
  private int stageCount = 0;
  private int initializeCount = 2;
  private int executableCount = 0;
  private int parameterCount = 0;
  private Stages stageLabels;
  /** The selected new object type. */
  private java.lang.Object selectedNewType;
  /** The tree panel with selectable otions. */
  private WizardTreePanel wizardTreePanel;
  /** The text field for the new name. */
  private javax.swing.JTextField nameTextField;
  private java.awt.Component parentComponent;
  
  private elv.util.User newUser;
  private elv.task.Container newContainer;
  private elv.task.Task newTask;
  
  /**
   * Constructor.
   * 
   * @param title the title of this wizard dialog.
   * @param parentable the node object in ELV tree, which will have a new child.
   */
  public WizardDialog(java.lang.String title, elv.util.Parentable parentable)
  {
    super(elv.util.Util.getMainFrame(), title, true);
    this.parentable = parentable;
    parentComponent = this;
    try
    {
      initComponents();
      initPanels();
      java.awt.Dimension windowSize = elv.util.Util.getMainFrame().getSize();
      java.awt.Point windowLocation = elv.util.Util.getMainFrame().getLocation();
      java.awt.Dimension dialogSize = getSize();
      java.awt.Point dialogLocation = new java.awt.Point(windowLocation.x + (windowSize.width-dialogSize.width)/2, windowLocation.y + (windowSize.height-dialogSize.height)/2);
      setLocation((dialogLocation.x >= 0 ? dialogLocation.x : 0), (dialogLocation.y >= 0 ? dialogLocation.y : 0));
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }
  
  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents() {
    mainPanel = new javax.swing.JPanel();
    propertiesPanel = new javax.swing.JPanel();
    propertiesTitlePanel = new javax.swing.JPanel();
    propertiesTitleLabel = new javax.swing.JLabel();
    propertiesTitleSeparator = new javax.swing.JSeparator();
    propertiesContentPanel = new javax.swing.JPanel();
    stagesOrientationPanel = new javax.swing.JPanel();
    stagesPanel = new javax.swing.JPanel();
    stagesTitlePanel = new javax.swing.JPanel();
    stagesTitleLabel = new javax.swing.JLabel();
    stagesTitleSeparator = new javax.swing.JSeparator();
    stagesScrollPane = new javax.swing.JScrollPane();
    stagesContentPanel = new javax.swing.JPanel();
    verticalSeparator = new javax.swing.JSeparator();
    buttonsOrientationPanel = new javax.swing.JPanel();
    buttonsPanel = new javax.swing.JPanel();
    previousButton = new javax.swing.JButton();
    nextButton = new javax.swing.JButton();
    cancelButton = new javax.swing.JButton();
    mainSeparator = new javax.swing.JSeparator();

    setTitle("");
    setModal(true);
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosing(java.awt.event.WindowEvent evt) {
        closeDialog(evt);
      }
    });

    mainPanel.setLayout(new java.awt.BorderLayout());

    propertiesPanel.setLayout(new java.awt.BorderLayout());

    propertiesPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
    propertiesTitlePanel.setLayout(new java.awt.BorderLayout());

    propertiesTitleLabel.setText(elv.util.Util.translate(elv.util.Property.PROPERTIES_NAME));
    propertiesTitlePanel.add(propertiesTitleLabel, java.awt.BorderLayout.NORTH);

    propertiesTitlePanel.add(propertiesTitleSeparator, java.awt.BorderLayout.SOUTH);

    propertiesPanel.add(propertiesTitlePanel, java.awt.BorderLayout.NORTH);

    propertiesContentPanel.setLayout(new java.awt.CardLayout());

    propertiesContentPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 0, 0, 0));
    propertiesPanel.add(propertiesContentPanel, java.awt.BorderLayout.CENTER);

    mainPanel.add(propertiesPanel, java.awt.BorderLayout.CENTER);

    stagesOrientationPanel.setLayout(new java.awt.BorderLayout());

    stagesPanel.setLayout(new java.awt.BorderLayout());

    stagesPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
    stagesTitlePanel.setLayout(new java.awt.BorderLayout());

    stagesTitlePanel.setOpaque(false);
    stagesTitleLabel.setText(elv.util.Util.translate(elv.util.Util.STAGES));
    stagesTitlePanel.add(stagesTitleLabel, java.awt.BorderLayout.NORTH);

    stagesTitlePanel.add(stagesTitleSeparator, java.awt.BorderLayout.CENTER);

    stagesPanel.add(stagesTitlePanel, java.awt.BorderLayout.NORTH);

    stagesScrollPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 1, 1, 1));
    stagesContentPanel.setLayout(new javax.swing.BoxLayout(stagesContentPanel, javax.swing.BoxLayout.Y_AXIS));

    stagesContentPanel.setOpaque(false);
    stagesScrollPane.setViewportView(stagesContentPanel);

    stagesPanel.add(stagesScrollPane, java.awt.BorderLayout.CENTER);

    stagesOrientationPanel.add(stagesPanel, java.awt.BorderLayout.CENTER);

    verticalSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
    stagesOrientationPanel.add(verticalSeparator, java.awt.BorderLayout.EAST);

    mainPanel.add(stagesOrientationPanel, java.awt.BorderLayout.WEST);

    getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

    buttonsOrientationPanel.setLayout(new java.awt.BorderLayout());

    buttonsPanel.setLayout(new java.awt.GridLayout(1, 0, 5, 0));

    buttonsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
    previousButton.setText(new elv.util.Action(elv.util.Action.PREVIOUS).toString());
    previousButton.setEnabled(false);
    previousButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        previousButtonActionPerformed(evt);
      }
    });

    buttonsPanel.add(previousButton);

    nextButton.setText(new elv.util.Action(elv.util.Action.NEXT).toString());
    nextButton.setEnabled(false);
    nextButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        nextButtonActionPerformed(evt);
      }
    });

    buttonsPanel.add(nextButton);

    cancelButton.setText(new elv.util.Action(elv.util.Action.CANCEL).toString());
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancelButtonActionPerformed(evt);
      }
    });

    buttonsPanel.add(cancelButton);

    buttonsOrientationPanel.add(buttonsPanel, java.awt.BorderLayout.EAST);

    buttonsOrientationPanel.add(mainSeparator, java.awt.BorderLayout.NORTH);

    getContentPane().add(buttonsOrientationPanel, java.awt.BorderLayout.SOUTH);

    setSize(new java.awt.Dimension(600, 500));
  }// </editor-fold>//GEN-END:initComponents

  private void nextButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_nextButtonActionPerformed
  {//GEN-HEADEREND:event_nextButtonActionPerformed
    nextAction();
  }//GEN-LAST:event_nextButtonActionPerformed

  private void previousButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_previousButtonActionPerformed
  {//GEN-HEADEREND:event_previousButtonActionPerformed
    previousAction();
  }//GEN-LAST:event_previousButtonActionPerformed

  private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
  {//GEN-HEADEREND:event_cancelButtonActionPerformed
    cancelAction();
  }//GEN-LAST:event_cancelButtonActionPerformed

  private void closeDialog(java.awt.event.WindowEvent evt)//GEN-FIRST:event_closeDialog
  {//GEN-HEADEREND:event_closeDialog
    cancelAction();
  }//GEN-LAST:event_closeDialog
  
  /**
   * Method for initializing the wizard panels.
   */
  private void initPanels()
  {
    try
    {
      // First card panel: "Choices tree".
      wizardTreePanel = new WizardTreePanel(parentable, nextButton);
      propertiesContentPanel.add(wizardTreePanel, "Tree");

      // Second card panel: "Name field".
      javax.swing.JLabel nameLabel = new javax.swing.JLabel(elv.util.Util.translate(elv.util.Util.NAME) + ": ");
      nameTextField = new javax.swing.JTextField();
      javax.swing.JPanel nameContentPanel = new javax.swing.JPanel();
      nameContentPanel.setLayout(new javax.swing.BoxLayout(nameContentPanel, javax.swing.BoxLayout.X_AXIS));
      nameContentPanel.add(nameLabel);
      nameContentPanel.add(nameTextField);
      javax.swing.JPanel namePanel = new javax.swing.JPanel();
      namePanel.setLayout(new java.awt.BorderLayout());
      namePanel.add(nameContentPanel, java.awt.BorderLayout.NORTH);
      propertiesContentPanel.add(namePanel, elv.util.Util.NAME);

      stageLabels = new Stages();
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }
  
  /**
   * Method for next action.
   */
  private void nextAction()
  {
    if(parentable instanceof elv.util.Root) // User.
    {
      userNextAction();
    }
    else if(parentable instanceof elv.util.User) // Container.
    {
      containerNextAction();
    }
    else if(parentable instanceof elv.task.Container) // Task.
    {
      taskNextAction();
    }
  }
  
  /**
   * Method for previous action.
   */
  private void previousAction()
  {
    try
    {
      ((java.awt.CardLayout)propertiesContentPanel.getLayout()).previous(propertiesContentPanel);
      stageLabels.previous();
      stageCount --;
      
      if(stageCount == 0)
      {
        previousButton.setEnabled(false);
      }
      if(stageCount == propertiesContentPanel.getComponentCount() - 2)
      {
        nextButton.setText(new elv.util.Action(elv.util.Action.NEXT).toString());
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }
  
  /**
   * Method for user next action.
   */
  private void userNextAction()
  {
    try
    {
      if(stageCount == 0)
      {
        newUser = null;
        selectedNewType = wizardTreePanel.getSelectedObject();
        
        nameTextField.requestFocusInWindow();
        previousButton.setEnabled(true);
      }
      else if(stageCount == 1 && newUser == null)
      {
        java.lang.String name = nameTextField.getText();
        newUser = (elv.util.User)((elv.util.User)selectedNewType).clone();
        newUser.setName(name);
        // Tests the given name.
        if(name.equals(""))
        {
          throw new java.lang.IllegalArgumentException(name);
        }
        java.util.Vector<elv.util.User> users = parentable.getChildren();
        if(users == null) // No children loaded.
        {
          java.util.Vector<elv.util.Parentable> parentables = new java.util.Vector<elv.util.Parentable>();
          parentables.add(parentable);
          java.util.Vector<java.util.Vector> vectorOfChildren = elv.util.client.ClientStub.loadChildren(parentables);
          users = vectorOfChildren.get(0);
        }
        for(elv.util.User iteratorUser : users)
        {
          if(iteratorUser.getName().equals(name))
          {
            newUser = null;
            throw new java.lang.IllegalArgumentException(name);
          }
        }
        // Set the password for the new user (same as the name).
        elv.util.Property.get(elv.util.User.PASSWORD_NAME, newUser.getProperties()).setValue(name);
        // Visualize the user properties.
        try
        {
          propertiesContentPanel.remove(stageCount + 1);
        }
        catch(java.lang.Exception exc)
        {
        }
        PropertiesPanel propertiesPanel = new PropertiesPanel(newUser);
        newUser.setProperties(propertiesPanel.getProperties()); // Workaroud for PropertiesPanel cloning.
        propertiesContentPanel.add(propertiesPanel, elv.util.Property.PROPERTIES_NAME, stageCount + 1);
        
        nextButton.setText(new elv.util.Action(elv.util.Action.FINISH).toString());
      }
      else if(stageCount == 2)
      {
        elv.util.client.ClientStub.create(newUser);
        java.lang.String pathName = newUser.getFolderPath() + "/" + newUser.getPropertyFile();
        elv.util.client.ClientStub.storeProperties(pathName, newUser.getProperties());
        setVisible(false);
        dispose();
        return;
      }
      
      ((java.awt.CardLayout)propertiesContentPanel.getLayout()).next(propertiesContentPanel);
      stageLabels.next();
      stageCount ++;
    }
    catch(java.lang.IllegalArgumentException exc)
    {
      javax.swing.JOptionPane.showMessageDialog(this, elv.util.Util.translate(elv.util.Util.NAME_STATEMENT), new elv.util.State(elv.util.State.ERROR).toString(), javax.swing.JOptionPane.ERROR_MESSAGE);
      nameTextField.requestFocusInWindow();
      nameTextField.selectAll();
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
      try
      {
        elv.util.client.ClientStub.delete(newUser);
      }
      catch(java.lang.Exception ex)
      {
      }
    }
  }
  
  /**
   * Method for container next action.
   */
  private void containerNextAction()
  {
    try
    {
      if(stageCount == 0)
      {
        newContainer = null;
        selectedNewType = wizardTreePanel.getSelectedObject();
        
        nameTextField.requestFocusInWindow();
        previousButton.setEnabled(true);
        nextButton.setText(new elv.util.Action(elv.util.Action.FINISH).toString());
      }
      else if(stageCount == 1 && newContainer == null)
      {
        java.lang.String name = nameTextField.getText();
        newContainer = (elv.task.Container)((elv.task.Container)selectedNewType).clone();
        newContainer.setName(name);
        // Tests the given name.
        if(name.equals(""))
        {
          throw new java.lang.IllegalArgumentException(name);
        }
        java.util.Vector<elv.task.Container> containers = parentable.getChildren();
        if(containers == null) // No children loaded.
        {
          java.util.Vector<elv.util.Parentable> parentables = new java.util.Vector<elv.util.Parentable>();
          parentables.add(parentable);
          java.util.Vector<java.util.Vector> vectorOfChildren = elv.util.client.ClientStub.loadChildren(parentables);
          containers = vectorOfChildren.get(0);
        }
        for(elv.task.Container iteratorContainer : containers)
        {
          if(iteratorContainer.getName().equals(name))
          {
            newContainer = null;
            throw new java.lang.IllegalArgumentException(name);
          }
        }
        elv.util.client.ClientStub.create(newContainer);
        setVisible(false);
        dispose();
        return;
      }
      
      ((java.awt.CardLayout)propertiesContentPanel.getLayout()).next(propertiesContentPanel);
      stageLabels.next();
      stageCount ++;
    }
    catch(java.lang.IllegalArgumentException exc)
    {
      javax.swing.JOptionPane.showMessageDialog(this, elv.util.Util.translate(elv.util.Util.NAME_STATEMENT), new elv.util.State(elv.util.State.ERROR).toString(), javax.swing.JOptionPane.ERROR_MESSAGE);
      nameTextField.requestFocusInWindow();
      nameTextField.selectAll();
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
      try
      {
        elv.util.client.ClientStub.delete(newContainer);
      }
      catch(java.lang.Exception ex)
      {
      }
    }
  }
  
  /**
   * Method for task next action.
   */
  private void taskNextAction()
  {
    try
    {
      if(stageCount == 0)
      {
        if(selectedNewType != wizardTreePanel.getSelectedObject())
        {
          selectedNewType = wizardTreePanel.getSelectedObject();
          newTask = null;
          java.util.Vector<java.util.Vector<elv.util.parameters.Parameter>> parameters = new java.util.Vector<java.util.Vector<elv.util.parameters.Parameter>>();
        }
        nameTextField.requestFocusInWindow();
        previousButton.setEnabled(true);
      }
      else if(stageCount == 1 && newTask == null)
      {
        java.lang.String name = nameTextField.getText();
        newTask = (elv.task.Task)((elv.task.Task)selectedNewType).clone();
        newTask.setName(name);
        // Tests the given name.
        if(name.equals(""))
        {
          throw new java.lang.IllegalArgumentException(name);
        }
        java.util.Vector<elv.task.Task> tasks = parentable.getChildren();
        if(tasks == null) // No children loaded.
        {
          java.util.Vector<elv.util.Parentable> parentables = new java.util.Vector<elv.util.Parentable>();
          parentables.add(parentable);
          java.util.Vector<java.util.Vector> vectorOfChildren = elv.util.client.ClientStub.loadChildren(parentables);
          tasks = vectorOfChildren.get(0);
        }
        for(elv.task.Task iteratorTask : tasks)
        {
          if(newTask.equals(iteratorTask))
          {
            newTask = null;
            throw new java.lang.IllegalArgumentException(name);
          }
        }
        // Remove the task property panel.
        try
        {
          propertiesContentPanel.remove(stageCount + 1);
        }
        catch(java.lang.Exception exc)
        {
        }
        // Remove the executable panels and labels.
        for(int i = executableCount - 1; i >= 0; i--)
        {
          try
          {
            propertiesContentPanel.remove(propertiesContentPanel.getComponentCount() - 1);
            stageLabels.list.remove(stageLabels.list.size() - 2);
          }
          catch(java.lang.Exception exc)
          {
          }
        }
        // Remove the parameter panels and labels.
        for(int i = parameterCount - 1; i >= 0; i--)
        {
          try
          {
            propertiesContentPanel.remove(propertiesContentPanel.getComponentCount() - 1);
            stageLabels.list.remove(stageLabels.list.size() - 1);
          }
          catch(java.lang.Exception exc)
          {
          }
        }
        // Visualize the task properties.
        PropertiesPanel propertiesPanel = new PropertiesPanel(newTask);
        newTask.setProperties(propertiesPanel.getProperties()); // Workaroud for PropertiesPanel cloning.
        propertiesContentPanel.add(propertiesPanel, elv.util.Property.PROPERTIES_NAME);
        
        // Visualize the parameters.
        parameterCount = newTask.getParameterTypes().size();
        for(int i = 0; i < parameterCount; i++)
        {
          elv.util.parameters.Parameter parameterType = newTask.getParameterTypes().get(i);
          javax.swing.JPanel parametersPanel = null;
          if(parameterType instanceof elv.util.parameters.Interval)
          {
            parametersPanel = new IntervalsPanel(newTask, (elv.util.parameters.Interval)parameterType, (elv.task.Task)selectedNewType);
          }
          else if(parameterType instanceof elv.util.parameters.Settlement)
          {
            parametersPanel = new SettlementsPanel(newTask, (elv.util.parameters.Settlement)parameterType, (elv.task.Task)selectedNewType);
          }
          else if(parameterType instanceof elv.util.parameters.Diagnosis)
          {
            parametersPanel = new DiagnosisesPanel(newTask, (elv.util.parameters.Diagnosis)parameterType, (elv.task.Task)selectedNewType);
          }
          ((elv.util.Saveable)parametersPanel).setChanged(true);
          propertiesContentPanel.add(parametersPanel, parameterType.getTitle());
          stageLabels.list.add(4 + i, new Stage(false, false, "  4." + java.lang.String.valueOf(i + 1) + ".", parameterType.getTitle()));
        }
        // Visualize the executable properties.
        executableCount = newTask.getExecutables().size();
        for(int i = 0; i < executableCount; i++)
        {
          elv.task.executables.Executable executable = newTask.getExecutables().get(i);
          propertiesPanel = new ExecutablePropertiesPanel(executable, newTask, (elv.task.Task)selectedNewType);
          executable.setProperties(propertiesPanel.getProperties()); // Workaroud for PropertiesPanel cloneing.
          propertiesContentPanel.add(propertiesPanel, executable.getName());
          stageLabels.list.add(new Stage(false, false, "  5." + java.lang.String.valueOf(i + 1) + ".", executable.toString()));
        }
      }
      else if(stageCount == initializeCount + parameterCount + executableCount - 1)
      {
        nextButton.setText(new elv.util.Action(elv.util.Action.FINISH).toString());
      }
      else if(stageCount == initializeCount + parameterCount + executableCount)
      {
        elv.util.Property.get(elv.task.Task.STATE_NAME, newTask.getProperties()).setValue(new elv.util.State(elv.util.State.DEFINED));
        elv.util.Property.get(elv.task.Task.CREATED_NAME, newTask.getProperties()).setValue(new java.util.Date());
        elv.util.client.ClientStub.create(newTask);
        for(int i = 0; i < newTask.getParameterTypes().size(); i++)
        {
          ((elv.util.Saveable)propertiesContentPanel.getComponent(propertiesContentPanel.getComponentCount() - executableCount - i - 1)).save();
        }
        for(elv.task.executables.Executable iteratorExecutable : newTask.getExecutables())
        {
          java.lang.String pathName = newTask.getPropertyFolderPath() + "/" + iteratorExecutable.getPropertyFile();
          elv.util.client.ClientStub.storeProperties(pathName, iteratorExecutable.getProperties()); 
        }
        setVisible(false);
        dispose();
        return;
      }
      
      ((java.awt.CardLayout)propertiesContentPanel.getLayout()).next(propertiesContentPanel);
      stageLabels.next();
      stageCount ++;
    }
    catch(java.lang.IllegalArgumentException exc)
    {
      javax.swing.JOptionPane.showMessageDialog(this, elv.util.Util.translate(elv.util.Util.NAME_STATEMENT), new elv.util.State(elv.util.State.ERROR).toString(), javax.swing.JOptionPane.ERROR_MESSAGE);
      nameTextField.requestFocusInWindow();
      nameTextField.selectAll();
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
      try
      {
        elv.util.client.ClientStub.delete(newTask);
      }
      catch(java.lang.Exception ex)
      {
      }
    }
  }
  
  /**
   * Method for cancel action.
   */
  private void cancelAction()
  {
    setVisible(false);
    dispose();
  }
  
  /**
   * Inner class for a stage reprezentation.
   */
  private class Stage extends javax.swing.JLabel
  {
    
    /**
     * Variables.
     */
    private boolean isParent = false;
    
    /**
     * Constructor.
     * @param isParent reflects if this stage has descendant stages.
     * @param isExecuted shows if it is the current stage or not.
     * @param paragraph the pagraphical count of stage.
     * @param name the name of stage.
     */
    public Stage(boolean isParent, boolean isExecuted, java.lang.String paragraph, java.lang.String name) throws java.lang.Exception
    {
      this.isParent = isParent;
      if(isExecuted)
      {
        setIcon(new elv.util.State(elv.util.State.EXECUTED).getIcon());
      }
      else
      {
        setIcon(new elv.util.State(elv.util.State.UNDEFINED).getIcon());
      }
      setText(paragraph + " " + name);
    }
    
    /**
     * Method for setting the execution state.
     * @param isExecuted the execution state.
     */
    public void setExecuted(boolean isExecuted) throws java.lang.Exception
    {
      if(isExecuted)
      {
        setIcon(new elv.util.State(elv.util.State.EXECUTED).getIcon());
      }
      else
      {
        setIcon(new elv.util.State(elv.util.State.UNDEFINED).getIcon());
      }
    }
    
    /**
     * Method for getting the parent state.
     * @return true if is parent.
     */
    public boolean isParent()
    {
      return isParent;
    }
    
    /**
     * Method for setting the parent state.
     * @param isParent the parent state.
     */
    public void setParent(boolean isParent)
    {
      this.isParent = isParent;
    }
    
  }

  /**
   * Inner class for the representation of stages.
   */
  private class Stages
  {
    
    /**
     * Variables.
     */
    private java.util.Vector<Stage> list;
    private int executedIndex;
    
    /**
     * Constructor.
     */
    public Stages() throws java.lang.Exception
    {
      list = new java.util.Vector<Stage>();
      
      executedIndex = 0;
      Stage stageLabel = new Stage(false, true, "1.", elv.util.Util.translate(elv.util.Util.CHOOSE));
      stageLabel.setPreferredSize(new java.awt.Dimension(200, stageLabel.getPreferredSize().height));
      list.add(stageLabel);
      stagesContentPanel.add(stageLabel);
      propertiesTitleLabel.setText(stageLabel.getText());
      
      stageLabel = new Stage(false, false, "2.", elv.util.Util.translate(elv.util.Util.NAME));
      list.add(stageLabel);
      stagesContentPanel.add(stageLabel);
      if(parentable instanceof elv.util.Root || parentable instanceof elv.task.Container) // User or task.
      {
        stageLabel = new Stage(false, false, "3.", elv.util.Util.translate(elv.util.Property.PROPERTIES_NAME));
        list.add(stageLabel);
        stagesContentPanel.add(stageLabel);
      }
      if(parentable instanceof elv.task.Container) // Task.
      {
        stageLabel = new Stage(true, false, "4.", elv.util.Util.translate(elv.util.parameters.Parameter.TITLE));
        list.add(stageLabel);
        stagesContentPanel.add(stageLabel);
        stageLabel = new Stage(true, false, "5.", elv.util.Util.translate(elv.task.executables.Executable.EXECUTABLES_TITLE));
        list.add(stageLabel);
        stagesContentPanel.add(stageLabel);
      }
    }
    
    /**
     * Method for getting the <CODE>executedIndex</CODE> variable.
     * @return the execution index.
     */
    public int getExecutedIndex() throws java.lang.Exception
    {
      return executedIndex;
    }
    
    /**
     * Method for selecting the next stage label.
     */
    public void next() throws java.lang.Exception
    {
      list.get(executedIndex).setExecuted(false);
      executedIndex++;
      if(!list.get(executedIndex).isParent())
      {
        list.get(executedIndex).setExecuted(true);
      }
      else
      {
        executedIndex++;
        list.get(executedIndex).setExecuted(true);
        for(int i = executedIndex; i < list.size() && !list.get(i).isParent(); i++)
        {
          stagesContentPanel.add(list.get(i), i);
        }
      }
      propertiesTitleLabel.setText(list.get(executedIndex).getText());
      stagesContentPanel.repaint();
    }
    
    /**
     * Method for selecting the previous stage label.
     */
    public void previous() throws java.lang.Exception
    {
      list.get(executedIndex).setExecuted(false);
      executedIndex--;
      if(!list.get(executedIndex).isParent())
      {
        list.get(executedIndex).setExecuted(true);
      }
      else
      {
        int removedIndex = executedIndex + 1;
        for(int i = executedIndex + 1; i < list.size() && !list.get(i).isParent(); i++)
        {
          removedIndex = i;
        }
        for(int i = removedIndex; i >= executedIndex + 1; i--)
        {
          stagesContentPanel.remove(i);
        }
        executedIndex--;
        list.get(executedIndex).setExecuted(true);
      }
      propertiesTitleLabel.setText(list.get(executedIndex).getText());
      stagesContentPanel.repaint();
    }
    
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel buttonsOrientationPanel;
  private javax.swing.JPanel buttonsPanel;
  private javax.swing.JButton cancelButton;
  private javax.swing.JPanel mainPanel;
  private javax.swing.JSeparator mainSeparator;
  private javax.swing.JButton nextButton;
  private javax.swing.JButton previousButton;
  private javax.swing.JPanel propertiesContentPanel;
  private javax.swing.JPanel propertiesPanel;
  private javax.swing.JLabel propertiesTitleLabel;
  private javax.swing.JPanel propertiesTitlePanel;
  private javax.swing.JSeparator propertiesTitleSeparator;
  private javax.swing.JPanel stagesContentPanel;
  private javax.swing.JPanel stagesOrientationPanel;
  private javax.swing.JPanel stagesPanel;
  private javax.swing.JScrollPane stagesScrollPane;
  private javax.swing.JLabel stagesTitleLabel;
  private javax.swing.JPanel stagesTitlePanel;
  private javax.swing.JSeparator stagesTitleSeparator;
  private javax.swing.JSeparator verticalSeparator;
  // End of variables declaration//GEN-END:variables
 
}
