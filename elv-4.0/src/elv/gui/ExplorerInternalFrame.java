/*
 * ExplorerInternalFrame.java
 */
package elv.gui;

/**
 * Class for reprezenting an internal frame.
 * @author Elv
 */
public class ExplorerInternalFrame extends javax.swing.JInternalFrame implements java.io.Serializable
{
  
  /**
   * Variables.
   */
  private Manager managerFrame;
  private int type;

  /**
   * Constructor.
   * @param managerFrame the main manger frame.
   * @param type the type of frame.
   * @param title the title of frame.
   * @param icon the icon of frame.
   */
  public ExplorerInternalFrame(Manager managerFrame, int type, java.lang.String title, javax.swing.Icon icon)
  {
    this.managerFrame = managerFrame;
    this.type = type;
    try
    {
      initComponents();
      
      setTitle(title);
      setFrameIcon(icon);
      setLocation(((java.util.Vector<java.awt.Point>)elv.util.Property.get(elv.util.User.LOCATIONS_NAME, elv.util.Util.getActualUser().getProperties()).getValue()).get(type));
      setSize(((java.util.Vector<java.awt.Dimension>)elv.util.Property.get(elv.util.User.SIZES_NAME, elv.util.Util.getActualUser().getProperties()).getValue()).get(type));
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }
  
  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    explorerPopupMenu = new javax.swing.JPopupMenu();
    savePopupMenuItem = new javax.swing.JMenuItem();
    saveDocumentPopupMenuItem = new javax.swing.JMenuItem();
    explorerPopupMenuSeparator = new javax.swing.JSeparator();
    closePopupMenuItem = new javax.swing.JMenuItem();
    explorerTabbedPane = new javax.swing.JTabbedPane();

    savePopupMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
    savePopupMenuItem.setText(new elv.util.Action(elv.util.Action.SAVE).toString());
    savePopupMenuItem.setEnabled(false);
    savePopupMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        savePopupMenuItemActionPerformed(evt);
      }
    });

    explorerPopupMenu.add(savePopupMenuItem);

    saveDocumentPopupMenuItem.setText(new elv.util.Action(elv.util.Action.SAVE_DOCUMENTS).toString());
    saveDocumentPopupMenuItem.setEnabled(false);
    saveDocumentPopupMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        saveDocumentPopupMenuItemActionPerformed(evt);
      }
    });

    explorerPopupMenu.add(saveDocumentPopupMenuItem);

    explorerPopupMenu.add(explorerPopupMenuSeparator);

    closePopupMenuItem.setText(new elv.util.Action(elv.util.Action.CLOSE).toString());
    closePopupMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.CTRL_MASK));
    closePopupMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        closePopupMenuItemActionPerformed(evt);
      }
    });

    explorerPopupMenu.add(closePopupMenuItem);

    setClosable(true);
    setIconifiable(true);
    setResizable(true);
    setMaximizable(true);
    try
    {
      setSelected(true);
    } catch (java.beans.PropertyVetoException e1)
    {
      e1.printStackTrace();
    }
    setVisible(true);
    addInternalFrameListener(new javax.swing.event.InternalFrameListener()
    {
      public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
      {
        formInternalFrameActivated(evt);
      }
      public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
      {
        formInternalFrameClosed(evt);
      }
      public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
      {
        formInternalFrameClosing(evt);
      }
      public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
      {
      }
      public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
      {
      }
      public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
      {
      }
      public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
      {
      }
    });

    explorerTabbedPane.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mousePressed(java.awt.event.MouseEvent evt)
      {
        explorerTabbedPaneMousePressed(evt);
      }
      public void mouseReleased(java.awt.event.MouseEvent evt)
      {
        explorerTabbedPaneMouseReleased(evt);
      }
    });

    getContentPane().add(explorerTabbedPane, java.awt.BorderLayout.CENTER);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void saveDocumentPopupMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveDocumentPopupMenuItemActionPerformed
  {//GEN-HEADEREND:event_saveDocumentPopupMenuItemActionPerformed
     ((elv.util.Saveable)explorerTabbedPane.getSelectedComponent()).save();
  }//GEN-LAST:event_saveDocumentPopupMenuItemActionPerformed

  private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt)//GEN-FIRST:event_formInternalFrameActivated
  {//GEN-HEADEREND:event_formInternalFrameActivated
    try
    {
      boolean isChanged = ((elv.util.Saveable)explorerTabbedPane.getSelectedComponent()).isChanged();
      managerFrame.saveMenuItem.setEnabled(isChanged);
      managerFrame.saveButton.setEnabled(isChanged);
      if(type == elv.util.User.DOCUMENTS)
      {
        saveDocumentPopupMenuItem.setEnabled(true);
      }
      else
      {
        saveDocumentPopupMenuItem.setEnabled(false);
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }//GEN-LAST:event_formInternalFrameActivated

  /**
   * Method for Save action enabling.
   */
  private void explorerTabbedPaneMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_explorerTabbedPaneMousePressed
  {//GEN-HEADEREND:event_explorerTabbedPaneMousePressed
    try
    {
      boolean isChanged = ((elv.util.Saveable)explorerTabbedPane.getSelectedComponent()).isChanged();
      managerFrame.saveMenuItem.setEnabled(isChanged);
      managerFrame.saveButton.setEnabled(isChanged);
      if(type == elv.util.User.DOCUMENTS)
      {
        saveDocumentPopupMenuItem.setEnabled(true);
      }
      else
      {
        saveDocumentPopupMenuItem.setEnabled(false);
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }//GEN-LAST:event_explorerTabbedPaneMousePressed

  /**
   * Method for check saved state at form close.
   */
  private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt)//GEN-FIRST:event_formInternalFrameClosing
  {//GEN-HEADEREND:event_formInternalFrameClosing
    try
    {
      boolean haveToAsk = true;
      for(int i = 0; i < explorerTabbedPane.getTabCount(); i++)
      {
        if(((elv.util.Saveable)explorerTabbedPane.getComponentAt(i)).isChanged())
        {
          if(haveToAsk)
          {
            int returnOption = elv.util.Option.yesNoCancel(new elv.util.Action(elv.util.Action.SAVE_ALL).getQuestion(), elv.util.Util.translate(new elv.util.Action(elv.util.Action.SAVE_ALL).getName()));
            if(returnOption == javax.swing.JOptionPane.YES_OPTION)
            {
              setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
              haveToAsk = false;
            }
            else if(returnOption == javax.swing.JOptionPane.NO_OPTION)
            {
              setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
              break;
            }
            else if(returnOption == javax.swing.JOptionPane.CANCEL_OPTION)
            {
              setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
              break;
            }
          }
          ((elv.util.Saveable)explorerTabbedPane.getComponentAt(i)).save();
          managerFrame.setChanged(false);
        }
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }//GEN-LAST:event_formInternalFrameClosing

  /**
   * Method for popup-menu showing.
   */
  private void explorerTabbedPaneMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_explorerTabbedPaneMouseReleased
  {//GEN-HEADEREND:event_explorerTabbedPaneMouseReleased
    try
    {
      if(evt.getButton() == 3)
      {
        if(explorerTabbedPane.indexAtLocation(evt.getX(), evt.getY()) > -1)
        {
          savePopupMenuItem.setEnabled(((elv.util.Saveable)explorerTabbedPane.getSelectedComponent()).isChanged());
          explorerPopupMenu.show(evt.getComponent(), evt.getX(), evt.getY()); 
        }
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }//GEN-LAST:event_explorerTabbedPaneMouseReleased

  /**
   * Method for save action.
   */
  private void savePopupMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_savePopupMenuItemActionPerformed
  {//GEN-HEADEREND:event_savePopupMenuItemActionPerformed
    try
    {
      ((elv.util.Saveable)explorerTabbedPane.getSelectedComponent()).save();
      managerFrame.setChanged(false);
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }//GEN-LAST:event_savePopupMenuItemActionPerformed

  /**
   * Method for save frame size and location.
   */
  private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt)//GEN-FIRST:event_formInternalFrameClosed
  {//GEN-HEADEREND:event_formInternalFrameClosed
    try
    {
      storeFrame();
      explorerTabbedPane.removeAll();
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }//GEN-LAST:event_formInternalFrameClosed

  /**
   * Method for check saved state at tab close.
   */
  private void closePopupMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_closePopupMenuItemActionPerformed
  {//GEN-HEADEREND:event_closePopupMenuItemActionPerformed
    try
    {
      removeTab(explorerTabbedPane.getSelectedIndex());
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }//GEN-LAST:event_closePopupMenuItemActionPerformed

  /**
   * Method for adding a new tab, with the same parameters like at the <CODE>javax.swing.JTabbedPane</CODE>.
   * @param title the title text of the tab.
   * @param icon the icon text of the tab.
   * @param component the component which the tab contains.
   * @param toolTip the tooltip text of the tab.
   */
  public void addTab(java.lang.String title, javax.swing.Icon icon, java.awt.Component component, java.lang.String toolTip)
  {
    try
    {
      int index = -1;
      elv.util.Saveable newSaveable = (elv.util.Saveable)component;
      for(int i = 0; i < explorerTabbedPane.getTabCount(); i++)
      {
        elv.util.Saveable iteratorSaveable = (elv.util.Saveable)explorerTabbedPane.getComponentAt(i);
        if(iteratorSaveable.getOwner().equals(newSaveable.getOwner()))
        {
          if(newSaveable.getType() != null)
          {
            if(newSaveable.getType().getClass().isInstance(iteratorSaveable.getType()) &&
               newSaveable.getType().equals(iteratorSaveable.getType()))
            {
              index = i;
              break;
            }
          }
          else
          {
            index = i;
            break;
          }
        }
      }
      if(index == -1) // Not found.
      {
//        explorerTabbedPane.addTab(title, icon, component, toolTip);
        explorerTabbedPane.addTab(null, component);
        index = explorerTabbedPane.getTabCount() - 1;
        explorerTabbedPane.setTabComponentAt(index, new TabTitle(title, icon, toolTip));
        
        javax.swing.event.SwingPropertyChangeSupport changeSupport = newSaveable.getOwner().getChangeSupport();
        if(component instanceof DiagnosisesPanel)
        {
          changeSupport.addPropertyChangeListener(elv.task.executables.Preparation.NAME, new java.beans.PropertyChangeListener()
          {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
              deleteChange(evt);
            }
          });
        }
        changeSupport.addPropertyChangeListener(new elv.util.Action(elv.util.Action.RENAME).getName(), new java.beans.PropertyChangeListener()
        {
          public void propertyChange(java.beans.PropertyChangeEvent evt)
          {
            renameChange(evt);
          }
        });
        changeSupport.addPropertyChangeListener(new elv.util.Action(elv.util.Action.DELETE).getName(), new java.beans.PropertyChangeListener()
        {
          public void propertyChange(java.beans.PropertyChangeEvent evt)
          {
            deleteChange(evt);
          }
        });
        if(type == elv.util.User.DOCUMENTS || type == elv.util.User.PROGRESSES)
        {
          changeSupport.addPropertyChangeListener(new elv.util.Action(elv.util.Action.CLEAN).getName(), new java.beans.PropertyChangeListener()
          {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
              deleteChange(evt);
            }
          });
          changeSupport.addPropertyChangeListener(new elv.util.Action(elv.util.Action.REWIND).getName(), new java.beans.PropertyChangeListener()
          {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
              deleteChange(evt);
            }
          });
        }
      }
      explorerTabbedPane.setSelectedIndex((index >= 0 ? index : explorerTabbedPane.getTabCount() - 1));
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }
  
  /**
   * Method for removing a tab.
   * @param index The index of tab.
   */
  public void removeTab(int index)
  {
    try
    {
      if(((elv.util.Saveable)explorerTabbedPane.getComponentAt(index)).isChanged())
      {
        int returnOption = elv.util.Option.yesNoCancel(new elv.util.Action(elv.util.Action.SAVE).getQuestion(), elv.util.Util.translate(new elv.util.Action(elv.util.Action.SAVE).getName()));
        if(returnOption == javax.swing.JOptionPane.YES_OPTION)
        {
          ((elv.util.Saveable)explorerTabbedPane.getComponentAt(index)).save();
          managerFrame.setChanged(false);
        }
        else if(returnOption == javax.swing.JOptionPane.CANCEL_OPTION)
        {
          return;
        }
      }
      explorerTabbedPane.removeTabAt(index);
      if(explorerTabbedPane.getTabCount() < 1)
      {
        storeFrame();
        dispose();
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }
  
  /**
   * Method for storing the location and size of this frame.
   */
  private void storeFrame()
  {
    try
    {
      java.util.Vector<java.awt.Point> locations = (java.util.Vector<java.awt.Point>)elv.util.Property.get(elv.util.User.LOCATIONS_NAME, elv.util.Util.getActualUser().getProperties()).getValue();
      locations.set(type, getLocation());
      java.util.Vector<java.awt.Dimension> sizes = (java.util.Vector<java.awt.Dimension>)elv.util.Property.get(elv.util.User.SIZES_NAME, elv.util.Util.getActualUser().getProperties()).getValue();
      sizes.set(type, getSize());
      java.lang.String pathName = elv.util.Util.getActualUser().getFolderPath() + "/" + elv.util.Util.getActualUser().getPropertyFile();
      elv.util.client.ClientStub.storeProperties(pathName, elv.util.Util.getActualUser().getProperties());
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }
  
  /**
   * Method for returning the type of the internal frame.
   */
  public int getType()
  {
    return type;
  }
  
  /**
   * Method for rename change.
   * @param evt a <CODE>java.beans.PropertyChangeEvent</>code object.
   */
  private void renameChange(java.beans.PropertyChangeEvent evt)
  {
    try
    {
      for(int i = 0; i < explorerTabbedPane.getTabCount(); i++)
      {
        if(((elv.util.Saveable)explorerTabbedPane.getComponentAt(i)).getOwner().equals(evt.getOldValue()))
        {
          java.lang.String newTabTitle = ((java.lang.String[])evt.getNewValue())[0];
          java.lang.String newTabToolTipText = ((java.lang.String[])evt.getNewValue())[1];
          java.lang.Object type = ((elv.util.Saveable)explorerTabbedPane.getComponentAt(i)).getType();
          if(type != null)
          {
            if(type instanceof elv.util.parameters.Parameter)
            {
              newTabTitle += elv.util.Util.TITLE_SEPARATOR + ((elv.util.parameters.Parameter)type).getTitle();
            }
            else
            {
              newTabTitle += elv.util.Util.TITLE_SEPARATOR + type;
            }
          }
          ((TabTitle)explorerTabbedPane.getTabComponentAt(i)).setTitle(newTabTitle);
          ((TabTitle)explorerTabbedPane.getTabComponentAt(i)).setToolTipText(newTabToolTipText);
        }
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }
  
  /**
   * Method for delete change.
   * @param evt a <CODE>java.beans.PropertyChangeEvent</>code object.
   */
  private void deleteChange(java.beans.PropertyChangeEvent evt)
  {
    try
    {
      for(int i = 0; i < explorerTabbedPane.getTabCount(); i++)
      {
        if(((elv.util.Saveable)explorerTabbedPane.getComponentAt(i)).getOwner().equals(evt.getOldValue()))
        {
          explorerTabbedPane.removeTabAt(i);
          if(explorerTabbedPane.getTabCount() < 1)
          {
            storeFrame();
            dispose();
          }
        }
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }
  
  /** Inner class for tab title reprezentation. */
  public class TabTitle extends javax.swing.JPanel
  {
    private javax.swing.JLabel  tabTitleLabel;
    
    private TabTitle(java.lang.String title, javax.swing.Icon icon, java.lang.String toolTip)
    {
      tabTitleLabel = new javax.swing.JLabel(title);
      tabTitleLabel.setIcon(icon);
      tabTitleLabel.setIconTextGap(2);
// TODO: Need workaround!!!! Set the MouseMotionListeners of the tabbed pane.
//        tabTitleLabel.setToolTipText(toolTip);
      final javax.swing.JButton tabTitleButton = new javax.swing.JButton(new elv.util.Action(elv.util.Action.CLOSE).getIcon());
      tabTitleButton.setToolTipText(new elv.util.Action(elv.util.Action.CLOSE).toString());
      tabTitleButton.setFocusable(false);
      tabTitleButton.setBorderPainted(false);
      tabTitleButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
      tabTitleButton.setContentAreaFilled(false); // Use setContentAreaFilled instead of setOpaque()!!!
      tabTitleButton.addActionListener(new java.awt.event.ActionListener()
      {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
          int i = explorerTabbedPane.indexOfTabComponent(TabTitle.this);
          if(i != -1)
          {
            removeTab(i);
          }
        }
      });
      tabTitleButton.addMouseMotionListener(new java.awt.event.MouseMotionListener()
      {
        public void mouseDragged(java.awt.event.MouseEvent evt)
        {
          tabTitleButton.setContentAreaFilled(false);
        }

        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
          tabTitleButton.setContentAreaFilled(true);
        }
      });
      javax.swing.JToolBar tabTitleToolBar = new javax.swing.JToolBar();
      tabTitleToolBar.setOpaque(false);
      tabTitleToolBar.setFloatable(false);
      tabTitleToolBar.add(tabTitleButton);
      setOpaque(false);
      setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 0, 0));
      add(tabTitleLabel);
      add(tabTitleToolBar);

      explorerTabbedPane.addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
      {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
          tabTitleButton.setContentAreaFilled(false);
        }
      });
    }
    
    /**
     * Method for getting the tab title.
     * @return the tab title.
     */
    public java.lang.String getTitle()
    {
      return tabTitleLabel.getText();
    }
    
    /**
     * Method for setting the tab title.
     * @param title the new tab title.
     */
    public void setTitle(java.lang.String title)
    {
      tabTitleLabel.setText(title);
    }
    
    /**
     * Method for setting the tab tooltip text.
     * @param title the new tab title.
     */
    public void setToolTipText(java.lang.String toolTipText)
    {
// TODO: Need workaround!!!! Set the MouseMotionListeners of the tabbed pane.
//      tabTitleLabel.setToolTipText(toolTipText);
    }
    
    /**
     * Method for setting changed the tab title.
     * @param isChanged if true, the tab title followed by the CHANGED_MARK.
     */
    public void setChanged(boolean isChanged)
    {
      tabTitleLabel.setText(tabTitleLabel.getText().split(java.util.regex.Pattern.quote(elv.util.Util.CHANGED_MARK))[0] + (isChanged ? elv.util.Util.CHANGED_MARK : ""));
    }
    
  }
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem closePopupMenuItem;
  private javax.swing.JPopupMenu explorerPopupMenu;
  private javax.swing.JSeparator explorerPopupMenuSeparator;
  private javax.swing.JTabbedPane explorerTabbedPane;
  protected javax.swing.JMenuItem saveDocumentPopupMenuItem;
  protected javax.swing.JMenuItem savePopupMenuItem;
  // End of variables declaration//GEN-END:variables

}
