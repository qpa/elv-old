/*
 * DockingFrame.java
 */
package elv.gui;

/**
 * Class for reprezenting a docking frame.
 * @author Elv
 */
public class DockingFrame extends javax.swing.JTabbedPane
{
  
  // Variables.
  /** The change support. */
  private java.beans.PropertyChangeSupport changeSupport = new java.beans.PropertyChangeSupport(this);
  /** The parent multisplit docking panel */
  private MultiSplitDockingPanel msdPanel;
  /** The title of the frame. */
  private java.lang.String title;
  /** The icon of the frame. */
  private javax.swing.Icon icon;
  /** The tooltip text of the frame. */
  private java.lang.String toolTipText;
  /** The docking toggle button of this frame. */
  private javax.swing.JToggleButton toggleButton;
  
  /**
   * Constructor.
   * @param msdPanel the parent multisplit docking panel.
   * @param title the title of the frame.
   * @param icon the icon of the frame.
   * @param toolTipText the tooltip text of the frame.
   */
  public DockingFrame(MultiSplitDockingPanel msdPanel, java.lang.String title, javax.swing.Icon icon, java.lang.String toolTipText)
  {
    this.msdPanel = msdPanel;
    this.title = title;
    this.icon = icon;
    this.toolTipText = toolTipText;
    try
    {
      initComponents();
//      setSelectedIndex(-1);
//      addMouseListener(new java.awt.event.MouseAdapter()
//      {
//        public void mousePressed(java.awt.event.MouseEvent evt)
//        {
//          DockingFrame.this.msdPanel.setSelectedSplit(DockingFrame.this);
//        }
//      });

      final DockingHeader dockingHeader = new DockingHeader(title, icon, toolTipText);
      setTabComponentAt(0, dockingHeader);
      toggleButton = new javax.swing.JToggleButton();
      toggleButton.setFocusable(false);
      toggleButton.setSelected(true);
      toggleButton.setIcon(icon);
      toggleButton.setToolTipText(title);
      toggleButton.addActionListener(new java.awt.event.ActionListener()
      {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
          DockingFrame.this.msdPanel.setVisibleDockingComponent(DockingFrame.this, DockingFrame.this.toggleButton.isSelected());
        }
      });
      if(msdPanel.getDockingToolBar() != null)
      {
        msdPanel.getDockingToolBar().add(toggleButton);
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }
  
  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    containerPanel = new javax.swing.JPanel();
    noViewLabel = new javax.swing.JLabel();
    innerTabbedPane = new javax.swing.JTabbedPane();

    containerPanel.setLayout(new java.awt.CardLayout());
    containerPanel.add(noViewLabel, "Card.First");
    containerPanel.add(innerTabbedPane, "Card.Last");

    addTab(null, containerPanel);
  }// </editor-fold>//GEN-END:initComponents
  
  /**
   * Method for getting the property change support.
   * @return the change support object.
   */
  public java.beans.PropertyChangeSupport getChangeSupport()
  {
    return changeSupport;
  }
  
  /**
   * Method for getting the title of this frame.
   * @return the title text of the frame.
   */
  public java.lang.String getTitle()
  {
    return title;
  }
  
  /**
   * Method for getting the icon of this frame.
   * @param icon the icon of the frame.
   */
  public javax.swing.Icon getIcon()
  {
    return icon;
  }
  
  /**
   * Method for getting the tooltip text of this frame.
   * @param toolTip the tooltip text of the frame.
   */
  public java.lang.String getToolTipText()
  {
    return toolTipText;
  }
  
  /** Inner class for docking header reprezentation. */
  public class DockingHeader extends javax.swing.JPanel
  {
    /** The title label. */
    private javax.swing.JLabel  titleLabel;

    /**
     * Constructor
     * @param title the title of the frame.
     * @param icon the icon of the frame.
     * @param toolTipText the tooltip text of the frame.
     */
    private DockingHeader(java.lang.String title, javax.swing.Icon icon, java.lang.String toolTipText)
    {
      titleLabel = new javax.swing.JLabel(title);
      titleLabel.setIcon(icon);
      titleLabel.setIconTextGap(2);
// TODO: Need workaround!!!! Set the MouseMotionListeners of the tabbed pane.
//        tabTitleLabel.setToolTipText(toolTipText);
//      elv.util.Action minimizeAction = new elv.util.Action(elv.util.Action.MINIMIZE);
//      final javax.swing.JButton minimizeButton = new javax.swing.JButton(minimizeAction.getIcon());
//      minimizeButton.setToolTipText(minimizeAction.toString());
//      minimizeButton.setFocusable(false);
//      minimizeButton.setBorderPainted(false);
//      minimizeButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
//      minimizeButton.setContentAreaFilled(false); // Use setContentAreaFilled instead of setOpaque()!!!
//      minimizeButton.addActionListener(new java.awt.event.ActionListener()
//      {
//        public void actionPerformed(java.awt.event.ActionEvent evt)
//        {
//          msdPanel.setVisibleDockingComponent(DockingFrame.this, false);
//          toggleButton.setSelected(false);
//          minimizeButton.setContentAreaFilled(false);
//        }
//      });
//      minimizeButton.addMouseMotionListener(new java.awt.event.MouseMotionListener()
//      {
//        public void mouseDragged(java.awt.event.MouseEvent evt)
//        {
//          minimizeButton.setContentAreaFilled(false);
//        }
//
//        public void mouseMoved(java.awt.event.MouseEvent evt)
//        {
//          minimizeButton.setContentAreaFilled(true);
//        }
//      });
      final elv.util.Action closeAction = new elv.util.Action(elv.util.Action.CLOSE);
      final javax.swing.JButton closeButton = new javax.swing.JButton(closeAction.getIcon());
      closeButton.setToolTipText(closeAction.toString());
      closeButton.setFocusable(false);
      closeButton.setBorderPainted(false);
      closeButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
      closeButton.setContentAreaFilled(false); // Use setContentAreaFilled instead of setOpaque()!!!
      closeButton.addActionListener(new java.awt.event.ActionListener()
      {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
          boolean haveToAsk = true;
          int returnOption = javax.swing.JOptionPane.NO_OPTION;
          doOnClose(DockingFrame.this, haveToAsk, returnOption);
          if(returnOption != javax.swing.JOptionPane.CANCEL_OPTION)
          {
//            msdPanel.removeDockingComponent(DockingFrame.this);
//            if(msdPanel.getDockingToolBar() != null)
//            {
//              msdPanel.getDockingToolBar().remove(toggleButton);
//              msdPanel.getDockingToolBar().revalidate();
//            }
          msdPanel.setVisibleDockingComponent(DockingFrame.this, false);
          toggleButton.setSelected(false);
          closeButton.setContentAreaFilled(false);
          }
        }
      });
      closeButton.addMouseMotionListener(new java.awt.event.MouseMotionListener()
      {
        public void mouseDragged(java.awt.event.MouseEvent evt)
        {
          closeButton.setContentAreaFilled(false);
        }

        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
          closeButton.setContentAreaFilled(true);
        }
      });
      javax.swing.JToolBar tabTitleToolBar = new javax.swing.JToolBar();
      tabTitleToolBar.setOpaque(false);
      tabTitleToolBar.setFloatable(false);
//      tabTitleToolBar.add(minimizeButton);
      tabTitleToolBar.add(closeButton);
      setOpaque(false);
//      setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 0, 0));
//      add(tabTitleLabel);
//      add(tabTitleToolBar);
      setLayout(new java.awt.BorderLayout());
      add(titleLabel, java.awt.BorderLayout.WEST);
//        managerFrame.validate();
      DockingFrame.this.validate();
//  System.out.println(DockingFrame.this.getWidth());
      add(javax.swing.Box.createHorizontalStrut(DockingFrame.this.getWidth()), java.awt.BorderLayout.CENTER);
      add(tabTitleToolBar, java.awt.BorderLayout.EAST);

      tabTitleToolBar.addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
      {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
//          minimizeButton.setContentAreaFilled(false);
          closeButton.setContentAreaFilled(false);
        }
      });
      DockingFrame.this.addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
      {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
//          minimizeButton.setContentAreaFilled(false);
          closeButton.setContentAreaFilled(false);
        }
      });
    }

    protected void doOnClose(java.awt.Component component, boolean haveToAsk, int returnOption)
    {
      if(component instanceof java.awt.Container)
      {
        for(java.awt.Component iteratorComponent : ((java.awt.Container)component).getComponents())
        {
          doOnClose(iteratorComponent, haveToAsk, returnOption);
        }
      }
      else if(component instanceof elv.util.Saveable && ((elv.util.Saveable)component).isChanged())
      {
        if(haveToAsk)
        {
          returnOption = elv.util.Option.yesNoCancel(new elv.util.Action(elv.util.Action.SAVE_ALL).getQuestion(), elv.util.Util.translate(new elv.util.Action(elv.util.Action.SAVE_ALL).getName()));
          if(returnOption == javax.swing.JOptionPane.YES_OPTION)
          {
            haveToAsk = false;
          }
          else
          {
            return;
          }
        }
        if(returnOption == javax.swing.JOptionPane.YES_OPTION)
        {
          ((elv.util.Saveable)component).save();
          elv.util.Util.getMainFrame().getChangeSupport().firePropertyChange(Manager.MODIFIED, false, true);
        }
      }
    }
    
    /**
     * Method for getting the tab title.
     * @return the tab title.
     */
    public java.lang.String getTitle()
    {
      return titleLabel.getText();
    }

    /**
     * Method for setting the tab title.
     * @param title the new tab title.
     */
    public void setTitle(java.lang.String title)
    {
      titleLabel.setText(title);
    }

    /**
     * Method for setting the tab tooltip text.
     * @param toolTipText the new tooltip text.
     */
    public void setToolTipText(java.lang.String toolTipText)
    {
// TODO: Need workaround!!!! Set the MouseMotionListeners of the tabbed pane.
//      tabTitleLabel.setToolTipText(toolTipText);
    }

  }

  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel containerPanel;
  private javax.swing.JTabbedPane innerTabbedPane;
  private javax.swing.JLabel noViewLabel;
  // End of variables declaration//GEN-END:variables
  
}
