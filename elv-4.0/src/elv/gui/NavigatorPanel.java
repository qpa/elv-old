/*
 * NavigatorPanel.java
 */
package elv.gui;

/**
 * Class for displaying the parameters and the executables of a task.
 * @author Elv
 */
public class NavigatorPanel extends javax.swing.JPanel
{
  
  // Variables.
  /** The main frame. */
  private Manager mainFrame;
  /** The navigable task. */
  private elv.task.Task task;
  
  /**
   * Constructor.
   * @param mainFrame the main frame.
   * @param task the navigable task.
   */
  public NavigatorPanel(Manager mainFrame, elv.task.Task task)
  {
    this.mainFrame = mainFrame;
    this.task = task;
    initComponents();
    setTask(task);
    // Register view expansion on navigator tree.
    ViewExpansion.register(navigatorTree);
  }
  
  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    navigatorScrollPane = new javax.swing.JScrollPane();
    navigatorTree = new javax.swing.JTree();

    setLayout(new java.awt.BorderLayout());

    navigatorTree.setCellRenderer(new NavigatorTreeCellRenderer());
    navigatorTree.setModel(new NavigatorTreeModel(task));
    navigatorTree.setShowsRootHandles(true);
    navigatorTree.addTreeWillExpandListener(new javax.swing.event.TreeWillExpandListener()
    {
      public void treeWillCollapse(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException
      {
        navigatorTreeTreeWillCollapse(evt);
      }
      public void treeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException
      {
      }
    });
    navigatorTree.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        navigatorTreeMouseClicked(evt);
      }
    });
    navigatorScrollPane.setViewportView(navigatorTree);

    add(navigatorScrollPane, java.awt.BorderLayout.CENTER);
  }// </editor-fold>//GEN-END:initComponents

private void navigatorTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_navigatorTreeMouseClicked
  if(evt.getClickCount() == 2)
  {
    try
    {
      elv.util.Node treeNode = (elv.util.Node)navigatorTree.getLastSelectedPathComponent();
      if(treeNode != null)
      {
        mainFrame.navigatorAction(task, treeNode.getUserObject());
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(mainFrame, exc);
    }
    
  }
}//GEN-LAST:event_navigatorTreeMouseClicked

private void navigatorTreeTreeWillCollapse(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {//GEN-FIRST:event_navigatorTreeTreeWillCollapse
  // TODO add your handling code here:
}//GEN-LAST:event_navigatorTreeTreeWillCollapse
  
  /**
   * Method for setting a new task for the navigator panel.
   * @param task the new task.
   */
  public void setTask(elv.task.Task task)
  {
    this.task = task;
    final NavigatorTreeModel treeModel = new NavigatorTreeModel(task);
    navigatorTree.setModel(treeModel);
    task.getChangeSupport().addPropertyChangeListener(new elv.util.Action(elv.util.Action.RENAME).getName(), new java.beans.PropertyChangeListener()
    {
      public void propertyChange(java.beans.PropertyChangeEvent evt)
      {
        treeModel.nodeChanged((javax.swing.tree.TreeNode)treeModel.getRoot());
      }
    });
    task.getChangeSupport().addPropertyChangeListener(new elv.util.Action(elv.util.Action.DELETE).getName(), new java.beans.PropertyChangeListener()
    {
      public void propertyChange(java.beans.PropertyChangeEvent evt)
      {
        treeModel.setRoot(null);
      }
    });
    
  }
  
  /**
   * Inner class for the navigator tree cell rendering.
   */
  private class NavigatorTreeCellRenderer extends javax.swing.tree.DefaultTreeCellRenderer
  {
    
    /**
     * Overridden method from <CODE>javax.swing.tree.DefaultTreeCellRenderer</CODE>.
     */
    public java.awt.Component getTreeCellRendererComponent(javax.swing.JTree tree, java.lang.Object treeNode, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus)
    {
      super.getTreeCellRendererComponent(tree, treeNode, sel, expanded, leaf, row, hasFocus);
      try
      {
        setIcon(((elv.util.Node)treeNode).getIcon());
        setToolTipText(((elv.util.Node)treeNode).getToolTipText());
      }
      catch(java.lang.Exception exc)
      {
        elv.util.Error.showErrorMessage(this, exc);
      }
      return this;
    }
  }
  
  /**
   * Inner class for the navigator tree model.
   */
  protected class NavigatorTreeModel extends javax.swing.tree.DefaultTreeModel
  {
    
    /**
     * Constructor.
     * @param task the task of the tree 
     */
    public NavigatorTreeModel(elv.task.Task task)
    {
      super(new elv.util.Node(task));
      try
      {
        elv.util.Node rootNode = (elv.util.Node)getRoot();
        for(elv.util.parameters.Parameter iteratorParameter : task.getParameterTypes())
        {
          rootNode.add(new elv.util.Node(iteratorParameter));
        }
        for(elv.task.executables.Executable iteratorExecutable : task.getExecutables())
        {
          elv.util.Node iteratorNode = new elv.util.Node(iteratorExecutable);
          for(elv.task.executables.ExecutionFile iteratorFile : iteratorExecutable.getExecutionFiles())
          {
            iteratorNode.add(new elv.util.Node(iteratorFile));
          }
          rootNode.add(iteratorNode);
        }
      }
      catch (Exception exc)
      {
        elv.util.Error.showErrorMessage(mainFrame, exc);
      }
    }
  }

  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane navigatorScrollPane;
  private javax.swing.JTree navigatorTree;
  // End of variables declaration//GEN-END:variables
  
}
