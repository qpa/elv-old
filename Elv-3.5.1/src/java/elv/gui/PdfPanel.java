/*
 * PdfPanel.java
 */

package elv.gui;

/**
 * Class for PDF file viewing.
 * @author Qpa
 */
public class PdfPanel extends javax.swing.JPanel
{
  /**
   * Constants.
   */
  private final int HORIZONTAL_INSET = 10;
  private final int VERTICAL_INSET = 10;
  /** Page thumbnail height. */
  private final int THUMBNAIL_HEIGHT = 80;
  /** Page thumbnail width. */
  private final int THUMBNAIL_WIDTH = 60;
  private final java.lang.String[] ZOOM_VALUES = {"25%", "50%", "75%", "100%", "125%", "150%", "200%", "250%", "500%", "750%", "1000%",
    "Zoom.Page", "Zoom.Size", "Zoom.Width"};
  // Indices in the above array.
  private final int PAGE = 11;
  private final int SIZE = 12;
  private final int WIDTH = 13;
   /** The Unicode value of the DEGREE charcter. */
  private final java.lang.String DEGREE = "\u00B0";
   /** Predefined rotation values. */
  private final java.lang.String[] ROTATION_VALUES = {"0" + DEGREE, "90" + DEGREE, "180" + DEGREE, "270" + DEGREE};
  
  /**
   * Variables.
   */
  private java.net.URL documentURL;
  private org.jpedal.PdfDecoder pdfDecoder;
  private java.lang.String password = "";
  private int currentPage = 0;
  private float zoom = 1; // 1 = 100%.
  private java.lang.String[] zoomValues;
  /** The current rotation value. */
  private int rotation = 0; // 0 = 0 DEGREE.
  /** The page decoding status bar. */
  private org.jpedal.io.StatusBar statusBar;
  /** The current crop box. */
  private java.awt.Rectangle cropBox;
  /** The current media box. */
  private java.awt.Rectangle mediaBox;
  /** The annotations. */
  private org.jpedal.objects.PdfAnnots annotations;
  private int dividerLocation;
  private java.awt.Component parentComponent;
  private int wheelMovedCount = 1;
  
  /**
   * Constructor.
   * @param documentURL the URL of the document.
   */
  public PdfPanel(java.net.URL documentURL)
  {
    try
    {
      this.documentURL = documentURL;
      parentComponent = this;
      zoomValues = ZOOM_VALUES;
      zoomValues[PAGE] = elv.util.Util.translate(zoomValues[PAGE]);
      zoomValues[SIZE] = elv.util.Util.translate(zoomValues[SIZE]);
      zoomValues[WIDTH] = elv.util.Util.translate(zoomValues[WIDTH]);
      initComponents();
      initPdf();
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }
  
  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    splitPane = new javax.swing.JSplitPane();
    navigationTabbedPane = new javax.swing.JTabbedPane();
    bookmarkScrollPane = new javax.swing.JScrollPane();
    bookmarkTree = new javax.swing.JTree();
    thumbnailScrollPane = new javax.swing.JScrollPane();
    thumbnailToolBar = new javax.swing.JToolBar();
    pdfScrollPane = new javax.swing.JScrollPane();
    bottomPanel = new javax.swing.JPanel();
    dummyToolBar = new javax.swing.JToolBar();
    statusLabel = new javax.swing.JLabel();
    bottomToolBar = new javax.swing.JToolBar();
    navigationsToggleButton = new javax.swing.JToggleButton();
    zoomComboBox = new javax.swing.JComboBox();
    firstButton = new javax.swing.JButton();
    previousButton = new javax.swing.JButton();
    pageCountTextField = new javax.swing.JTextField();
    nextButton = new javax.swing.JButton();
    lastButton = new javax.swing.JButton();
    rotationComboBox = new javax.swing.JComboBox();
    progressToolBar = new javax.swing.JToolBar();

    setLayout(new java.awt.BorderLayout());

    splitPane.setDividerLocation(200);
    splitPane.setDividerSize(6);
    splitPane.setOneTouchExpandable(true);
    splitPane.addPropertyChangeListener(new java.beans.PropertyChangeListener()
    {
      public void propertyChange(java.beans.PropertyChangeEvent evt)
      {
        splitPanePropertyChange(evt);
      }
    });

    bookmarkTree.setToolTipText("");
    bookmarkTree.setCellRenderer(new BookmarkTreeCellRenderer());
    bookmarkTree.setRootVisible(false);
    bookmarkTree.setShowsRootHandles(true);
    bookmarkTree.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        bookmarkTreeMouseClicked(evt);
      }
    });

    bookmarkScrollPane.setViewportView(bookmarkTree);

    navigationTabbedPane.addTab(new elv.util.Action(elv.util.Action.BOOKMARKS).toString(), bookmarkScrollPane);

    thumbnailToolBar.setFloatable(false);
    thumbnailScrollPane.setViewportView(thumbnailToolBar);

    navigationTabbedPane.addTab(new elv.util.Action(elv.util.Action.THUMBNAILS).toString(), thumbnailScrollPane);

    splitPane.setLeftComponent(navigationTabbedPane);

    pdfScrollPane.addMouseWheelListener(new java.awt.event.MouseWheelListener()
    {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
      {
        pdfScrollPaneMouseWheelMoved(evt);
      }
    });

    splitPane.setRightComponent(pdfScrollPane);

    add(splitPane, java.awt.BorderLayout.CENTER);

    bottomPanel.setLayout(new java.awt.BorderLayout());

    dummyToolBar.setFloatable(false);
    dummyToolBar.setPreferredSize(new java.awt.Dimension(100, 10));
    dummyToolBar.add(statusLabel);

    bottomPanel.add(dummyToolBar, java.awt.BorderLayout.WEST);

    bottomToolBar.setFloatable(false);
    navigationsToggleButton.setIcon(new elv.util.Action(elv.util.Action.NAVIGATION).getIcon());
    navigationsToggleButton.setToolTipText(new elv.util.Action(elv.util.Action.NAVIGATION).toString());
    navigationsToggleButton.setBorderPainted(false);
    navigationsToggleButton.setFocusable(false);
    navigationsToggleButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
    navigationsToggleButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        navigationsToggleButtonActionPerformed(evt);
      }
    });

    bottomToolBar.add(navigationsToggleButton);

    zoomComboBox.setEditable(true);
    zoomComboBox.setMaximumRowCount(ZOOM_VALUES.length);
    zoomComboBox.setModel(new javax.swing.DefaultComboBoxModel(zoomValues));
    zoomComboBox.setSelectedItem((int)(zoom * 100) + "%");
    zoomComboBox.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        zoomComboBoxActionPerformed(evt);
      }
    });

    bottomToolBar.add(zoomComboBox);

    firstButton.setIcon(new elv.util.Action(elv.util.Action.FIRST_PAGE).getIcon());
    firstButton.setToolTipText(new elv.util.Action(elv.util.Action.FIRST_PAGE).toString());
    firstButton.setBorderPainted(false);
    firstButton.setFocusable(false);
    firstButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
    firstButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        firstButtonActionPerformed(evt);
      }
    });

    bottomToolBar.add(firstButton);

    previousButton.setIcon(new elv.util.Action(elv.util.Action.PREVIOUS_PAGE).getIcon());
    previousButton.setToolTipText(new elv.util.Action(elv.util.Action.PREVIOUS_PAGE).toString());
    previousButton.setBorderPainted(false);
    previousButton.setFocusable(false);
    previousButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
    previousButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        previousButtonActionPerformed(evt);
      }
    });

    bottomToolBar.add(previousButton);

    pageCountTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    pageCountTextField.setPreferredSize(new java.awt.Dimension(100, 19));
    pageCountTextField.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        pageCountTextFieldActionPerformed(evt);
      }
    });

    bottomToolBar.add(pageCountTextField);

    nextButton.setIcon(new elv.util.Action(elv.util.Action.NEXT_PAGE).getIcon());
    nextButton.setToolTipText(new elv.util.Action(elv.util.Action.NEXT_PAGE).toString());
    nextButton.setBorderPainted(false);
    nextButton.setFocusable(false);
    nextButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
    nextButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        nextButtonActionPerformed(evt);
      }
    });

    bottomToolBar.add(nextButton);

    lastButton.setIcon(new elv.util.Action(elv.util.Action.LAST_PAGE).getIcon());
    lastButton.setToolTipText(new elv.util.Action(elv.util.Action.LAST_PAGE).toString());
    lastButton.setBorderPainted(false);
    lastButton.setFocusable(false);
    lastButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
    lastButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        lastButtonActionPerformed(evt);
      }
    });

    bottomToolBar.add(lastButton);

    rotationComboBox.setMaximumRowCount(ROTATION_VALUES.length);
    rotationComboBox.setModel(new javax.swing.DefaultComboBoxModel(ROTATION_VALUES));
    rotationComboBox.setSelectedItem(rotation + DEGREE);
    rotationComboBox.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        rotationComboBoxActionPerformed(evt);
      }
    });

    bottomToolBar.add(rotationComboBox);

    bottomPanel.add(bottomToolBar, java.awt.BorderLayout.CENTER);

    progressToolBar.setFloatable(false);
    progressToolBar.setPreferredSize(new java.awt.Dimension(100, 10));
    bottomPanel.add(progressToolBar, java.awt.BorderLayout.EAST);

    add(bottomPanel, java.awt.BorderLayout.SOUTH);

  }// </editor-fold>//GEN-END:initComponents

  private void splitPanePropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_splitPanePropertyChange
  {//GEN-HEADEREND:event_splitPanePropertyChange
    try
    {
      int columnCount = ((javax.swing.JSplitPane)evt.getSource()).getLeftComponent().getWidth() / THUMBNAIL_HEIGHT;
      columnCount = columnCount == 0 ? 1 : columnCount;
      thumbnailToolBar.setLayout(new java.awt.GridLayout(0, columnCount));
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }//GEN-LAST:event_splitPanePropertyChange

  private void rotationComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rotationComboBoxActionPerformed
  {//GEN-HEADEREND:event_rotationComboBoxActionPerformed
    try
    {
      java.lang.String rotationString = ((java.lang.String)((javax.swing.JComboBox)evt.getSource()).getSelectedItem()).split(java.util.regex.Pattern.quote(DEGREE))[0].trim();
      int newRotationValue = java.lang.Integer.parseInt(rotationString);
      pdfDecoder.setPageRotation(newRotationValue);
      pdfDecoder.invalidate();
      pdfScrollPane.revalidate();
      repaint();
      rotation = newRotationValue;
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }//GEN-LAST:event_rotationComboBoxActionPerformed

  private void pdfScrollPaneMouseWheelMoved(java.awt.event.MouseWheelEvent evt)//GEN-FIRST:event_pdfScrollPaneMouseWheelMoved
  {//GEN-HEADEREND:event_pdfScrollPaneMouseWheelMoved
    java.awt.Rectangle wiewportRect = ((javax.swing.JScrollPane)evt.getSource()).getViewport().getViewRect();
    int pdfHeight = ((javax.swing.JScrollPane)evt.getSource()).getViewport().getView().getSize().height;
    if(pdfHeight <= wiewportRect.height)
    {
      if(evt.getWheelRotation() < 0 && currentPage > 1)
      {
        decodePage(currentPage - 1);
      }
      else if(evt.getWheelRotation() > 0 && currentPage < pdfDecoder.getPageCount())
      {
        decodePage(currentPage + 1);
      }
    }
    else
    {
      if(wiewportRect.y == 0 && currentPage > 1)
      {
        if(wheelMovedCount == 2)
        {
          decodePage(currentPage - 1, new java.awt.Point(wiewportRect.x, wiewportRect.height));
          wheelMovedCount = 1;
        }
        else
        {
          wheelMovedCount++;
        }
      }
      else if(wiewportRect.y + wiewportRect.height == pdfHeight && currentPage < pdfDecoder.getPageCount())
      {
        if(wheelMovedCount == 2)
        {
          decodePage(currentPage + 1, new java.awt.Point(wiewportRect.x, pdfHeight));
          wheelMovedCount = 1;
        }
        else
        {
          wheelMovedCount++;
        }
      }
    }
  }//GEN-LAST:event_pdfScrollPaneMouseWheelMoved

  private void bookmarkTreeMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_bookmarkTreeMouseClicked
  {//GEN-HEADEREND:event_bookmarkTreeMouseClicked
    javax.swing.JTree tree = (javax.swing.JTree)evt.getSource();
    javax.swing.tree.TreePath treePath = tree.getClosestPathForLocation(evt.getX(), evt.getY());
    if(tree.getPathBounds(treePath).contains(evt.getPoint()))
    {
      Bookmark bookmark = (Bookmark)((javax.swing.tree.DefaultMutableTreeNode)treePath.getLastPathComponent()).getUserObject();
      decodePage(bookmark.getPage(), bookmark.getPoint());
      tree.setSelectionPath(treePath);
    }
  }//GEN-LAST:event_bookmarkTreeMouseClicked

  private void navigationsToggleButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_navigationsToggleButtonActionPerformed
  {//GEN-HEADEREND:event_navigationsToggleButtonActionPerformed
    if(navigationTabbedPane.isVisible())
    {
      navigationTabbedPane.setVisible(false);
      dividerLocation = splitPane.getDividerLocation();
      splitPane.setDividerLocation(0);
    }
    else
    {
      navigationTabbedPane.setVisible(true);
      splitPane.setDividerLocation(dividerLocation);
    }
  }//GEN-LAST:event_navigationsToggleButtonActionPerformed

  private void zoomComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_zoomComboBoxActionPerformed
  {//GEN-HEADEREND:event_zoomComboBoxActionPerformed
    try
    {
      float newZoom = 1;
      java.lang.String zoomString = ((java.lang.String)((javax.swing.JComboBox)evt.getSource()).getSelectedItem()).split(java.util.regex.Pattern.quote("%"))[0].trim();
      if(zoomString.equals(zoomValues[PAGE]))
      {
        int width = pdfScrollPane.getViewport().getWidth() - 2 * HORIZONTAL_INSET;
        int height = pdfScrollPane.getViewport().getHeight() - 2 * VERTICAL_INSET;
        float widthPercentage = (float)width / cropBox.width;
        float heightPercentage = (float)height / cropBox.height;
        newZoom = widthPercentage < heightPercentage ? widthPercentage : heightPercentage;
      }
      else if(zoomString.equals(zoomValues[SIZE]))
      {
        newZoom = 1;
      }
      else if(zoomString.equals(zoomValues[WIDTH]))
      {
        int width = pdfScrollPane.getViewport().getWidth() - 2 * HORIZONTAL_INSET;
        newZoom = (float)width / cropBox.width;
      }
      else
      {
        newZoom = java.lang.Float.parseFloat(zoomString) / 100;
        if(newZoom <= 0 || newZoom > 10)
        {
          return;
        }
      }
      pdfDecoder.setPageParameters(newZoom, currentPage);
      pdfDecoder.setPageRotation(rotation);
      pdfDecoder.invalidate();
      pdfScrollPane.revalidate();
      repaint();
      zoom = newZoom;
    }
    catch(java.lang.NumberFormatException exc)
    {
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
    finally
    {
      ((javax.swing.JComboBox)evt.getSource()).setSelectedItem((int)(zoom * 100) + "%");
    }
  }//GEN-LAST:event_zoomComboBoxActionPerformed

  private void lastButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_lastButtonActionPerformed
  {//GEN-HEADEREND:event_lastButtonActionPerformed
    if(currentPage < pdfDecoder.getPageCount())
    {
      decodePage(pdfDecoder.getPageCount());
    }
  }//GEN-LAST:event_lastButtonActionPerformed

  private void nextButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_nextButtonActionPerformed
  {//GEN-HEADEREND:event_nextButtonActionPerformed
    if(currentPage < pdfDecoder.getPageCount())
    {
      decodePage(currentPage + 1);
    }
  }//GEN-LAST:event_nextButtonActionPerformed

  private void pageCountTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_pageCountTextFieldActionPerformed
  {//GEN-HEADEREND:event_pageCountTextFieldActionPerformed
    try
    {
      java.lang.String pageString = pageCountTextField.getText().split(java.util.regex.Pattern.quote("/"))[0].trim();
      int page = java.lang.Integer.parseInt(pageString);
      decodePage(page);
    }
    catch(java.lang.NumberFormatException exc)
    {
    }
    finally
    {
      pageCountTextField.setText(currentPage + " / " + pdfDecoder.getPageCount());
    }
  }//GEN-LAST:event_pageCountTextFieldActionPerformed

  private void previousButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_previousButtonActionPerformed
  {//GEN-HEADEREND:event_previousButtonActionPerformed
    if(currentPage > 1)
    {
      decodePage(currentPage - 1);
    }
  }//GEN-LAST:event_previousButtonActionPerformed

  private void firstButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_firstButtonActionPerformed
  {//GEN-HEADEREND:event_firstButtonActionPerformed
    if(currentPage != 1)
    {
      decodePage(1);
    }
  }//GEN-LAST:event_firstButtonActionPerformed
  
  /**
   * Method for initializing the PDF viewer.
   */
  private void initPdf() throws java.lang.Exception
  {
    bottomToolBar.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 1, 1));
    
    pdfDecoder = new org.jpedal.PdfDecoder();
    pdfDecoder.setPDFBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.BLACK, 1));
    pdfDecoder.setInset(HORIZONTAL_INSET, VERTICAL_INSET);
    pdfDecoder.createPageHostspots(new java.lang.String[]{"Other", "Text", "FileAttachment"}, "org/jpedal/examples/simpleviewer/annots/");
    pdfDecoder.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        highlightPage(null);
        decodeLink(evt.getPoint(), true);
      }
    });
    pdfDecoder.addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
    {
      public void mouseMoved(java.awt.event.MouseEvent evt)
      {
        decodeLink(evt.getPoint(), false);
      }
    });
    pdfScrollPane.getViewport().add(pdfDecoder);
    pdfScrollPane.getVerticalScrollBar().setUnitIncrement(10);
    pdfScrollPane.getHorizontalScrollBar().setUnitIncrement(10);
    statusBar = new org.jpedal.io.StatusBar();
    pdfDecoder.setStatusBarObject(statusBar);
    progressToolBar.add(statusBar.getStatusObject());
    statusBar.getStatusObject().setVisible(false);
    ((javax.swing.JProgressBar)statusBar.getStatusObject()).setStringPainted(false);
    pdfDecoder.openPdfFileFromURL(documentURL.toString());
    if (pdfDecoder.isEncrypted() && !pdfDecoder.isFileViewable())
    {
      javax.swing.JPasswordField pwField = new javax.swing.JPasswordField();
      int returnOption = elv.util.Option.okCancel(pwField, elv.util.Util.translate(elv.util.User.PASSWORD_NAME));
      if(returnOption == javax.swing.JOptionPane.OK_OPTION)
      {
        password = java.lang.String.valueOf(pwField.getPassword());
        pdfDecoder.setEncryptionPassword(password);
        pdfDecoder.verifyAccess();
      }
    }
    // Create bookmarks, if there are.
    bookmarkTree.getSelectionModel().setSelectionMode(javax.swing.tree.TreeSelectionModel.SINGLE_TREE_SELECTION);
    javax.swing.tree.DefaultMutableTreeNode rootTreeNode = new javax.swing.tree.DefaultMutableTreeNode("Root");
    if(pdfDecoder.hasOutline())
    {
      org.w3c.dom.Node node = pdfDecoder.getOutlineAsXML().getFirstChild();
      if(node != null)
      {
        addBookmarks(node, rootTreeNode);
      }
    }
    ((javax.swing.tree.DefaultTreeModel)bookmarkTree.getModel()).setRoot(rootTreeNode);
    // Create thumbnails.
    thumbnailScrollPane.getVerticalScrollBar().setUnitIncrement(THUMBNAIL_HEIGHT);
    thumbnailToolBar.setLayout(new java.awt.GridLayout(pdfDecoder.getPageCount(), 1));
    java.awt.image.BufferedImage blanckThumbnail = new java.awt.image.BufferedImage(THUMBNAIL_WIDTH, THUMBNAIL_HEIGHT, java.awt.image.BufferedImage.TYPE_INT_RGB);
    java.awt.Graphics2D graphics2d = (java.awt.Graphics2D)blanckThumbnail.getGraphics();
    graphics2d.setColor(java.awt.Color.WHITE);
    graphics2d.fill(new java.awt.Rectangle(0,0,THUMBNAIL_WIDTH - 1, THUMBNAIL_HEIGHT - 1));
    graphics2d.setColor(java.awt.Color.BLACK);
    graphics2d.draw(new java.awt.Rectangle(0,0,THUMBNAIL_WIDTH - 1, THUMBNAIL_HEIGHT - 1));
    for(int i = 1; i <= pdfDecoder.getPageCount(); i++)
    {
      final int page = i;
      javax.swing.ImageIcon thumbnailIcon = new javax.swing.ImageIcon(blanckThumbnail.getScaledInstance(-1, blanckThumbnail.getHeight(), java.awt.Image.SCALE_FAST));
      javax.swing.JToggleButton thumbnailButton = new javax.swing.JToggleButton(elv.util.Util.format(page), thumbnailIcon);
      thumbnailButton.setFocusable(false);
      thumbnailButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      thumbnailButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
      thumbnailButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
      thumbnailButton.addActionListener(new java.awt.event.ActionListener()
      {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
          decodePage(page);
        }
      });
      thumbnailToolBar.add(thumbnailButton);
      thumbnailScrollPane.revalidate();
      java.lang.Thread.yield();
    }
    decodePage(1);
  }
  
  /**
   * Method for decoding a page.
   * @param page the page number.
   */
  protected void decodePage(final int page)
  {
    decodePage(page, null, null);
  }  
  
  /**
   * Method for decoding a page and scrolling to the specified location.
   * @param page the page number.
   * @param location the scrolling point.
   */
  protected void decodePage(final int page, final java.awt.Point location)
  {
    decodePage(page, location, null);
  }
  
  /**
   * Method for decoding a page, scrolling to the specified location and highlighting the specified shapes..
   * @param page the page number.
   * @param scrollRectangle the scrolling rectangle.
   * @param shapes the highlightable shapes.
   */
  protected void decodePage(final int page, final java.awt.Point location, final java.util.Vector<? extends java.awt.Shape> shapes)
  {
    if(page > pdfDecoder.getPageCount() || page < 1)
    {
      return;
    }
    else if(page == currentPage)
    {
      highlightPage(shapes);
      if(location == null)
      {
        pdfDecoder.scrollRectToVisible(new java.awt.Rectangle(0, 0, 1, 1));
      }
      else
      {
        java.awt.Point decodedLocation = decodePoint(location);
        java.awt.Rectangle wiewportRect = pdfScrollPane.getViewport().getViewRect();
        pdfDecoder.scrollRectToVisible(new java.awt.Rectangle(decodedLocation.x, decodedLocation.y, wiewportRect.width, wiewportRect.height));
      }
      return;
    }
    elv.util.SwingWorker swingWorker = new elv.util.SwingWorker()
    {
      /**
       * Overridden method from <code>com.pdfindexer.util.SwingWorker</code>.
       */
      public java.lang.Object construct()
      {
        try
        {
          ((javax.swing.JProgressBar)statusBar.getStatusObject()).setValue(0);
          statusBar.getStatusObject().setVisible(true);
          // Disable modifications.
          zoomComboBox.setEnabled(false);
          rotationComboBox.setEnabled(false);
          pageCountTextField.setEnabled(false);
          firstButton.setEnabled(false);
          previousButton.setEnabled(false);
          nextButton.setEnabled(false);
          lastButton.setEnabled(false);
          // Decode page.
          pdfDecoder.decodePage(page);
          org.jpedal.objects.PdfPageData pdfPageData = pdfDecoder.getPdfPageData();
          cropBox = new java.awt.Rectangle(pdfPageData.getCropBoxX(page), pdfPageData.getCropBoxY(page),
            pdfPageData.getCropBoxWidth(page), pdfPageData.getCropBoxHeight(page));
          mediaBox = new java.awt.Rectangle(pdfPageData.getMediaBoxX(page), pdfPageData.getMediaBoxY(page),
            pdfPageData.getMediaBoxWidth(page), pdfPageData.getMediaBoxHeight(page));
          annotations = pdfDecoder.getPdfAnnotsData(null);
          pdfDecoder.setPageParameters(zoom, page);
          pdfDecoder.setPageRotation(rotation);
          pdfDecoder.invalidate();
          highlightPage(shapes);
          if(location == null)
          {
            pdfDecoder.scrollRectToVisible(new java.awt.Rectangle(0, 0, 1, 1));
          }
          else
          {
            java.awt.Point decodedLocation = decodePoint(location);
            java.awt.Rectangle wiewportRect = pdfScrollPane.getViewport().getViewRect();
            pdfDecoder.scrollRectToVisible(new java.awt.Rectangle(decodedLocation.x, decodedLocation.y, wiewportRect.width, wiewportRect.height));
          }
          // Set thumbnail.
          if(currentPage > 0)
          {
            javax.swing.JToggleButton button = (javax.swing.JToggleButton)thumbnailToolBar.getComponentAtIndex(currentPage - 1);
            button.setSelected(false);
          }
          final javax.swing.JToggleButton newButton = (javax.swing.JToggleButton)thumbnailToolBar.getComponentAtIndex(page - 1);
          newButton.setSelected(true);
          java.awt.Rectangle rectangle = thumbnailToolBar.getVisibleRect();
          if (!rectangle.contains(newButton.getBounds()))
          {
            thumbnailToolBar.scrollRectToVisible(newButton.getBounds());
          }
//          setThumbnails();
          // Enable modifications. 
          zoomComboBox.setEnabled(true);
          rotationComboBox.setEnabled(true);
          pageCountTextField.setEnabled(true);
          firstButton.setEnabled(page != 1);
          previousButton.setEnabled(page != 1);
          nextButton.setEnabled(page != pdfDecoder.getPageCount());
          lastButton.setEnabled(page != pdfDecoder.getPageCount());
          statusBar.getStatusObject().setVisible(false);
          pdfScrollPane.revalidate();
          pdfScrollPane.repaint();
          repaint();
          currentPage = page;
        }
        catch(java.lang.Exception exc)
        {
          elv.util.Error.showErrorMessage(parentComponent, exc);
        }
        finally
        {
          pageCountTextField.setText(currentPage + " / " + pdfDecoder.getPageCount());
        }
        return null;
      }
    };
    swingWorker.start();
  }
  
  /**
   * Method for setting the visible thumbnails.
   */
  protected void setThumbnails()
  {
    elv.util.SwingWorker swingWorker = new elv.util.SwingWorker()
    {
      /**
       * Overridden method from <code>com.pdfindexer.util.SwingWorker</code>.
       */
      public java.lang.Object construct()
      {
        try
        {
          java.awt.Rectangle visibleRect = thumbnailToolBar.getVisibleRect();
          for(int i = 0; i < pdfDecoder.getPageCount(); i++)
          {
            javax.swing.JButton thubnailButton = (javax.swing.JButton)thumbnailToolBar.getComponentAtIndex(i);
            if(visibleRect.intersects(thubnailButton.getBounds()))
            {
              java.awt.image.BufferedImage thumbnailImage = pdfDecoder.getPageAsThumbnail(i + 1);
              java.awt.Graphics2D g2=(java.awt.Graphics2D)thumbnailImage.getGraphics();
              g2.setColor(java.awt.Color.BLACK);
              g2.draw(new java.awt.Rectangle(0, 0, thumbnailImage.getWidth() - 1, thumbnailImage.getHeight() - 1));
              javax.swing.ImageIcon thumbnailIcon = new javax.swing.ImageIcon(thumbnailImage.getScaledInstance(-1, thumbnailImage.getHeight(), java.awt.image.BufferedImage.SCALE_FAST));
              thubnailButton.setIcon(thumbnailIcon);
            }
            java.lang.Thread.yield();
          }
        }
        catch(java.lang.Exception exc)
        {
          elv.util.Error.showErrorMessage(parentComponent, exc);
        }
        return null;
      }
    };
    swingWorker.start();
  }
  
  /**
   * Method for highlighting shapes on page.
   * @param shapes a vector of highlightable shapes.
   */
  protected void highlightPage(java.util.Vector<? extends java.awt.Shape> shapes)
  {
    try
    {
      if(shapes != null)
      {
        int size = shapes.size();
        java.awt.Shape[] boundingShapes = new java.awt.Shape[size];
        java.awt.geom.Rectangle2D[] dummyRectangles = new java.awt.geom.Rectangle2D[size];
        boolean[] areVisible = new boolean[size];
        java.awt.Color[] colors = new java.awt.Color[size];
        for(int i = 0; i < size; i++)
        {
          boundingShapes[i] = shapes.get(i);
          dummyRectangles[i] = new java.awt.Rectangle.Float(0, 0, 0, 0);
          areVisible[i] = true;
          colors[i] = java.awt.Color.MAGENTA;
        }
        pdfDecoder.setHighlightedZones(1, null, null, boundingShapes, null, null, dummyRectangles, areVisible, colors, null, null);
      }
      else
      {
        pdfDecoder.setHighlightedZones(1, null, null, null, null, null, null, null, null, null, null);
      }
      pdfDecoder.repaint();
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(parentComponent, exc);
    }
  }
  
  /**
   * Method for decoding point coordinates.
   * @param point the relative point.
   * @return the decoded absolute point.
   */
  private void decodeLink(java.awt.Point point, boolean mouseClicked)
  {
    try
    {
      pdfDecoder.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
      pdfDecoder.setToolTipText(null);
      statusLabel.setText(null);
      java.awt.Rectangle[] hotspots = pdfDecoder.getPageHotspots();
      if(hotspots != null)
      {          
        int annotationIndex = 0;
        for(java.awt.Rectangle iteratorHotspot : hotspots)
        {
          if(iteratorHotspot.contains(encodePoint(point)))
          {
            if(annotations.getAnnotSubType(annotationIndex).equals("Link"))
            {
              pdfDecoder.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
              java.util.Map annotationDetails = annotations.getAnnotRawData(annotationIndex);
              java.util.Map annotationAction = (java.util.Map)annotationDetails.get("A");
              if(annotationAction != null)
              {
                java.lang.String destination = "";
                if(annotationAction.get("S").equals("/GoTo"))
                {
                  destination = annotationAction.get("D").toString();
                  if(mouseClicked)
                  {
//                    int page = java.lang.Integer.parseInt((java.lang.String)annotationDetails.get("StructParent"));
//                    decodePage(page, parsePoint(destination));
                    elv.util.Option.ok(destination, "");
                  }
                }
                else if(annotationAction.get("S").equals("/URI"))
                {
                  destination = annotationAction.get("URI").toString();
                  java.util.StringTokenizer sT = new java.util.StringTokenizer(destination, "()");
                  destination = sT.nextToken();
                }
                pdfDecoder.setToolTipText(destination);
                statusLabel.setText(destination);
              }
            }
            break;
          }
          annotationIndex++;
        }
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(parentComponent, exc);
    }
  }
  
  /**
   * Method for encoding point coordinates.
   * @param point the absolute point.
   * @return the encoded relative point.
   */
  private java.awt.Point encodePoint(java.awt.Point point)
  {
    java.awt.Point decodedPoint = null;
    try
    {
      int dX = (int)((point.x - HORIZONTAL_INSET) / zoom);
      int dY = (int)((point.y - VERTICAL_INSET) / zoom);
      if(rotation == 90)
      {
        int tmp = (int)(dX + cropBox.y);
        dX = (int)(dY + cropBox.x);
        dY = tmp;	
      }
      else if(rotation == 180)
      {
        dX = mediaBox.width - (int)(dX + mediaBox.width - cropBox.width - cropBox.x);
        dY = (int)(dY + cropBox.y);
      }
      else if(rotation == 270)
      {
        int tmp = mediaBox.height - (int)(dX + mediaBox.height - cropBox.height - cropBox.y);
        dX = mediaBox.width - (int)(dY + mediaBox.width - cropBox.width - cropBox.x);
        dY = tmp;
      }
      else
      {
        dX = (int)(dX + cropBox.x);
        dY = mediaBox.height - (int)(dY + mediaBox.height - cropBox.height - cropBox.y);
      }
      decodedPoint = new java.awt.Point(dX, dY);
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(parentComponent, exc);
    }
    return decodedPoint;
  }
  
  /**
   * Method for decoding point coordinates.
   * @param point the relative point.
   * @return the decoded absolute point.
   */
  private java.awt.Point decodePoint(java.awt.Point point)
  {
    java.awt.Point decodedPoint = null;
    try
    {
      int dX = (int)java.lang.Math.floor(((float)(point.x) * zoom));
      int dY = (int)java.lang.Math.floor(((float)(point.y) * zoom));
      java.awt.Rectangle wiewportRect = pdfScrollPane.getViewport().getViewRect();
      if(rotation == 90)
      {
        int tmp = dX;
        dX = dY - wiewportRect.width;
        dY = tmp;	
      }
      else if(rotation == 180)
      {
        dX = pdfDecoder.getWidth() - dX;
        dY = dY - wiewportRect.height;
      }
      else if(rotation == 270)
      {
        int tmp = dX;
        dX = pdfDecoder.getWidth() - dY;
        dY = pdfDecoder.getHeight() - tmp;
      }
      else
      {
        dY = pdfDecoder.getHeight() - dY;
      }
      decodedPoint = new java.awt.Point(dX, dY);
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(parentComponent, exc);
    }
    return decodedPoint;
  }
  
  /**
   * Method for parsing a destination string.
   * @param destination the string reprezentation of the destination.
   * @return the parsed point.
   */
  private java.awt.Point parsePoint(java.lang.String destination)
  {
    java.awt.Point point = null;
    try
    {
      if(destination != null && destination.indexOf("/XYZ") != -1)
      {
        destination = destination.substring(destination.indexOf("/XYZ") + 4);
        java.util.StringTokenizer stringTokenizer = new java.util.StringTokenizer(destination, "[] ");
        java.lang.String x = stringTokenizer.nextToken();
        if(x.equals("null"))
        {
          x = "0";
        }
        java.lang.String y = stringTokenizer.nextToken();
        if(y.equals("null"))
        {
          y = "0";
        }
        point = new java.awt.Point((int)java.lang.Float.parseFloat(x), (int)java.lang.Float.parseFloat(y));
      }
      else if(destination != null && destination.indexOf("/FitH") != -1)
      {
        destination = destination.substring(destination.indexOf("/FitH") + 5);
        java.util.StringTokenizer stringTokenizer = new java.util.StringTokenizer(destination, "[] ");
        java.lang.String y = stringTokenizer.nextToken();
        if(y.equals("null"))
        {
          y = "0";
        }
        point = new java.awt.Point(0, (int)java.lang.Float.parseFloat(y));
      }
      else if(destination != null && destination.indexOf("/FitV") != -1)
      {
        destination = destination.substring(destination.indexOf("/FitV") + 5);
        java.util.StringTokenizer stringTokenizer = new java.util.StringTokenizer(destination, "[] ");
        java.lang.String x = stringTokenizer.nextToken();
        if(x.equals("null"))
        {
          x = "0";
        }
        point = new java.awt.Point((int)java.lang.Float.parseFloat(x), 0);
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(parentComponent, exc);
    }
    return point;
  }
  
  /**
   * Method for adding the bookmarks.
   * @param node a bookmark node.
   * @param treeNode a tree node. 
   */
  private void addBookmarks(org.w3c.dom.Node node, javax.swing.tree.DefaultMutableTreeNode treeNode)
  {
    try
    {
      org.w3c.dom.NodeList nodeList = node.getChildNodes();
      for(int j = 0; j < nodeList.getLength(); j++)
      {
        org.w3c.dom.Element element = (org.w3c.dom.Element)nodeList.item(j);
        javax.swing.tree.DefaultMutableTreeNode childTreeNode = new javax.swing.tree.DefaultMutableTreeNode(new Bookmark(element));
        treeNode.add(childTreeNode);
        if(element.hasChildNodes())
        {
          addBookmarks(element, childTreeNode);
        }
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }
  
  /**
   * Inner class for bookmark reprezentation.
   */
  private class Bookmark
  {
    /**
     * Variables.
     */
    private java.lang.String title;
    private int page;
    private java.awt.Point point;
    
    /**
     * Constructor.
     */
    public Bookmark(org.w3c.dom.Element element)
    {
      title = element.getAttribute("title");
      try
      {
        page = java.lang.Integer.parseInt(element.getAttribute("page"));
      }
      catch(java.lang.Exception exc)
      {
        page = 0;
      }
      java.lang.String destination = element.getAttribute("Dest");
      if(destination == null || destination.equals(""))
      {
        destination = element.getAttribute("D");
      }
      point = parsePoint(destination);
      java.lang.String link = element.getAttribute("objectRef");
    }
    
    /**
     * Method for getting the page of this bookmark.
     * @return the page number.
     */
    public int getPage()
    {
      return page;
    }
    
    /**
     * Method for getting the point of this bookmark.
     * @return the point.
     */
    public java.awt.Point getPoint()
    {
      return point;
    }
    
    /**
     * Overridden method from <CODE>java.lang.Object</CODE>.
     * @return the string reprezentation of this bookmark.
     */
    public java.lang.String toString()
    {
      return title;
    }
    
  }
  
  /**
   * Class for bookmark tree cell rendering.
   */
  public static class BookmarkTreeCellRenderer extends javax.swing.tree.DefaultTreeCellRenderer
  {
    
    /**
     * Overridden method from <CODE>javax.swing.tree.DefaultTreeCellRenderer</CODE>.
     */
    public java.awt.Component getTreeCellRendererComponent(javax.swing.JTree tree, java.lang.Object treeNode, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus)
    {
      super.getTreeCellRendererComponent(tree, treeNode, sel, expanded, leaf, row, hasFocus);
      try
      {
        setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/page.gif")));
        setToolTipText(treeNode.toString());
      }
      catch(java.lang.Exception exc)
      {
        elv.util.Error.showErrorMessage(this, exc);
      }
      return this;
    }
    
  }
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane bookmarkScrollPane;
  private javax.swing.JTree bookmarkTree;
  private javax.swing.JPanel bottomPanel;
  private javax.swing.JToolBar bottomToolBar;
  private javax.swing.JToolBar dummyToolBar;
  private javax.swing.JButton firstButton;
  private javax.swing.JButton lastButton;
  private javax.swing.JTabbedPane navigationTabbedPane;
  private javax.swing.JToggleButton navigationsToggleButton;
  private javax.swing.JButton nextButton;
  private javax.swing.JTextField pageCountTextField;
  private javax.swing.JScrollPane pdfScrollPane;
  private javax.swing.JButton previousButton;
  private javax.swing.JToolBar progressToolBar;
  private javax.swing.JComboBox rotationComboBox;
  private javax.swing.JSplitPane splitPane;
  private javax.swing.JLabel statusLabel;
  private javax.swing.JScrollPane thumbnailScrollPane;
  private javax.swing.JToolBar thumbnailToolBar;
  private javax.swing.JComboBox zoomComboBox;
  // End of variables declaration//GEN-END:variables
  
}
