/*
 * TextPanel.java
 */

package elv.gui;

/**
 * Class for plain text, HTML and RTF file viewing.
 * @author Qpa
 */
public class TextPanel extends javax.swing.JPanel
{
 
  /**
   * Variables.
   */
  private java.net.URL documentURL;
  private java.net.URL htmlDocumentURL;
  
  private java.awt.Component parentComponent;
  
  /**
   * Constructor.
   * @param documentURL the URL of the document.
   * @param htmlDocumentURL the URL of the document in HTML style (if there it is).
   */
  public TextPanel(java.net.URL documentURL, java.net.URL htmlDocumentURL)
  {
    try
    {
      this.documentURL = documentURL;
      this.htmlDocumentURL = htmlDocumentURL;
      parentComponent = this;
      initComponents();
      initText();
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }
  
  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    textScrollPane = new javax.swing.JScrollPane();
    textEditorPane = new javax.swing.JEditorPane();
    bottomToolBar = new javax.swing.JToolBar();
    plainButton = new javax.swing.JButton();
    htmlButton = new javax.swing.JButton();

    setLayout(new java.awt.BorderLayout());

    textEditorPane.setEditable(false);
    textEditorPane.setContentType("text/plain; charset=" + elv.util.Util.FILE_ENCODING);
    textScrollPane.setViewportView(textEditorPane);

    add(textScrollPane, java.awt.BorderLayout.CENTER);

    bottomToolBar.setFloatable(false);
    plainButton.setIcon(new elv.util.Action(elv.util.Action.PLAIN).getIcon());
    plainButton.setToolTipText(new elv.util.Action(elv.util.Action.PLAIN).toString());
    plainButton.setBorderPainted(false);
    plainButton.setFocusable(false);
    plainButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
    plainButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        plainButtonActionPerformed(evt);
      }
    });

    bottomToolBar.add(plainButton);

    htmlButton.setIcon(new elv.util.Action(elv.util.Action.HTML).getIcon());
    htmlButton.setToolTipText(new elv.util.Action(elv.util.Action.HTML).toString());
    htmlButton.setBorderPainted(false);
    htmlButton.setFocusable(false);
    htmlButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
    htmlButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        htmlButtonActionPerformed(evt);
      }
    });

    bottomToolBar.add(htmlButton);

    add(bottomToolBar, java.awt.BorderLayout.SOUTH);

  }// </editor-fold>//GEN-END:initComponents

  private void htmlButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_htmlButtonActionPerformed
  {//GEN-HEADEREND:event_htmlButtonActionPerformed
    try
    {
      elv.util.SwingWorker swingWorker = new elv.util.SwingWorker()
      {
        public java.lang.Object construct()
        {
          try
          {
            textEditorPane.setPage(htmlDocumentURL);
            textScrollPane.revalidate();
          }
          catch(java.lang.Exception exc)
          {
            elv.util.Error.showErrorMessage(parentComponent, exc);
          }
          return null;
        }
      };
      swingWorker.setThreadPriority(java.lang.Thread.MIN_PRIORITY);
      swingWorker.start();
      htmlButton.setEnabled(false);
      if(documentURL != null)
      {
        plainButton.setEnabled(true);
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }//GEN-LAST:event_htmlButtonActionPerformed

  private void plainButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_plainButtonActionPerformed
  {//GEN-HEADEREND:event_plainButtonActionPerformed
    try
    {
      elv.util.SwingWorker swingWorker = new elv.util.SwingWorker()
      {
        public java.lang.Object construct()
        {
          try
          {
            textEditorPane.setPage(documentURL);
            textScrollPane.revalidate();
          }
          catch(java.lang.Exception exc)
          {
            elv.util.Error.showErrorMessage(parentComponent, exc);
          }
          return null;
        }
      };
      swingWorker.setThreadPriority(java.lang.Thread.MIN_PRIORITY);
      swingWorker.start();
      plainButton.setEnabled(false);
      if(htmlDocumentURL != null)
      {
        htmlButton.setEnabled(true);
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }//GEN-LAST:event_plainButtonActionPerformed
  
  /**
   * Method for initializing the text viewer.
   */
  private void initText() throws java.lang.Exception
  {
    bottomToolBar.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 1));
    textEditorPane.putClientProperty(javax.swing.JEditorPane.HONOR_DISPLAY_PROPERTIES, java.lang.Boolean.TRUE);
    if(documentURL != null)
    {
      elv.util.SwingWorker swingWorker = new elv.util.SwingWorker()
      {
        public java.lang.Object construct()
        {
          try
          {
            textEditorPane.setPage(documentURL);
            textScrollPane.revalidate();
          }
          catch(java.lang.Exception exc)
          {
            elv.util.Error.showErrorMessage(parentComponent, exc);
          }
          return null;
        }
      };
      swingWorker.setThreadPriority(java.lang.Thread.MIN_PRIORITY);
      swingWorker.start();
      plainButton.setEnabled(false);
      if(htmlDocumentURL != null)
      {
        htmlButton.setEnabled(true);
      }
    }
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JToolBar bottomToolBar;
  private javax.swing.JButton htmlButton;
  private javax.swing.JButton plainButton;
  private javax.swing.JEditorPane textEditorPane;
  private javax.swing.JScrollPane textScrollPane;
  // End of variables declaration//GEN-END:variables
  
}
