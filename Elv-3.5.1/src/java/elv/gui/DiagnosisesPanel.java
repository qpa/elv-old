/*
 * DiagnosisesPanel.java
 */
package elv.gui;

/**
 * Class for editing one type of diagnosises.
 * @author Qpa
 */
public class DiagnosisesPanel extends javax.swing.JPanel implements elv.util.Saveable
{
  
  // Variables.
  /** The owner task. */
  private elv.task.Task task;
  /** The type of diagnosises. */
  private elv.util.parameters.Diagnosis parameterType;
  /** The diagnosises. */
  private java.util.Vector<elv.util.parameters.Diagnosis> diagnosises;
  /** The changed state of diagnosises. */
  private boolean isChanged = false;
  /** The state of the owner task. */
  private elv.util.State state;
  /** The state of changeability. */
  private boolean isEnabled = true;
  
  /**
   * Constructor.
   * @param diagnosises a vector of diagnosises.
   * @param parameterType the type of diagnosises.
   * @param cloneableTask the task with the cloneable diagnosises.
   */
  public DiagnosisesPanel(elv.task.Task task, elv.util.parameters.Diagnosis parameterType, elv.task.Task cloneableTask)
  {
    this.task = task;
    this.parameterType = parameterType;
    try
    {
      state = (elv.util.State)elv.util.Property.get(elv.task.Task.STATE_NAME, task.getProperties()).getValue();
      isEnabled = (!(task.getContainer() instanceof elv.task.Archive) && 
        (state.equals(new elv.util.State(elv.util.State.UNDEFINED)) ||
        state.equals(new elv.util.State(elv.util.State.DEFINED)) ||
        state.equals(new elv.util.State(elv.util.State.SCHEDULED))));
      if(state.equals(new elv.util.State(elv.util.State.UNDEFINED)))
      {
        diagnosises = new java.util.Vector<elv.util.parameters.Diagnosis>();
        if(cloneableTask != null)
        {
          elv.util.State cloneState = (elv.util.State)elv.util.Property.get(elv.task.Task.STATE_NAME, cloneableTask.getProperties()).getValue();
          if(!cloneState.equals(new elv.util.State(elv.util.State.UNDEFINED)))
          {
            if(cloneableTask.getContainer() instanceof elv.task.Archive)
            {
              java.lang.String name = cloneableTask.getName() + elv.util.Util.ZIP_SEPARATOR + cloneableTask.PROPERTY_FOLDER + elv.util.Util.ZIP_SEPARATOR + parameterType.getFile();
              diagnosises = elv.util.client.ClientStub.loadParameters(cloneableTask.getContainer().getFolderPath(), name, parameterType);
            }
            else
            {
              diagnosises = elv.util.client.ClientStub.loadParameters(cloneableTask.getPropertyFolderPath(), parameterType.getFile(), parameterType);
            }
          }
        }
      }
      else
      {
        if(task.getContainer() instanceof elv.task.Archive)
        {
          java.lang.String name = task.getName() + elv.util.Util.ZIP_SEPARATOR + task.PROPERTY_FOLDER + elv.util.Util.ZIP_SEPARATOR + parameterType.getFile();
          diagnosises = elv.util.client.ClientStub.loadParameters(task.getContainer().getFolderPath(), name, parameterType);
        }
        else
        {
          diagnosises = elv.util.client.ClientStub.loadParameters(task.getPropertyFolderPath(), parameterType.getFile(), parameterType);
        }
      }
      // Set state change support.
      task.getChangeSupport().addPropertyChangeListener(elv.util.State.TITLE, new java.beans.PropertyChangeListener()
      {
        public void propertyChange(java.beans.PropertyChangeEvent evt)
        {
          stateChange(evt);
        }
      });
      
      initComponents();
      setEnabled(isEnabled);
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }
  
  /** 
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents()//GEN-BEGIN:initComponents
  {
    diagnosisesScrollPane = new javax.swing.JScrollPane();
    diagnosisesTree = new javax.swing.JTree();
    diagnosisesButtonOrientationPanel = new javax.swing.JPanel();
    diagnosisesButtonPanel = new javax.swing.JPanel();
    addButton = new javax.swing.JButton();
    removeButton = new javax.swing.JButton();

    setLayout(new java.awt.BorderLayout());

    diagnosisesTree.setCellRenderer(new elv.util.Util.DefaultTreeCellRenderer());
    diagnosisesTree.setModel(new DiagnosisesTreeModel());
    diagnosisesTree.setRootVisible(false);
    diagnosisesTree.setShowsRootHandles(true);
    diagnosisesTree.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        diagnosisesTreeMouseClicked(evt);
      }
    });

    diagnosisesScrollPane.setViewportView(diagnosisesTree);

    add(diagnosisesScrollPane, java.awt.BorderLayout.CENTER);

    diagnosisesButtonOrientationPanel.setLayout(new java.awt.BorderLayout());

    diagnosisesButtonPanel.setLayout(new java.awt.GridLayout(0, 1));

    addButton.setText("+");
    addButton.setToolTipText(new elv.util.Action(elv.util.Action.ADD).toString());
    addButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        addButtonActionPerformed(evt);
      }
    });

    diagnosisesButtonPanel.add(addButton);

    removeButton.setText("-");
    removeButton.setToolTipText(new elv.util.Action(elv.util.Action.REMOVE).toString());
    removeButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        removeButtonActionPerformed(evt);
      }
    });

    diagnosisesButtonPanel.add(removeButton);

    diagnosisesButtonOrientationPanel.add(diagnosisesButtonPanel, java.awt.BorderLayout.NORTH);

    add(diagnosisesButtonOrientationPanel, java.awt.BorderLayout.EAST);

  }//GEN-END:initComponents

  private void diagnosisesTreeMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_diagnosisesTreeMouseClicked
  {//GEN-HEADEREND:event_diagnosisesTreeMouseClicked
    setEnabled(isEnabled);
  }//GEN-LAST:event_diagnosisesTreeMouseClicked

  /**
   * Method for Add button action.
   */
  private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
  {//GEN-HEADEREND:event_addButtonActionPerformed
    try
    {
      javax.swing.JTree allDiagnosisesTree = new javax.swing.JTree();
      allDiagnosisesTree.setRootVisible(false);
      allDiagnosisesTree.setShowsRootHandles(true);
      allDiagnosisesTree.setCellRenderer(new elv.util.Util.DefaultTreeCellRenderer());
      allDiagnosisesTree.setModel(new javax.swing.tree.DefaultTreeModel(new javax.swing.tree.DefaultMutableTreeNode())
      {
        
        /**
         * Overridden constructor.
         */
        {
          javax.swing.tree.DefaultMutableTreeNode nodeLevels[] = new javax.swing.tree.DefaultMutableTreeNode[10];
          javax.swing.tree.DefaultMutableTreeNode node = null;
          nodeLevels[0] = new javax.swing.tree.DefaultMutableTreeNode(parameterType.getDefault());
          java.util.Vector<elv.util.parameters.Diagnosis> diagnosises = parameterType.getAllDiagnosises();
          for(elv.util.parameters.Diagnosis iteratorDiagnosis : diagnosises)
          {
            node = new javax.swing.tree.DefaultMutableTreeNode(iteratorDiagnosis);
            nodeLevels[iteratorDiagnosis.getParagraphLevel()] = node;
            nodeLevels[iteratorDiagnosis.getParagraphLevel()-1].add(node);
          }
          setRoot(nodeLevels[0]);
        }
        
      });
      javax.swing.JScrollPane allDiagnosisesScrollPane = new javax.swing.JScrollPane();
      allDiagnosisesScrollPane.setViewportView(allDiagnosisesTree);
      int returnOption = elv.util.Option.okCancel(allDiagnosisesScrollPane, parameterType.getTitle());
      if(returnOption == javax.swing.JOptionPane.OK_OPTION && allDiagnosisesTree.getSelectionPaths() != null)
      {
        javax.swing.tree.DefaultTreeModel treeModel = (javax.swing.tree.DefaultTreeModel)diagnosisesTree.getModel();
        javax.swing.tree.DefaultMutableTreeNode rootNode = (javax.swing.tree.DefaultMutableTreeNode)diagnosisesTree.getModel().getRoot();
        javax.swing.tree.DefaultMutableTreeNode node;
        javax.swing.tree.TreeNode[] parentNodes;
        elv.util.parameters.Diagnosis diagnosis;
        for(int i = 0; i<allDiagnosisesTree.getSelectionPaths().length; i++)
        {
          node = (javax.swing.tree.DefaultMutableTreeNode)allDiagnosisesTree.getSelectionPaths()[i].getLastPathComponent();
          if(!isNodeChild(node, rootNode))
          {
            setChanged(true);
            elv.util.Util.getMainFrame().setChanged(true);
            treeModel.insertNodeInto(node, rootNode, rootNode.getChildCount());
            if(i == 0)
            {
              diagnosisesTree.scrollPathToVisible(new javax.swing.tree.TreePath(node.getPath()));
            }
            for(java.util.Enumeration e = node.preorderEnumeration(); e.hasMoreElements(); )
            {
              node = (javax.swing.tree.DefaultMutableTreeNode)e.nextElement();
              diagnosis = (elv.util.parameters.Diagnosis)node.getUserObject();
              parentNodes = node.getPath();
              for(int j = 1; j<parentNodes.length; j++)
              {
                node = (javax.swing.tree.DefaultMutableTreeNode)parentNodes[j];
                java.lang.String level = Integer.toString(node.getParent().getIndex(node) + 1);
                if(j == 1)
                {
                  diagnosis.setParagraph(level);
                }
                else
                {
                  diagnosis.setParagraph(diagnosis.getParagraph() + "." + level);
                }
              }
              diagnosises.add(diagnosis);
            }
          }
        }
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }//GEN-LAST:event_addButtonActionPerformed

  /**
   * Method for Remove button action.
   */
  private void removeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_removeButtonActionPerformed
  {//GEN-HEADEREND:event_removeButtonActionPerformed
    try
    {
      javax.swing.tree.TreePath[] removedPaths = diagnosisesTree.getSelectionPaths();
      if(removedPaths != null)
      {
        javax.swing.tree.DefaultTreeModel treeModel = (javax.swing.tree.DefaultTreeModel)diagnosisesTree.getModel();
        javax.swing.tree.DefaultMutableTreeNode rootNode = (javax.swing.tree.DefaultMutableTreeNode)diagnosisesTree.getModel().getRoot();
        javax.swing.tree.DefaultMutableTreeNode node;
        javax.swing.tree.TreeNode[] parentNodes;
        elv.util.parameters.Diagnosis diagnosis;
        for(int i = 0; i < removedPaths.length; i++)
        {
          node = (javax.swing.tree.DefaultMutableTreeNode)removedPaths[i].getLastPathComponent();
          if(!node.isRoot())
          {
            if(!isNodeAncestor(node, removedPaths, i))
            {
              setChanged(true);
              elv.util.Util.getMainFrame().setChanged(true);
              treeModel.removeNodeFromParent(node);
              for(java.util.Enumeration e = node.preorderEnumeration(); e.hasMoreElements(); )
              {
                node = (javax.swing.tree.DefaultMutableTreeNode)e.nextElement();
                diagnosis = (elv.util.parameters.Diagnosis)node.getUserObject();
                diagnosises.remove(diagnosis);
              }
            }
          }
        }
        node = rootNode;
        java.util.Enumeration e = node.preorderEnumeration();
        node = (javax.swing.tree.DefaultMutableTreeNode)e.nextElement();
        while(e.hasMoreElements())
        {
          node = (javax.swing.tree.DefaultMutableTreeNode)e.nextElement();
          diagnosis = (elv.util.parameters.Diagnosis)node.getUserObject();
          parentNodes= node.getPath();
          for(int j = 1; j<parentNodes.length; j++)
          {
            node = (javax.swing.tree.DefaultMutableTreeNode)parentNodes[j];
            java.lang.String level = Integer.toString(node.getParent().getIndex(node) + 1);
            if(j == 1)
            {
              diagnosis.setParagraph(level);
            }
            else
            {
              diagnosis.setParagraph(diagnosis.getParagraph() + "." + level);
            }
          }
        }
      }
      setEnabled(isEnabled);
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }//GEN-LAST:event_removeButtonActionPerformed

  /**
   * Method for child determination.
   */
  private boolean isNodeChild(javax.swing.tree.DefaultMutableTreeNode node, javax.swing.tree.DefaultMutableTreeNode anotherNode)
  {
    boolean isNodeChild = false;
    javax.swing.tree.DefaultMutableTreeNode childNode;
    for(java.util.Enumeration e = anotherNode.children(); e.hasMoreElements(); )
    {
      childNode = (javax.swing.tree.DefaultMutableTreeNode)e.nextElement();
      if(childNode.equals(node))
      {
        isNodeChild = true;
        break;
      }
    }
    return isNodeChild;
  }
  
  /**
   * Method for ancestor determination.
   */
  private boolean isNodeAncestor(javax.swing.tree.DefaultMutableTreeNode node, javax.swing.tree.TreePath[] paths, int excludedIndex)
  {
    boolean isNodeAncestor = false;
    javax.swing.tree.DefaultMutableTreeNode pathNode;
    if(paths != null)
    {
      for(int i = 0; i<paths.length; i++)
      {
        if(i != excludedIndex)
        {
          pathNode = (javax.swing.tree.DefaultMutableTreeNode)paths[i].getLastPathComponent();
          if(node.isNodeAncestor(pathNode))
          {
            isNodeAncestor = true;
            break;
          }
        }
      }
    }
    return isNodeAncestor;
  }
  
  /**
   * Overridden method from <CODE>javax.swing.JComponent</CODE>.
   * @param isEnabled the enabling direction.
   */
  public void setEnabled(boolean isEnabled)
  {
    this.isEnabled = isEnabled;
    addButton.setEnabled(isEnabled);
    removeButton.setEnabled(isEnabled && diagnosisesTree.getSelectionCount() > 0);
  }
  
  /**
   * Implemented method from <CODE>elv.util.Saveable</CODE>.
   * @return the changeable owner object.
   */
  public elv.util.Changeable getOwner()
  {
    return task;
  }
  
  /**
   * Implemented method from <CODE>elv.util.Saveable</CODE>.
   * @return the type object.
   */
  public java.lang.Object getType()
  {
    return parameterType;
  }
  
  /**
   * Implemented method from <CODE>elv.util.Saveable</CODE>.
   */
  public void save()
  {
    if(isChanged())
    {
      try
      {
        elv.util.client.ClientStub.storeParameters(task.getPropertyFolderPath() + elv.util.Util.getFS() + parameterType.getFile(), diagnosises);
        if(task != null)
        {
          elv.util.Property.get(elv.task.Task.MODIFIED_NAME, task.getProperties()).setValue(new java.util.Date());
          java.lang.String pathName = task.getPropertyFolderPath() + elv.util.Util.getFS() + task.getPropertyFile();
          elv.util.client.ClientStub.storeProperties(pathName, task.getProperties());
          // Fire property change for reload the task properties.
          task.getChangeSupport().firePropertyChange(elv.task.Task.MODIFIED_NAME, null, state);
        }
        setChanged(false);
      }
      catch(java.lang.Exception exc)
      {
        elv.util.Error.showErrorMessage(this, exc);
      }
    }
  }
  
  /**
   * Implemented method from <CODE>elv.util.Saveable</CODE>.
   * @return true if there were changes.
   */
  public boolean isChanged()
  {
    return isChanged;
  }
  
  /**
   * Implemented method from <CODE>elv.util.Saveable</CODE>.
   * @param isChanged boolean to set the change state.
   */
  public void setChanged(boolean isChanged)
  {
    this.isChanged = isChanged;
  }
  
  /**
   * Method for state change.
   * @param evt a <CODE>java.beans.PropertyChangeEvent</>code object.
   */
  private void stateChange(java.beans.PropertyChangeEvent evt)
  {
    try
    {
      boolean previousIsEnabled = isEnabled;
      elv.util.State state = (elv.util.State)evt.getNewValue();
      isEnabled = (!(task.getContainer() instanceof elv.task.Archive) && 
        (state.equals(new elv.util.State(elv.util.State.UNDEFINED)) ||
        state.equals(new elv.util.State(elv.util.State.DEFINED)) ||
        state.equals(new elv.util.State(elv.util.State.SCHEDULED))));
      if(isEnabled != previousIsEnabled)
      {
        setEnabled(isEnabled);
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }
  
  /**
   * Inner class for tree model.
   */
  private class DiagnosisesTreeModel extends javax.swing.tree.DefaultTreeModel
  {
    
    /**
     * Constructor.
     */
    public DiagnosisesTreeModel()
    {
      super(new javax.swing.tree.DefaultMutableTreeNode());
      try
      {
        javax.swing.tree.DefaultMutableTreeNode nodeLevels[] = new javax.swing.tree.DefaultMutableTreeNode[10];
        nodeLevels[0] = new javax.swing.tree.DefaultMutableTreeNode(parameterType.TITLE);
        javax.swing.tree.DefaultMutableTreeNode node = null;
        
        for(elv.util.parameters.Diagnosis iteratorDiagnosis : diagnosises)
        {
          node = new javax.swing.tree.DefaultMutableTreeNode(iteratorDiagnosis);
          nodeLevels[iteratorDiagnosis.getParagraphLevel()] = node;
          nodeLevels[iteratorDiagnosis.getParagraphLevel()-1].add(node);
        }
        setRoot(nodeLevels[0]);
      }
      catch(java.lang.Exception exc)
      {
        elv.util.Error.showErrorMessage(DiagnosisesPanel.this, exc);
      }
    }
  
  }
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton addButton;
  private javax.swing.JPanel diagnosisesButtonOrientationPanel;
  private javax.swing.JPanel diagnosisesButtonPanel;
  private javax.swing.JScrollPane diagnosisesScrollPane;
  private javax.swing.JTree diagnosisesTree;
  private javax.swing.JButton removeButton;
  // End of variables declaration//GEN-END:variables
 
}
