/*
 * DocumentPanel.java
 */
package elv.gui;

/**
 * Class for showing one result document of a task.
 * @author Qpa
 */
public class DocumentPanel extends javax.swing.JPanel implements elv.util.Saveable
{
  // Variables.
  /** The file object reprezenting the currently choosed directory.*/
  private static java.io.File currentDirectory = null;
  /** The owner task. */
  private elv.task.Task task;
  /** The document file name. */
  private java.lang.String fileName;
  
  /**
   * Constructor.
   * @param task the owner of the document.
   * @param fileName the file name of the document.
   */
  public DocumentPanel(elv.task.Task task, java.lang.String fileName)
  {
    this.task = task;
    this.fileName = fileName;
    try
    {
      java.lang.String fileExtension = elv.util.Util.getFileExtension(fileName);
      java.lang.String file = elv.util.server.Servlet.FILE + elv.util.server.Servlet.EQUALS +
        java.net.URLEncoder.encode(task.getExecutionFolderPath() + elv.util.Util.getFS() + fileName, elv.util.server.Servlet.URL_ENCODING);
      java.lang.String type = elv.util.server.Servlet.TYPE + elv.util.server.Servlet.EQUALS + elv.util.server.Servlet.BIN;
      java.lang.String entry = "";
      if(task.getContainer() instanceof elv.task.Archive)
      {
        file = elv.util.server.Servlet.FILE + elv.util.server.Servlet.EQUALS + java.net.URLEncoder.encode(task.getContainer().getFolderPath(), elv.util.server.Servlet.URL_ENCODING);
        entry = elv.util.server.Servlet.ENTRY + elv.util.server.Servlet.EQUALS +
          java.net.URLEncoder.encode(task.getName() + elv.util.Util.ZIP_SEPARATOR + elv.task.Task.EXECUTION_FOLDER + elv.util.Util.ZIP_SEPARATOR + fileName, elv.util.server.Servlet.URL_ENCODING);
      }
      java.lang.String query = file + elv.util.server.Servlet.AND + type + elv.util.server.Servlet.AND + entry;
      java.net.URL documentURL = new java.net.URL(elv.util.Util.getServletURL() + elv.util.server.Servlet.QUERY + query);
      java.net.URL htmlDocumentURL = null;
      if(fileExtension.equalsIgnoreCase("csv"))
      {
        type = elv.util.server.Servlet.TYPE + elv.util.server.Servlet.EQUALS + elv.util.server.Servlet.HTML;
        query = file + elv.util.server.Servlet.AND + type + elv.util.server.Servlet.AND + entry;
        htmlDocumentURL = new java.net.URL(elv.util.Util.getServletURL() + elv.util.server.Servlet.QUERY + query);
      }
      
      initComponents();
      
      if(fileExtension.equalsIgnoreCase("jpg") || fileExtension.equalsIgnoreCase("jpeg") ||
        fileExtension.equalsIgnoreCase("gif") || fileExtension.equalsIgnoreCase("png"))
      {
        add(new ImagePanel(documentURL), java.awt.BorderLayout.CENTER);
      }
      else if(fileExtension.equalsIgnoreCase("pdf"))
      {
        add(new PdfPanel(documentURL), java.awt.BorderLayout.CENTER);
      }
      else // HTML or plain text (depends on ContentType).
      {
        add(new TextPanel(documentURL, htmlDocumentURL), java.awt.BorderLayout.CENTER);
      }
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }
  
  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents()//GEN-BEGIN:initComponents
  {

    setLayout(new java.awt.BorderLayout());

  }//GEN-END:initComponents
  
  /**
   * Implemented method from <CODE>elv.util.Saveable</CODE>.
   * @return the changeable owner object.
   */
  public elv.util.Changeable getOwner()
  {
    return task;
  }
  
  /**
   * Implemented method from <CODE>elv.util.Saveable</CODE>.
   * @return the type object.
   */
  public java.lang.Object getType()
  {
    return fileName;
  }
  
  /**
   * Implemented method from <CODE>elv.util.Saveable</CODE>.
   */
  public void save()
  {
    try
    {
      saveDocument(this, task, fileName);
    }
    catch(java.lang.Exception exc)
    {
      elv.util.Error.showErrorMessage(this, exc);
    }
  }
  
  /**
   * Implemented method from <CODE>elv.util.Saveable</CODE>.
   * @return true if there were changes.
   */
  public boolean isChanged()
  {
    return false;
  }  
  
  /**
   * Implemented method from <CODE>elv.util.Saveable</CODE>.
   * @param isChanged boolean to set the change state.
   */
  public void setChanged(boolean isChanged)
  {
  }
  
  /**
   * Method for saving the named document to the local system.
   * @param parent the parent component of the save dialog.
   * @param task the owner of the document.
   * @param fileName the file name of the document.
   * @throws java.lang.Exception if there is any problem with saving.
   */
  public static void saveDocument(java.awt.Component parent, elv.task.Task task, java.lang.String fileName) throws java.lang.Exception
  {
    final java.lang.String fileExtension = elv.util.Util.getFileExtension(fileName);
    
    javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser(currentDirectory);
    java.lang.String fileBaseName = task.getName() + "-" + elv.util.Util.getFileBase(fileName);
    fileChooser.setSelectedFile(new java.io.File(currentDirectory, fileBaseName));
    javax.swing.filechooser.FileFilter extensionFilter = new javax.swing.filechooser.FileFilter()
    {
      /**
       * Overridden method from <CODE>javax.swing.filechooser.FileFilter</CODE>.
       */
      public boolean accept(java.io.File file)
      {
        boolean isAcceptable = true;
        if(fileExtension != null)
        {
          if(file != null && !file.isDirectory())
          {
            java.lang.String extension = elv.util.Util.getFileExtension(file.getName());
            if(!fileExtension.equals(extension))
            {
              isAcceptable = false;
            }
          }
        }
        return isAcceptable;
      }
      
      /**
       * Overridden method from <CODE>javax.swing.filechooser.FileFilter</CODE>.
       */
      public java.lang.String getDescription()
      {
        return "*." + fileExtension;
      }
    };
    fileChooser.addChoosableFileFilter(extensionFilter);
    fileChooser.setDialogTitle(elv.util.Util.translate(new elv.util.Action(elv.util.Action.SAVE_DOCUMENTS).getName()));
    if(fileChooser.showDialog(parent, new elv.util.Action(elv.util.Action.SAVE).toString()) == javax.swing.JFileChooser.APPROVE_OPTION)
    {
      // Memorize the current directory for next usages.
      currentDirectory = fileChooser.getCurrentDirectory();
      // Construct URL.
      java.lang.String file = elv.util.server.Servlet.FILE + elv.util.server.Servlet.EQUALS +
        java.net.URLEncoder.encode(task.getExecutionFolderPath() + elv.util.Util.getFS() + fileName, elv.util.server.Servlet.URL_ENCODING);
      java.lang.String type = elv.util.server.Servlet.TYPE + elv.util.server.Servlet.EQUALS + elv.util.server.Servlet.BIN;
      java.lang.String entry = "";
      if(task.getContainer() instanceof elv.task.Archive)
      {
        file = elv.util.server.Servlet.FILE + elv.util.server.Servlet.EQUALS + java.net.URLEncoder.encode(task.getContainer().getFolderPath(), elv.util.server.Servlet.URL_ENCODING);
        entry = elv.util.server.Servlet.ENTRY + elv.util.server.Servlet.EQUALS +
          java.net.URLEncoder.encode(task.getName() + elv.util.Util.ZIP_SEPARATOR + elv.task.Task.EXECUTION_FOLDER + elv.util.Util.ZIP_SEPARATOR + fileName, elv.util.server.Servlet.URL_ENCODING);
      }
      java.lang.String query = file + elv.util.server.Servlet.AND + type + elv.util.server.Servlet.AND + entry;
      java.net.URL documentURL = new java.net.URL(elv.util.Util.getServletURL() + elv.util.server.Servlet.QUERY + query);
      // Secure the extension ending.
      java.lang.String saveableDocumentName = fileChooser.getSelectedFile().getAbsolutePath().split(java.util.regex.Pattern.quote("." + fileExtension))[0] + "." + fileExtension;
      
      if(fileExtension.equals("txt") || fileExtension.equals("csv") ||
         fileExtension.equals("html") || fileExtension.equals("xml"))
      {
        java.lang.String line;
        java.io.BufferedReader fileReader = new java.io.BufferedReader(new java.io.InputStreamReader(documentURL.openStream(), elv.util.Util.FILE_ENCODING));
        java.io.PrintWriter fileWriter = new java.io.PrintWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(saveableDocumentName)));
        while((line = fileReader.readLine()) != null)
        {
          fileWriter.println(line);
        }
        fileReader.close();
        fileWriter.close();
      }
      else
      {
        java.io.InputStream inputStream = documentURL.openStream();
        java.io.FileOutputStream outputStream = new java.io.FileOutputStream(saveableDocumentName);
        int count;
        byte[] buffer = new byte[elv.util.Util.BUFFER_SIZE];
        while((count = inputStream.read(buffer, 0,  elv.util.Util.BUFFER_SIZE)) != -1)
        {
          outputStream.write(buffer, 0,  count);
        }
        inputStream.close();
        outputStream.close();
      }
    }
  }
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
  
}
